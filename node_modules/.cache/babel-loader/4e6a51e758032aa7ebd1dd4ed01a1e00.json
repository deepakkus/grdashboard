{"ast":null,"code":"import _regeneratorRuntime from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from\"axios\";import{ADD_CROPCYCLE,ADD_CROPCYCLE_ERROR// SET_CROPCYCLES,\n,SET_SORTEDCROPCYCLES,GET_CROPCYCLES_ERROR,SET_APP_LOADING,GET_USER_FARM_CROPCYCLES,GET_USER_FARM_CROPCYCLES_ERROR,UPDATE_CROPCYCLE,UPDATE_CROPCYCLE_ERROR}from\"./types\";import{updateFarmCrop}from\"../services/farm\";export var addCropCycle=function addCropCycle(cropCycle,userId,token){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.post(\"\".concat(process.env.REACT_APP_API_URL,\"/cropcycle\"),// `http://localhost:4000/cropcycle/`,\ncropCycle,{headers:{Authorization:\"Bearer \".concat(token,\" \").concat(userId)}});case 3:res=_context.sent;if(res&&res.data&&res.data._id){updateFarmCrop(res.data._id);}dispatch({type:ADD_CROPCYCLE,payload:res.data});_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);dispatch({type:ADD_CROPCYCLE_ERROR,payload:_context.t0.response});case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var editCropCycle=function editCropCycle(cropCycle,userId,token){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.put(\"\".concat(process.env.REACT_APP_API_URL,\"/cropcycle\"),cropCycle,{headers:{Authorization:\"Bearer \".concat(token,\" \").concat(userId)}});case 3:res=_context2.sent;if(res&&res.data&&res.data._id){updateFarmCrop(res.data._id);}dispatch({type:UPDATE_CROPCYCLE,payload:res.data});_context2.next=11;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);dispatch({type:UPDATE_CROPCYCLE_ERROR,payload:_context2.t0.response});case 11:case\"end\":return _context2.stop();}}},_callee2,null,[[0,8]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};// export const getUserCropCycles = (userFarms, token, userId) => async (dispatch) => {\n//     const farmsIds = [];\n//     userFarms.map(uFarm => {\n//      uFarm ? (farmsIds.find((farmId) => farmId === uFarm) ? (console.log(\"duplicate\")) : \n//      (uFarm._id ? (farmsIds.push(uFarm._id))\n//      : (console.log(\"_id not defined\", uFarm)))\n//      )\n//       : (console.log(\"fromaction\", uFarm))   \n//     })\n//     try {\n//     // const res = await axios.post(`${process.env.API_LOCAL_DB}/cropcycle/all`, farmsIds);\n//     const res = await axios.post(`http://localhost:4000/cropcycle/all`, farmsIds, \n//     {\n//       headers: {\n//         Authorization: `Bearer ${token} ${userId}`,\n//       }\n//     });\n//     dispatch({\n//       type: SET_CROPCYCLES,\n//       payload: res.data,\n//     });\n//     dispatch({\n//       type: SET_APP_LOADING,\n//       payload: false,\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: GET_CROPCYCLES_ERROR,\n//       payload: { msg: err.response },\n//     });\n//   }\n// };\nexport var getUserSortedCropCycles=function getUserSortedCropCycles(userFarms,userId,token){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var farmsIds,res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:farmsIds=[];userFarms.map(function(uFarm){uFarm?farmsIds.find(function(farmId){return farmId===uFarm;})?console.log(\"duplicate\"):uFarm._id?farmsIds.push(uFarm._id):console.log(\"_id not defined\",uFarm):console.log(\"fromaction\",uFarm);});_context3.prev=2;if(!farmsIds.length){_context3.next=9;break;}_context3.next=6;return axios.post(\"\".concat(process.env.REACT_APP_API_URL,\"/cropcycle/all\"),// const res = await axios.post(`http://localhost:4000/cropcycle/all`,\nfarmsIds,{headers:{Authorization:\"Bearer \".concat(token,\" \").concat(userId)}});case 6:res=_context3.sent;dispatch({type:SET_SORTEDCROPCYCLES,// payload: res,\npayload:res.data});dispatch({type:SET_APP_LOADING,payload:false});case 9:_context3.next=14;break;case 11:_context3.prev=11;_context3.t0=_context3[\"catch\"](2);dispatch({type:GET_CROPCYCLES_ERROR,payload:{msg:_context3.t0.response}});case 14:case\"end\":return _context3.stop();}}},_callee3,null,[[2,11]]);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var getUserFarmCropCycles=function getUserFarmCropCycles(farmID,userId,token){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var res;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return axios.get(\"https://7exe1aor1a.execute-api.us-east-1.amazonaws.com/dev/cropcycle/\".concat(farmID),{headers:{Authorization:\"Bearer \".concat(token,\" \").concat(userId)}});case 3:res=_context4.sent;dispatch({type:GET_USER_FARM_CROPCYCLES,payload:res.data});_context4.next=10;break;case 7:_context4.prev=7;_context4.t0=_context4[\"catch\"](0);dispatch({type:GET_USER_FARM_CROPCYCLES_ERROR,payload:{msg:_context4.t0.response}});case 10:case\"end\":return _context4.stop();}}},_callee4,null,[[0,7]]);}));return function(_x4){return _ref4.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/actions/cropcycles.js"],"names":["axios","ADD_CROPCYCLE","ADD_CROPCYCLE_ERROR","SET_SORTEDCROPCYCLES","GET_CROPCYCLES_ERROR","SET_APP_LOADING","GET_USER_FARM_CROPCYCLES","GET_USER_FARM_CROPCYCLES_ERROR","UPDATE_CROPCYCLE","UPDATE_CROPCYCLE_ERROR","updateFarmCrop","addCropCycle","cropCycle","userId","token","dispatch","post","process","env","REACT_APP_API_URL","headers","Authorization","res","data","_id","type","payload","response","editCropCycle","put","getUserSortedCropCycles","userFarms","farmsIds","map","uFarm","find","farmId","console","log","push","length","msg","getUserFarmCropCycles","farmID","get"],"mappings":"mVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OACEC,aADF,CAEEC,mBACA;AAHF,CAIEC,oBAJF,CAKEC,oBALF,CAMEC,eANF,CAOEC,wBAPF,CAQEC,8BARF,CASEC,gBATF,CASoBC,sBATpB,KAUO,SAVP,CAWA,OAASC,cAAT,KAA+B,kBAA/B,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,CAAYC,MAAZ,CAAoBC,KAApB,iGAA8B,iBAAOC,QAAP,gKAEpCf,CAAAA,KAAK,CAACgB,IAAN,WACbC,OAAO,CAACC,GAAR,CAAYC,iBADC,eAEhB;AACAP,SAHgB,CAIhB,CACEQ,OAAO,CAAE,CACPC,aAAa,kBAAYP,KAAZ,aAAqBD,MAArB,CADN,CADX,CAJgB,CAFoC,QAEhDS,GAFgD,eAYtD,GAAIA,GAAG,EAAIA,GAAG,CAACC,IAAX,EAAmBD,GAAG,CAACC,IAAJ,CAASC,GAAhC,CAAoC,CAClCd,cAAc,CAACY,GAAG,CAACC,IAAJ,CAASC,GAAV,CAAd,CACD,CACDT,QAAQ,CAAC,CACPU,IAAI,CAAExB,aADC,CAEPyB,OAAO,CAAEJ,GAAG,CAACC,IAFN,CAAD,CAAR,CAfsD,+EAoBtDR,QAAQ,CAAC,CACPU,IAAI,CAAEvB,mBADC,CAEPwB,OAAO,CAAE,YAAIC,QAFN,CAAD,CAAR,CApBsD,oEAA9B,gEAArB,CA2BP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAChB,SAAD,CAAYC,MAAZ,CAAoBC,KAApB,kGAA8B,kBAAOC,QAAP,sKAErCf,CAAAA,KAAK,CAAC6B,GAAN,WACbZ,OAAO,CAACC,GAAR,CAAYC,iBADC,eAEhBP,SAFgB,CAGhB,CACEQ,OAAO,CAAE,CACPC,aAAa,kBAAYP,KAAZ,aAAqBD,MAArB,CADN,CADX,CAHgB,CAFqC,QAEjDS,GAFiD,gBAWvD,GAAIA,GAAG,EAAIA,GAAG,CAACC,IAAX,EAAmBD,GAAG,CAACC,IAAJ,CAASC,GAAhC,CAAoC,CAClCd,cAAc,CAACY,GAAG,CAACC,IAAJ,CAASC,GAAV,CAAd,CACD,CACDT,QAAQ,CAAC,CACPU,IAAI,CAAEjB,gBADC,CAEPkB,OAAO,CAAEJ,GAAG,CAACC,IAFN,CAAD,CAAR,CAduD,mFAmBvDR,QAAQ,CAAC,CACPU,IAAI,CAAEhB,sBADC,CAEPiB,OAAO,CAAE,aAAIC,QAFN,CAAD,CAAR,CAnBuD,sEAA9B,kEAAtB,CA0BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,IAAMG,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,SAAD,CAAYlB,MAAZ,CAAoBC,KAApB,kGAA8B,kBAAOC,QAAP,uIAC7DiB,QAD6D,CAClD,EADkD,CAEjED,SAAS,CAACE,GAAV,CAAc,SAAAC,KAAK,CAAI,CACtBA,KAAK,CAAIF,QAAQ,CAACG,IAAT,CAAc,SAACC,MAAD,QAAYA,CAAAA,MAAM,GAAKF,KAAvB,EAAd,EAA+CG,OAAO,CAACC,GAAR,CAAY,WAAZ,CAA/C,CACRJ,KAAK,CAACV,GAAN,CAAaQ,QAAQ,CAACO,IAAT,CAAcL,KAAK,CAACV,GAApB,CAAb,CACEa,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAA+BJ,KAA/B,CAFE,CAIDG,OAAO,CAACC,GAAR,CAAY,YAAZ,CAA0BJ,KAA1B,CAJJ,CAKA,CAND,EAFiE,qBAU3DF,QAAQ,CAACQ,MAVkD,iDAW3CxC,CAAAA,KAAK,CAACgB,IAAN,WAAcC,OAAO,CAACC,GAAR,CAAYC,iBAA1B,mBAClB;AACAa,QAFkB,CAGlB,CACEZ,OAAO,CAAE,CACPC,aAAa,kBAAYP,KAAZ,aAAqBD,MAArB,CADN,CADX,CAHkB,CAX2C,QAWvDS,GAXuD,gBAmB7DP,QAAQ,CAAC,CACPU,IAAI,CAAEtB,oBADC,CAEP;AACAuB,OAAO,CAAEJ,GAAG,CAACC,IAHN,CAAD,CAAR,CAKAR,QAAQ,CAAC,CACPU,IAAI,CAAEpB,eADC,CAEPqB,OAAO,CAAE,KAFF,CAAD,CAAR,CAxB6D,4FA8BjEX,QAAQ,CAAC,CACPU,IAAI,CAAErB,oBADC,CAEPsB,OAAO,CAAE,CAAEe,GAAG,CAAE,aAAId,QAAX,CAFF,CAAD,CAAR,CA9BiE,uEAA9B,kEAAhC,CAoCP,MAAO,IAAMe,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,MAAD,CAAS9B,MAAT,CAAiBC,KAAjB,kGAA2B,kBAC9DC,QAD8D,sKAI1Cf,CAAAA,KAAK,CAAC4C,GAAN,gFACwDD,MADxD,EAEhB,CACEvB,OAAO,CAAE,CACPC,aAAa,kBAAYP,KAAZ,aAAqBD,MAArB,CADN,CADX,CAFgB,CAJ0C,QAItDS,GAJsD,gBAY5DP,QAAQ,CAAC,CACPU,IAAI,CAAEnB,wBADC,CAEPoB,OAAO,CAAEJ,GAAG,CAACC,IAFN,CAAD,CAAR,CAZ4D,mFAiB5DR,QAAQ,CAAC,CACPU,IAAI,CAAElB,8BADC,CAEPmB,OAAO,CAAE,CAAEe,GAAG,CAAE,aAAId,QAAX,CAFF,CAAD,CAAR,CAjB4D,sEAA3B,kEAA9B","sourcesContent":["import axios from \"axios\";\n\nimport {\n  ADD_CROPCYCLE,\n  ADD_CROPCYCLE_ERROR,\n  // SET_CROPCYCLES,\n  SET_SORTEDCROPCYCLES,\n  GET_CROPCYCLES_ERROR,\n  SET_APP_LOADING,\n  GET_USER_FARM_CROPCYCLES,\n  GET_USER_FARM_CROPCYCLES_ERROR,\n  UPDATE_CROPCYCLE, UPDATE_CROPCYCLE_ERROR,\n} from \"./types\";\nimport { updateFarmCrop } from \"../services/farm\";\n\nexport const addCropCycle = (cropCycle, userId, token) => async (dispatch) => {\n  try {\n    const res = await axios.post(\n      `${process.env.REACT_APP_API_URL}/cropcycle`,\n      // `http://localhost:4000/cropcycle/`,\n      cropCycle,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`,\n        },\n      }\n    );\n    if (res && res.data && res.data._id){\n      updateFarmCrop(res.data._id);\n    }\n    dispatch({\n      type: ADD_CROPCYCLE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_CROPCYCLE_ERROR,\n      payload: err.response,\n    });\n  }\n};\n\nexport const editCropCycle = (cropCycle, userId, token) => async (dispatch) => {\n  try {\n    const res = await axios.put(\n      `${process.env.REACT_APP_API_URL}/cropcycle`,\n      cropCycle,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`,\n        },\n      }\n    );\n    if (res && res.data && res.data._id){\n      updateFarmCrop(res.data._id);\n    }\n    dispatch({\n      type: UPDATE_CROPCYCLE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: UPDATE_CROPCYCLE_ERROR,\n      payload: err.response,\n    });\n  }\n};\n\n// export const getUserCropCycles = (userFarms, token, userId) => async (dispatch) => {\n//     const farmsIds = [];\n//     userFarms.map(uFarm => {\n//      uFarm ? (farmsIds.find((farmId) => farmId === uFarm) ? (console.log(\"duplicate\")) : \n//      (uFarm._id ? (farmsIds.push(uFarm._id))\n//      : (console.log(\"_id not defined\", uFarm)))\n//      )\n//       : (console.log(\"fromaction\", uFarm))   \n//     })\n//     try {\n//     // const res = await axios.post(`${process.env.API_LOCAL_DB}/cropcycle/all`, farmsIds);\n//     const res = await axios.post(`http://localhost:4000/cropcycle/all`, farmsIds, \n//     {\n//       headers: {\n//         Authorization: `Bearer ${token} ${userId}`,\n//       }\n//     });\n//     dispatch({\n//       type: SET_CROPCYCLES,\n//       payload: res.data,\n//     });\n//     dispatch({\n//       type: SET_APP_LOADING,\n//       payload: false,\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: GET_CROPCYCLES_ERROR,\n//       payload: { msg: err.response },\n//     });\n//   }\n// };\n\nexport const getUserSortedCropCycles = (userFarms, userId, token) => async (dispatch) => {\n  const farmsIds = [];\n    userFarms.map(uFarm => {\n     uFarm ? (farmsIds.find((farmId) => farmId === uFarm) ? (console.log(\"duplicate\")) : \n     (uFarm._id ? (farmsIds.push(uFarm._id))\n     : (console.log(\"_id not defined\", uFarm)))\n     )\n      : (console.log(\"fromaction\", uFarm))   \n    })    \n    try {\n      if (farmsIds.length) {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/cropcycle/all`,\n        // const res = await axios.post(`http://localhost:4000/cropcycle/all`,\n        farmsIds,\n        {\n          headers: {\n            Authorization: `Bearer ${token} ${userId}`,\n          }\n        });\n        dispatch({\n          type: SET_SORTEDCROPCYCLES,\n          // payload: res,\n          payload: res.data,\n        });\n        dispatch({\n          type: SET_APP_LOADING,\n          payload: false,\n        });\n      }    \n  } catch (err) {\n    dispatch({\n      type: GET_CROPCYCLES_ERROR,\n      payload: { msg: err.response },\n    });\n  }\n};\nexport const getUserFarmCropCycles = (farmID, userId, token) => async (\n  dispatch\n) => {\n  try {\n    const res = await axios.get(\n      `https://7exe1aor1a.execute-api.us-east-1.amazonaws.com/dev/cropcycle/${farmID}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`,\n        },\n      }\n    );\n    dispatch({\n      type: GET_USER_FARM_CROPCYCLES,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_USER_FARM_CROPCYCLES_ERROR,\n      payload: { msg: err.response },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}