{"ast":null,"code":"import React,{useEffect}from\"react\";import{connect}from\"react-redux\";import{getWeatherData}from\"../../actions/weather\";import{useTranslation}from\"react-i18next\";import{Loader,Grid,Container}from\"semantic-ui-react\";import\"../../utils/css/weather-icons.css\";import\"./PublicData.scss\";import WeatherDisplay from\"react-weather-display\";import MainButton from\"../MainButton/MainButton\";// import { useTranslation } from \"react-i18next\";\n// const weatherIcons = {\n//   Thunderstorm: \"wi-thunderstorm\",\n//   Drizzle: \"wi-sleet\",\n//   Rain: \"wi-storm-showers\",\n//   Snow: \"wi-snow\",\n//   Atmosphere: \"wi-fog\",\n//   Clear: \"wi-day-sunny\",\n//   Clouds: \"wi-day-fog\",\n// };\nvar PublicData=function PublicData(props){// weatherData = null;\n// TODO get latlng from browser location if not found\n// transltion i18next\nvar _useTranslation=useTranslation(\"public-data\"),t=_useTranslation.t;var weatherData=props.weatherData,getWeatherData=props.getWeatherData,latlng=props.latlng,match=props.match;// weather Icon function\n// const [iconState, setIconState] = useState({ icon: \"wi-day-sunny\" });\n// console.log(\"routeID\", match.params.id);\n// console.log(\"top\", weatherData);\n// get the right weather Icon depnds on the randeId\n// const get_WeatherIcon = (icons, rangeId) => {\n//   switch (true) {\n//     case rangeId >= 200 && rangeId < 232:\n//       setIconState({ icon: icons.Thunderstorm });\n//       break;\n//     case rangeId >= 300 && rangeId <= 321:\n//       setIconState({ icon: icons.Drizzle });\n//       break;\n//     case rangeId >= 500 && rangeId <= 521:\n//       setIconState({ icon: icons.Rain });\n//       break;\n//     case rangeId >= 600 && rangeId <= 622:\n//       setIconState({ icon: icons.Snow });\n//       break;\n//     case rangeId >= 701 && rangeId <= 781:\n//       setIconState({ icon: icons.Atmosphere });\n//       break;\n//     case rangeId === 800:\n//       setIconState({ icon: icons.Clear });\n//       break;\n//     case rangeId >= 801 && rangeId <= 804:\n//       setIconState({ icon: icons.Clouds });\n//       break;\n//     default:\n//       setIconState({ icon: icons.Clouds });\n//   }\n// };\nvar changeLogo=function changeLogo(image){switch(image){case\"cloudy\":return\"cloudy\";break;case\"partly_cloudy\":return\"cloudy\";break;case\"mostly_cloudy\":return\"cloudy\";break;case\"mostly_clear\":return\"sunny\";break;case\"clear\":return\"sunny\";break;case\"fog\":return\"cloudy\";break;case\"fog_light\":return\"sunny\";break;case\"drizzle\":return\"cloudy\";break;case\"rain_light\":return\"rainy\";break;case\"rain\":return\"rainy\";break;case\"rain_heavy\":return\"rainy\";break;case\"tstorm\":return\"rainy\";break;case\"flurries\":return\"rainy\";break;case\"snow_light\":return\"snowy\";break;case\"snow\":return\"snowy\";break;case\"snow_heavy\":return\"snowy\";break;case\"ice_pallets_light\":return\"rainy\";break;case\"ice_pallets_heavy\":return\"rainy\";break;case\"ice_pallets\":return\"rainy\";break;case\"freezing_drizzle\":return\"snowy\";break;case\"freezing_rain_light\":return\"rainy\";break;case\"freezing_rain\":return\"rainy\";break;case\"freezing_rain_heavy\":return\"rainy\";break;default:return\"cloudy\";}};useEffect(function(){// console.log(\"weatherData\", weatherData);\ngetWeatherData(latlng.lat,latlng.lon);// get_WeatherIcon(weatherIcons, weatherData && weatherData.weatherId);\n},[latlng.lat,latlng.lon]);// convert to celsius func\nvar calCelsius=function calCelsius(temp){var cell=Math.floor(temp-273.15);return cell;};// const { icon } = iconState;\nif(!weatherData){return null;}var precipIntensity=weatherData.precipitation?weatherData.precipitation.value:weatherData.precipitation;var humidity=weatherData.humidity?weatherData.precipitation.value:weatherData.humidity;var visibility=weatherData.visibility?weatherData.visibility.value:weatherData.visibility;var temp=weatherData.temp?weatherData.temp.value:weatherData.temp;var wind_direction=weatherData.wind_direction?weatherData.wind_direction.value:weatherData.wind_direction;var wind_speed=weatherData.wind_speed?weatherData.wind_speed.value:weatherData.wind_speed;var weatherDesc=weatherData.weather_code?weatherData.weather_code.value:weatherData.weather_code;var main=weatherData.weather_code?weatherData.weather_code.value:weatherData.weather_code;// if (!weatherData) {\n//   return <p>no data found</p>;\n//   // return <Loader active inline=\"centered\" className=\"mt-4\" />;\n// }\n//weather icon func\n// get_WeatherIcon(weatherIcons, weatherId);\n// const UrlID = match.params.id;\nreturn latlng.lat!==0&&latlng.lng!==0?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Grid,{columns:1,className:\"mx-0\"},/*#__PURE__*/React.createElement(Grid.Row,{className:\"ml-0\"},/*#__PURE__*/React.createElement(Grid.Column,{className:\"ml-0\"},/*#__PURE__*/React.createElement(Container,{textAlign:\"center\",className:\"ml-5\"},/*#__PURE__*/React.createElement(\"div\",{className:\"PublicData\"},/*#__PURE__*/React.createElement(\"h5\",null,t(\"public-data\")),/*#__PURE__*/React.createElement(\"div\",{className:\"weather\"},/*#__PURE__*/React.createElement(\"div\",{className:\"weather-details\"},/*#__PURE__*/React.createElement(\"h6\",null,weatherDesc),/*#__PURE__*/React.createElement(\"h6\",null,t(\"temp\"),\" \".concat(temp),\"\\xB0C\")),/*#__PURE__*/React.createElement(\"i\",{className:\"weatherIcon\"},/*#__PURE__*/React.createElement(WeatherDisplay,{height:140,width:140,currentCondition:changeLogo(main),currentTemperature:temp}))),/*#__PURE__*/React.createElement(\"h6\",null,t(\"precipitation-intensity\"),\" \",precipIntensity),/*#__PURE__*/React.createElement(\"h6\",null,t(\"humidity\"),\"  \",humidity,\" %\"),/*#__PURE__*/React.createElement(\"h6\",null,t(\"visibility\"),\" \",visibility,\" km\"),/*#__PURE__*/React.createElement(\"h6\",null,t(\"wind-speed\"),\" \",wind_speed,\" Kmph\"),/*#__PURE__*/React.createElement(\"h6\",null,t(\"wind-direction\"),\" \",wind_direction,\"\\xB0 N\"))),/*#__PURE__*/React.createElement(MainButton,Object.assign({className:\"gis\"},props),t(\"ADD ACTIVITY\")))))):/*#__PURE__*/ // \"\"\nReact.createElement(Loader,{active:true,inline:\"centered\",className:\"mt-3\"});};var mapStateToProps=function mapStateToProps(state){return{weatherData:state.weather.weatherData_sensor,sensors:state.sensors.sensormeasures};};export default connect(mapStateToProps,{getWeatherData:getWeatherData})(PublicData);","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/PublicData/PublicData.js"],"names":["React","useEffect","connect","getWeatherData","useTranslation","Loader","Grid","Container","WeatherDisplay","MainButton","PublicData","props","t","weatherData","latlng","match","changeLogo","image","lat","lon","calCelsius","temp","cell","Math","floor","precipIntensity","precipitation","value","humidity","visibility","wind_direction","wind_speed","weatherDesc","weather_code","main","lng","mapStateToProps","state","weather","weatherData_sensor","sensors","sensormeasures"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getWeatherData } from \"../../actions/weather\";\nimport { useTranslation } from \"react-i18next\";\nimport { Loader , Grid, Container} from \"semantic-ui-react\";\nimport \"../../utils/css/weather-icons.css\";\nimport \"./PublicData.scss\";\nimport WeatherDisplay from \"react-weather-display\";\nimport MainButton from \"../MainButton/MainButton\";\n// import { useTranslation } from \"react-i18next\";\n\n// const weatherIcons = {\n//   Thunderstorm: \"wi-thunderstorm\",\n//   Drizzle: \"wi-sleet\",\n//   Rain: \"wi-storm-showers\",\n//   Snow: \"wi-snow\",\n//   Atmosphere: \"wi-fog\",\n//   Clear: \"wi-day-sunny\",\n//   Clouds: \"wi-day-fog\",\n// };\n\nconst  PublicData = (props) =>{\n  // weatherData = null;\n  // TODO get latlng from browser location if not found\n  // transltion i18next\n  const { t } = useTranslation(\"public-data\");\n  const { weatherData, getWeatherData, latlng, match } = props\n  // weather Icon function\n  // const [iconState, setIconState] = useState({ icon: \"wi-day-sunny\" });\n  // console.log(\"routeID\", match.params.id);\n  // console.log(\"top\", weatherData);\n\n  // get the right weather Icon depnds on the randeId\n  // const get_WeatherIcon = (icons, rangeId) => {\n  //   switch (true) {\n  //     case rangeId >= 200 && rangeId < 232:\n  //       setIconState({ icon: icons.Thunderstorm });\n  //       break;\n  //     case rangeId >= 300 && rangeId <= 321:\n  //       setIconState({ icon: icons.Drizzle });\n  //       break;\n  //     case rangeId >= 500 && rangeId <= 521:\n  //       setIconState({ icon: icons.Rain });\n  //       break;\n  //     case rangeId >= 600 && rangeId <= 622:\n  //       setIconState({ icon: icons.Snow });\n  //       break;\n  //     case rangeId >= 701 && rangeId <= 781:\n  //       setIconState({ icon: icons.Atmosphere });\n  //       break;\n  //     case rangeId === 800:\n  //       setIconState({ icon: icons.Clear });\n  //       break;\n  //     case rangeId >= 801 && rangeId <= 804:\n  //       setIconState({ icon: icons.Clouds });\n  //       break;\n  //     default:\n  //       setIconState({ icon: icons.Clouds });\n  //   }\n  // };\n\n  const changeLogo = (image) => {\n    switch(image){\n      case \"cloudy\":\n        return \"cloudy\";\n        break;\n      case \"partly_cloudy\":\n        return \"cloudy\";\n        break;\n      case \"mostly_cloudy\":\n        return \"cloudy\";\n        break;\n      case \"mostly_clear\":\n        return \"sunny\";\n        break;\n      case \"clear\":\n        return \"sunny\";\n        break;\n      case \"fog\":\n        return \"cloudy\";\n        break;\n      case \"fog_light\":\n        return \"sunny\";\n        break;\n      case \"drizzle\":\n        return \"cloudy\";\n        break;\n      case \"rain_light\":\n        return \"rainy\";\n        break;\n      case \"rain\":\n        return \"rainy\";\n        break;\n      case \"rain_heavy\":\n        return \"rainy\";\n        break;\n      case \"tstorm\":\n        return \"rainy\";\n        break;\n      case \"flurries\":\n        return \"rainy\";\n        break;\n      case \"snow_light\":\n        return \"snowy\";\n        break;\n      case \"snow\":\n        return \"snowy\";\n        break;\n      case \"snow_heavy\":\n        return \"snowy\";\n        break;\n      case \"ice_pallets_light\":\n        return \"rainy\";\n        break;\n      case \"ice_pallets_heavy\":\n        return \"rainy\";\n        break;\n      case \"ice_pallets\":\n        return \"rainy\";\n        break;\n      case \"freezing_drizzle\":\n        return \"snowy\";\n        break;\n      case \"freezing_rain_light\":\n        return \"rainy\";\n        break;\n      case \"freezing_rain\":\n        return \"rainy\";\n        break;\n      case \"freezing_rain_heavy\":\n        return \"rainy\";\n        break;\n      default:\n        return \"cloudy\";\n    }\n  }\n\n  useEffect(() => {\n    // console.log(\"weatherData\", weatherData);\n\n    getWeatherData(latlng.lat, latlng.lon);\n\n    // get_WeatherIcon(weatherIcons, weatherData && weatherData.weatherId);\n  }, [latlng.lat, latlng.lon]);\n\n  // convert to celsius func\n  const calCelsius = (temp) => {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  };\n\n  // const { icon } = iconState;\n  if (!weatherData) {\n    return null;\n  }\n  const precipIntensity = weatherData.precipitation ? weatherData.precipitation.value : weatherData.precipitation;\n  const humidity = weatherData.humidity ? weatherData.precipitation.value : weatherData.humidity;\n  const visibility = weatherData.visibility ? weatherData.visibility.value : weatherData.visibility;\n  const temp = weatherData.temp ? weatherData.temp.value : weatherData.temp;\n  const wind_direction = weatherData.wind_direction ? weatherData.wind_direction.value : weatherData.wind_direction;\n  const wind_speed = weatherData.wind_speed ? weatherData.wind_speed.value : weatherData.wind_speed;\n  const weatherDesc = weatherData.weather_code ? weatherData.weather_code.value : weatherData.weather_code;\n  const main = weatherData.weather_code ? weatherData.weather_code.value : weatherData.weather_code;\n  // if (!weatherData) {\n  //   return <p>no data found</p>;\n  //   // return <Loader active inline=\"centered\" className=\"mt-4\" />;\n  // }\n  //weather icon func\n  // get_WeatherIcon(weatherIcons, weatherId);\n  // const UrlID = match.params.id;\n\n  return latlng.lat !== 0 && latlng.lng !==0  ? (\n    <>\n\n      <Grid columns={1} className=\"mx-0\">\n        <Grid.Row className=\"ml-0\">\n          <Grid.Column className=\"ml-0\">\n            <Container textAlign=\"center\" className=\"ml-5\">\n              <div className=\"PublicData\">\n                <h5>{t(\"public-data\")}</h5>  \n                <div className=\"weather\">\n                  <div className=\"weather-details\">\n                    <h6>\n                      {weatherDesc}\n                    </h6>\n                    <h6>\n                      {t(\"temp\")}{` ${temp}`}&deg;C\n                    </h6>\n                  </div>\n                  <i className=\"weatherIcon\"  >\n                    <WeatherDisplay \n                      height={140}\n                      width={140}\n                      currentCondition={changeLogo(main)}\n                      currentTemperature={temp}\n                    />\n                  </i>\n                </div>\n\n                <h6>\n                  {t(\"precipitation-intensity\")} {precipIntensity}\n                </h6>\n                <h6>\n                  {t(\"humidity\")}  {humidity} %\n                </h6>\n                <h6>\n                  {t(\"visibility\")} {visibility} km\n                </h6>\n                <h6>\n                  {t(\"wind-speed\")} {wind_speed} Kmph\n                </h6>\n                <h6>\n                  {t(\"wind-direction\")} {wind_direction}&deg; N\n                </h6>\n\n              </div>\n            </Container>\n            \n            <MainButton className=\"gis\" {...props}>\n              {t(\"ADD ACTIVITY\")}\n            </MainButton>\n          </Grid.Column>\n          \n        </Grid.Row>\n      </Grid>\n                                {/* <div className=\"PublicData\"> */}\n                                  {/* <hr /> */}\n                                  {/* <h5>{t(\"public-data\")}</h5> */}\n\n                                  {/* <div className=\"weather \"> */}\n                                    {/* <div className=\"weather-detials\">\n                                      <h6>{weatherDesc}</h6>\n                                      <h6>\n                                        {t(\"temp\")}\n                                        {temp}&deg;c\n                                      </h6>\n                                    </div> */}\n                                    {/* <i className={`wi ${icon} display-1 weatherIcon`} /> */}\n                                    {/* <i className=\"weatherIcon\"  >\n                                        <WeatherDisplay \n                                            height={140}\n                                            width={140}\n                                            currentCondition={changeLogo(main)}\n                                            currentTemperature={temp}\n                                          />\n                                      </i> */}\n                                  {/* </div>\n\n                                  <h6>\n                                    {t(\"precipitation-intensity\")} {precipIntensity}\n                                  </h6>\n                                  <h6>\n                                    {t(\"humidity\")}  {humidity} %\n                                  </h6>\n                                  <h6>\n                                    {t(\"visibility\")} {visibility} km\n                                  </h6>\n                                  <h6>\n                                    {t(\"wind-speed\")} {wind_speed} Kmph\n                                  </h6>\n                                  <h6>\n                                    {t(\"wind-direction\")} {wind_direction}&deg; N\n                                  </h6>\n                                </div> */}\n                                  {/* <MainButton className=\"gis\" {...props}>\n                                    {t(\"ADD ACTIVITY\")}\n                                  </MainButton> */}\n    </>\n  ) : (\n    // \"\"\n    <Loader active inline=\"centered\" className=\"mt-3\" />\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  weatherData: state.weather.weatherData_sensor,\n  sensors: state.sensors.sensormeasures,\n});\n\nexport default connect(mapStateToProps, { getWeatherData })(PublicData);\n"]},"metadata":{},"sourceType":"module"}