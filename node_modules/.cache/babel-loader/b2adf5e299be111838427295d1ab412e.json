{"ast":null,"code":"import React from'react';import{List,Segment,Grid,Dropdown}from'semantic-ui-react';import{useTranslation}from'react-i18next';var CropList=function CropList(_ref){var cropList=_ref.cropList,moveCrop=_ref.moveCrop,source=_ref.source,userFarms=_ref.userFarms,cropTypes=_ref.cropTypes;var _useTranslation=useTranslation(\"crop-management\"),t=_useTranslation.t;var onClicked=function onClicked(cropCycleId){moveCrop(source,cropCycleId);};console.log(cropList);var list=cropList.length?cropList.map(function(cropItem){var cropDate=new Date(cropItem.startDate);return/*#__PURE__*/React.createElement(Segment,{inverted:true,color:\"green\",key:cropItem._id},/*#__PURE__*/React.createElement(List.Item,null,/*#__PURE__*/React.createElement(List.Content,null,/*#__PURE__*/React.createElement(Grid,{columns:3},/*#__PURE__*/React.createElement(Grid.Column,{width:1}),/*#__PURE__*/React.createElement(Grid.Column,{floated:\"left\",width:13},/*#__PURE__*/React.createElement(Grid.Row,null,/*#__PURE__*/React.createElement(List.Header,null,cropDate.toLocaleString('en-us',{month:'short'})+\" \",cropDate.getFullYear()+\" \",userFarms.find(function(farm){return cropItem.farmId===farm._id;}).farmName+\" \",cropItem.cropSeeds.map(function(cropSeed,index){if(index===0){return\"\".concat(cropTypes.find(function(type){return type._id===cropSeed.cropId;}).name);}else{return\" & \".concat(cropTypes.find(function(type){return type._id===cropSeed.cropId;}).name);}}))),/*#__PURE__*/React.createElement(Grid.Row,null,/*#__PURE__*/React.createElement(List.Description,null,\"\".concat(t(source),\" \").concat(t(\"stage\"),\": \"),t(\"irrigation\")))),source===\"current\"?/*#__PURE__*/React.createElement(Grid.Column,{floated:\"right\",width:2},/*#__PURE__*/React.createElement(Grid.Row,null,/*#__PURE__*/React.createElement(Dropdown,{icon:\"ellipsis vertical\"},/*#__PURE__*/React.createElement(Dropdown.Menu,null,/*#__PURE__*/React.createElement(Dropdown.Item,{text:t('toPast'),onClick:function onClick(){return onClicked(cropItem._id);},style:{zindex:'990'}}))))):/*#__PURE__*/React.createElement(Grid.Column,{floated:\"right\",width:2})))));}):/*#__PURE__*/React.createElement(\"p\",null,t('empty-list'));return/*#__PURE__*/React.createElement(\"div\",{className:\"cropList\"},/*#__PURE__*/React.createElement(\"div\",{style:{overflow:'auto',maxHeight:'50vh'}},/*#__PURE__*/React.createElement(Segment.Group,{horizontal:true},/*#__PURE__*/React.createElement(List,{inverted:true,relaxed:true,style:{width:'100%'}},list))));};export default CropList;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/CropManagement/croplist.js"],"names":["React","List","Segment","Grid","Dropdown","useTranslation","CropList","cropList","moveCrop","source","userFarms","cropTypes","t","onClicked","cropCycleId","console","log","list","length","map","cropItem","cropDate","Date","startDate","_id","toLocaleString","month","getFullYear","find","farm","farmId","farmName","cropSeeds","cropSeed","index","type","cropId","name","zindex","overflow","maxHeight","width"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,OAAf,CAAwBC,IAAxB,CAA8BC,QAA9B,KAA8C,mBAA9C,CACA,OAASC,cAAT,KAA+B,eAA/B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAA0D,IAAvDC,CAAAA,QAAuD,MAAvDA,QAAuD,CAA7CC,QAA6C,MAA7CA,QAA6C,CAAnCC,MAAmC,MAAnCA,MAAmC,CAA3BC,SAA2B,MAA3BA,SAA2B,CAAhBC,SAAgB,MAAhBA,SAAgB,qBACzDN,cAAc,CAAC,iBAAD,CAD2C,CAC/DO,CAD+D,iBAC/DA,CAD+D,CAEvE,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,WAAD,CAAiB,CAC/BN,QAAQ,CAACC,MAAD,CAASK,WAAT,CAAR,CACH,CAFD,CAGAC,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAEA,GAAMU,CAAAA,IAAI,CAAGV,QAAQ,CAACW,MAAT,CAAmBX,QAAQ,CAACY,GAAT,CAAa,SAAAC,QAAQ,CAAI,CACrD,GAAIC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,IAAJ,CAASF,QAAQ,CAACG,SAAlB,CAAf,CACA,mBACI,oBAAC,OAAD,EAAS,QAAQ,KAAjB,CAAkB,KAAK,CAAC,OAAxB,CAAgC,GAAG,CAAEH,QAAQ,CAACI,GAA9C,eACI,oBAAC,IAAD,CAAM,IAAN,mBACI,oBAAC,IAAD,CAAM,OAAN,mBACI,oBAAC,IAAD,EAAM,OAAO,CAAE,CAAf,eACI,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,CAApB,EADJ,cAGI,oBAAC,IAAD,CAAM,MAAN,EAAa,OAAO,CAAC,MAArB,CAA4B,KAAK,CAAE,EAAnC,eACI,oBAAC,IAAD,CAAM,GAAN,mBACI,oBAAC,IAAD,CAAM,MAAN,MAEQH,QAAQ,CAACI,cAAT,CAAwB,OAAxB,CAAiC,CAAEC,KAAK,CAAE,OAAT,CAAjC,EAAuD,GAF/D,CAMQL,QAAQ,CAACM,WAAT,GAAyB,GANjC,CAUQjB,SAAS,CAACkB,IAAV,CAAe,SAAAC,IAAI,QACfT,CAAAA,QAAQ,CAACU,MAAT,GAAoBD,IAAI,CAACL,GADV,EAAnB,EAEEO,QAFF,CAEa,GAZrB,CAgBQX,QAAQ,CAACY,SAAT,CAAmBb,GAAnB,CAAuB,SAACc,QAAD,CAAWC,KAAX,CAAqB,CACxC,GAAIA,KAAK,GAAK,CAAd,CAAiB,CACb,gBAAUvB,SAAS,CAACiB,IAAV,CAAe,SAAAO,IAAI,QAAIA,CAAAA,IAAI,CAACX,GAAL,GAAaS,QAAQ,CAACG,MAA1B,EAAnB,EAAqDC,IAA/D,EACH,CAFD,IAGK,CACD,mBAAa1B,SAAS,CAACiB,IAAV,CAAe,SAAAO,IAAI,QAAIA,CAAAA,IAAI,CAACX,GAAL,GAAaS,QAAQ,CAACG,MAA1B,EAAnB,EAAqDC,IAAlE,EACH,CACJ,CAPD,CAhBR,CADJ,CADJ,cA8BI,oBAAC,IAAD,CAAM,GAAN,mBACI,oBAAC,IAAD,CAAM,WAAN,gBACQzB,CAAC,CAACH,MAAD,CADT,aACqBG,CAAC,CAAC,OAAD,CADtB,OAEKA,CAAC,CAAC,YAAD,CAFN,CADJ,CA9BJ,CAHJ,CAwCKH,MAAM,GAAK,SAAX,cACG,oBAAC,IAAD,CAAM,MAAN,EAAa,OAAO,CAAC,OAArB,CAA6B,KAAK,CAAE,CAApC,eACI,oBAAC,IAAD,CAAM,GAAN,mBACI,oBAAC,QAAD,EAAU,IAAI,CAAC,mBAAf,eACI,oBAAC,QAAD,CAAU,IAAV,mBACI,oBAAC,QAAD,CAAU,IAAV,EAAe,IAAI,CAAEG,CAAC,CAAC,QAAD,CAAtB,CAAkC,OAAO,CAAE,yBAAMC,CAAAA,SAAS,CAACO,QAAQ,CAACI,GAAV,CAAf,EAA3C,CAA0E,KAAK,CAAE,CAAEc,MAAM,CAAE,KAAV,CAAjF,EADJ,CADJ,CADJ,CADJ,CADH,cAUI,oBAAC,IAAD,CAAM,MAAN,EAAa,OAAO,CAAC,OAArB,CAA6B,KAAK,CAAE,CAApC,EAlDT,CADJ,CADJ,CADJ,CADJ,CA6DH,CA/D+B,CAAnB,cAgEP,6BACD1B,CAAC,CAAC,YAAD,CADA,CAhEN,CAmEA,mBACI,2BAAK,SAAS,CAAC,UAAf,eACI,2BAAK,KAAK,CAAE,CAAE2B,QAAQ,CAAE,MAAZ,CAAoBC,SAAS,CAAE,MAA/B,CAAZ,eACI,oBAAC,OAAD,CAAS,KAAT,EAAe,UAAU,KAAzB,eACI,oBAAC,IAAD,EAAM,QAAQ,KAAd,CAAe,OAAO,KAAtB,CAAuB,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAA9B,EACKxB,IADL,CADJ,CADJ,CADJ,CADJ,CAWH,CArFD,CAsFA,cAAeX,CAAAA,QAAf","sourcesContent":["import React from 'react'\nimport { List, Segment, Grid, Dropdown } from 'semantic-ui-react'\nimport { useTranslation } from 'react-i18next';\n\nconst CropList = ({ cropList, moveCrop, source, userFarms, cropTypes }) => {\n    const { t } = useTranslation(\"crop-management\")\n    const onClicked = (cropCycleId) => {\n        moveCrop(source, cropCycleId)\n    }\n    console.log(cropList)\n\n    const list = cropList.length ? (cropList.map(cropItem => {\n        let cropDate = new Date(cropItem.startDate)\n        return (\n            <Segment inverted color='green' key={cropItem._id}>\n                <List.Item>\n                    <List.Content>\n                        <Grid columns={3}>\n                            <Grid.Column width={1}>\n                            </Grid.Column>\n                            <Grid.Column floated=\"left\" width={13}>\n                                <Grid.Row>\n                                    <List.Header>\n                                        {\n                                            cropDate.toLocaleString('en-us', { month: 'short' }) + \" \"\n                                        }\n\n                                        {\n                                            cropDate.getFullYear() + \" \"\n                                        }\n\n                                        {\n                                            userFarms.find(farm =>\n                                                cropItem.farmId === farm._id\n                                            ).farmName + \" \"\n                                        }\n\n                                        {\n                                            cropItem.cropSeeds.map((cropSeed, index) => {\n                                                if (index === 0) {\n                                                    return `${cropTypes.find(type => type._id === cropSeed.cropId).name}`\n                                                }\n                                                else {\n                                                    return ` & ${cropTypes.find(type => type._id === cropSeed.cropId).name}`\n                                                }\n                                            })\n                                        }\n\n                                    </List.Header>\n                                </Grid.Row>\n                                <Grid.Row>\n                                    <List.Description>\n                                        {`${t(source)} ${t(\"stage\")}: `}\n                                        {t(\"irrigation\")}\n                                    </List.Description>\n                                </Grid.Row>\n                            </Grid.Column>\n                            {source === \"current\" ? (\n                                <Grid.Column floated=\"right\" width={2}>\n                                    <Grid.Row>\n                                        <Dropdown icon=\"ellipsis vertical\">\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item text={t('toPast')} onClick={() => onClicked(cropItem._id)} style={{ zindex: '990' }} />\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </Grid.Row>\n                                </Grid.Column>\n                            ) : (<Grid.Column floated=\"right\" width={2} />)}\n                        </Grid>\n                    </List.Content>\n                </List.Item>\n            </Segment>\n\n        )\n    }\n    )) : (<p>\n        {t('empty-list')}\n    </p>);\n    return (\n        <div className=\"cropList\">\n            <div style={{ overflow: 'auto', maxHeight: '50vh' }}>\n                <Segment.Group horizontal>\n                    <List inverted relaxed style={{ width: '100%' }}>\n                        {list}\n                    </List>\n                </Segment.Group>\n            </div>\n        </div>\n    );\n}\nexport default CropList;"]},"metadata":{},"sourceType":"module"}