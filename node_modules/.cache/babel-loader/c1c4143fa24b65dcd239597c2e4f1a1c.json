{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/AddActivityForm/AddActivityForm.js\";\nimport React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Modal, Button, Grid } from \"semantic-ui-react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { withTranslation } from \"react-i18next\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport ActivityOption from \"../AddActivityForm/activityLists/activityOption\";\nimport PlantseedActivity from \"../AddActivityForm/activityLists/plantseedactivity\";\nimport IrrigationActivity from \"./activityLists/irrigationactivity\";\nimport CropGrowthActivity from \"./activityLists/cropgrowthactivity\";\nimport FertilizationActivity from \"./activityLists/fertilizationactivity\";\nimport HarvestingActivity from \"./activityLists/harvestingactivity\";\nimport StorageActivity from \"./activityLists/storageactivity\";\nimport TransportationActivity from \"./activityLists/transportationactivity\";\nimport MarketingActivity from \"./activityLists/marketingactivity\"; // import './addcropform.scss';\n//import axios from 'axios';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#fff\",\n      main: \"#67bc46\",\n      dark: \"#000\"\n    },\n    secondary: {\n      main: \"#1A960A\"\n    }\n  },\n  typography: {\n    useNextVariants: true\n  },\n  textField: {\n    color: \"green\",\n    \"&:hover\": {\n      backgroundColor: \"green\"\n    },\n    \"&$focused\": {\n      backgroundColor: \"green\",\n      boxShadow: \"green 0.25 0 0 0 2px\",\n      borderColor: \"green\"\n    },\n    minWidth: \"200px !important\"\n  },\n  checkbox: {\n    color: \"green\",\n    \"&$checked\": {\n      color: \"green\"\n    }\n  }\n});\n\nclass AddActivityForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activityType: null,\n      cc: null,\n      errorMsg: false,\n      // snackbarOpen: false,\n      logDate: null,\n      description: null,\n      confirmed: false,\n      dateError: false\n    };\n\n    this.handleActivityChange = e => {\n      this.setState({\n        activityType: e.target.value\n      });\n    };\n\n    this.handleCropCycleChange = e => {\n      this.setState({\n        cc: e.target.value\n      });\n    };\n\n    this.handleLogDateChange = e => {\n      this.setState({\n        logDate: e.target.value\n      });\n    };\n\n    this.handleDescriptionChange = e => {\n      this.setState({\n        description: e.target.value\n      });\n    };\n\n    this.handleSnackbarClose = () => {\n      // if (reason === 'clickaway') {\n      //     return;\n      //   }\n      this.setstate({\n        snackbarOpen: false\n      });\n    };\n\n    this.handleCheckBoxChange = () => {\n      if (!this.state.dateError) {\n        this.setState({\n          confirmed: true\n        });\n      }\n    };\n\n    this.handleClose = () => {\n      this.props.changeDialogDisp();\n    };\n\n    this.handleSubmit = () => {\n      if (this.state.confirmed) {\n        this.props.changeDialogDisp();\n        const activity = {\n          logDate: this.state.logDate,\n          cropCycleId: this.state.cc,\n          activityId: this.state.activityType,\n          description: this.state.description\n        };\n        this.props.onSubmit(activity);\n        this.setState({\n          //snackbarOpen: false,\n          activityType: this.props.activityTypes.length ? this.props.activityTypes[0]._id : \"\",\n          cc: this.props.currentCropCycles.length ? this.props.currentCropCycles[0]._id : \"\",\n          description: \"\",\n          logDate: \"\",\n          confirmed: false\n        });\n      } else {\n        this.setState({\n          errorMsg: true\n        });\n      }\n    };\n\n    this.logDateValidation = date => {\n      console.log(\"in logDateVal\");\n\n      if (this.state.cc && this.props.currentCropCycles) {\n        const ccObject = this.props.currentCropCycles.find(cropCycle => cropCycle._id === this.state.cc);\n        return date < ccObject.startDate || date > ccObject.endDate;\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.props.activityTypes.length && !this.state.activityType) {\n      this.setState({\n        activityType: this.props.activityTypes[0]._id\n      });\n    }\n\n    if (this.props.currentCropCycles.length && !this.state.cc) {\n      this.setState({\n        cc: this.props.currentCropCycles[0]._id\n      });\n    }\n\n    if (this.state.logDate && this.props.currentCropCycles && this.state.cc) {\n      const ccObject = this.props.currentCropCycles.find(cropCycle => cropCycle._id === this.state.cc);\n      console.log(\"dateErrorUpdate ccObject is\", ccObject);\n\n      if (this.state.logDate < ccObject.startDate || this.state.logDate > ccObject.endDate) {\n        if (this.state.dateError === false) {\n          this.setState({\n            dateError: true,\n            confirmed: false\n          });\n        }\n      }\n\n      if (this.state.logDate > ccObject.startDate && this.state.logDate < ccObject.endDate && this.state.dateError === true) {\n        this.setState({\n          dateError: false\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      t\n    } = this.props;\n    let activityList = [\"Land Preparation\", \"Planting of seeds\", \"Irrigation\", \"Crop Growth\", \"Fertilization\", \"Harvesting\", \"Storage\", \"Transportation\", \"Marketing\"];\n    return /*#__PURE__*/React.createElement(MuiThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      open: this.props.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, t(\"act-form-title\")), /*#__PURE__*/React.createElement(Modal.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"ml-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"outlined-select-cc\",\n      label: t(\"cc-label\"),\n      select: true,\n      fullWidth: true // className=\"mr-4 ml-4 mt-2 w-25\"\n      ,\n      variant: \"outlined\",\n      defaultValue: this.props.currentCropCycles[0] ? this.props.currentCropCycles[0]._id : \"\",\n      helperText: t(\"cc-helper\"),\n      onChange: this.handleCropCycleChange,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 19\n      }\n    }, this.props.currentCropCycles ? this.props.currentCropCycles.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option._id,\n      value: option._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 25\n      }\n    }, this.props.userFarms && this.props.userFarms.find(farm => option.farmId === farm._id).farmName)) : /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 23\n      }\n    }, t(\"empty-option\")))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"outlined-select-activity\",\n      label: t(\"activity-label\"),\n      select: true,\n      fullWidth: true,\n      defaultValue: \"\",\n      onChange: this.handleActivityChange,\n      variant: \"outlined\" // className=\"mr-4 ml-4 mt-2 w-25\"\n      ,\n      helperText: t(\"activity-helper\"),\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 19\n      }\n    }, activityList ? activityList.map(item => /*#__PURE__*/React.createElement(MenuItem, {\n      key: item,\n      value: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 23\n      }\n    }, item)) : /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 23\n      }\n    }, t(\"empty-option\")))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: true,\n      id: \"logdate\",\n      fullWidth: true,\n      label: t(\"log-date-label\"),\n      type: \"date\" // className=\"mr-4 ml-4 mt-2 w-25\"\n      // defaultValue={new Date()}\n      ,\n      variant: \"outlined\",\n      error: this.state.dateError,\n      shouldDisableDate: this.logDateValidation,\n      onChange: this.handleLogDateChange,\n      helperText: t(\"log-date-error\"),\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"ml-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"px-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }, this.state.activityType === \"Land Preparation\" ? /*#__PURE__*/React.createElement(ActivityOption, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 23\n      }\n    }) : this.state.activityType === \"Planting of seeds\" ? /*#__PURE__*/React.createElement(PlantseedActivity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 23\n      }\n    }) : this.state.activityType === \"Irrigation\" ? /*#__PURE__*/React.createElement(IrrigationActivity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 23\n      }\n    }) : this.state.activityType === \"Crop Growth\" ? /*#__PURE__*/React.createElement(CropGrowthActivity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 23\n      }\n    }) : this.state.activityType === \"Fertilization\" ? /*#__PURE__*/React.createElement(FertilizationActivity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 23\n      }\n    }) : this.state.activityType === \"Harvesting\" ? /*#__PURE__*/React.createElement(HarvestingActivity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 23\n      }\n    }) : this.state.activityType === \"Storage\" ? /*#__PURE__*/React.createElement(StorageActivity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 23\n      }\n    }) : this.state.activityType === \"Transportation\" ? /*#__PURE__*/React.createElement(TransportationActivity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 23\n      }\n    }) : this.state.activityType === \"Marketing\" && /*#__PURE__*/React.createElement(MarketingActivity, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 64\n      }\n    }))))), /*#__PURE__*/React.createElement(Modal.Actions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"gray\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 13\n      }\n    }, t(\"cancel\")), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleSubmit,\n      color: \"green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }\n    }, t(\"submit\")))));\n  }\n\n}\n\nexport default withTranslation(\"add-activity\")(AddActivityForm);\n{\n  /* <Grid>\n               <Grid.Row>\n                 <TextField\n                   id=\"outlined-select-activity\"\n                   label={t(\"activity-label\")}\n                   select\n                   defaultValue={\n                     this.props.activityTypes[0]\n                       ? this.props.activityTypes[0]._id\n                       : \"Select Activity\"\n                   }\n                   onChange={this.handleActivityChange}\n                   variant=\"outlined\"\n                   className=\"mr-4 ml-4 mt-2 w-25\"\n                   helperText={t(\"activity-helper\")}\n                   InputLabelProps={{\n                     shrink: true,\n                   }}\n                 >\n                   {this.props.activityTypes ? (\n                     this.props.activityTypes.map((option) => (\n                       <MenuItem key={option._id} value={option._id}>\n                         {option.name}\n                       </MenuItem>\n                     ))\n                   ) : (\n                     <MenuItem disabled>{t(\"empty-option\")}</MenuItem>\n                   )}\n                 </TextField>\n                 <TextField\n                   id=\"outlined-select-cc\"\n                   label={t(\"cc-label\")}\n                   select\n                   className=\"mr-4 ml-4 mt-2 w-25\"\n                   variant=\"outlined\"\n                   defaultValue={\n                     this.props.currentCropCycles[0]\n                       ? this.props.currentCropCycles[0]._id\n                       : \"\"\n                   }\n                   helperText={t(\"cc-helper\")}\n                   onChange={this.handleCropCycleChange}\n                   InputLabelProps={{\n                     shrink: true,\n                   }}\n                 >\n                   {this.props.currentCropCycles ? (\n                     this.props.currentCropCycles.map((option) => (\n                       <MenuItem key={option._id} value={option._id}>\n                         {this.props.userFarms &&\n                           this.props.userFarms.find(\n                             (farm) => option.farmId === farm._id\n                           ).farmName}\n                       </MenuItem>\n                     ))\n                   ) : (\n                     <MenuItem disabled>{t(\"empty-option\")}</MenuItem>\n                   )}\n                 </TextField>\n               </Grid.Row>\n               <Grid.Row>\n                 <TextField\n                   error\n                   id=\"logdate\"\n                   label={t(\"log-date-label\")}\n                   type=\"date\"\n                   className=\"mr-4 ml-4 mt-2 w-25\"\n                   // defaultValue={new Date()}\n                   variant=\"outlined\"\n                   error={this.state.dateError}\n                   shouldDisableDate={this.logDateValidation}\n                   onChange={this.handleLogDateChange}\n                   helperText={t(\"log-date-error\")}\n                   InputLabelProps={{\n                     shrink: true,\n                   }}\n                 />\n                 <TextField\n                   id=\"outlined-description\"\n                   label={t(\"description-label\")}\n                   variant=\"outlined\"\n                   className=\"mr-4 ml-4 mt-2 w-25\"\n                   helperText={t(\"description-helper\")}\n                   onChange={this.handleDescriptionChange}\n                   InputLabelProps={{\n                     shrink: true,\n                   }}\n                 />\n                 <FormControlLabel\n                   className=\"mr-4 ml-4 w-50\"\n                   control={\n                     <Checkbox\n                       checked={this.state.confirmed}\n                       onChange={this.handleCheckBoxChange}\n                       name=\"checked\"\n                     />\n                   }\n                   label={t(\"cc-form-checkbox\")}\n                 />\n               </Grid.Row>\n               <Grid.Row>\n                 {this.state.errorMsg ? (\n                   <p\n                     style={{\n                       position: \"absolute\",\n                       color: \"red\",\n                       left: \"25%\",\n                       right: \"25%\",\n                     }}\n                   >\n                     {\" \"}\n                     {t(\"ccuncheckederror\")}{\" \"}\n                   </p>\n                 ) : (\n                   \"\"\n                 )}\n               </Grid.Row>\n             </Grid> */\n}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/AddActivityForm/AddActivityForm.js"],"names":["React","Component","TextField","MenuItem","Modal","Button","Grid","Checkbox","FormControlLabel","withTranslation","MuiThemeProvider","createMuiTheme","ActivityOption","PlantseedActivity","IrrigationActivity","CropGrowthActivity","FertilizationActivity","HarvestingActivity","StorageActivity","TransportationActivity","MarketingActivity","theme","palette","primary","light","main","dark","secondary","typography","useNextVariants","textField","color","backgroundColor","boxShadow","borderColor","minWidth","checkbox","AddActivityForm","state","activityType","cc","errorMsg","logDate","description","confirmed","dateError","handleActivityChange","e","setState","target","value","handleCropCycleChange","handleLogDateChange","handleDescriptionChange","handleSnackbarClose","setstate","snackbarOpen","handleCheckBoxChange","handleClose","props","changeDialogDisp","handleSubmit","activity","cropCycleId","activityId","onSubmit","activityTypes","length","_id","currentCropCycles","logDateValidation","date","console","log","ccObject","find","cropCycle","startDate","endDate","componentDidUpdate","render","t","activityList","open","position","shrink","map","option","userFarms","farm","farmId","farmName","item"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Modal, Button, Grid } from \"semantic-ui-react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { withTranslation } from \"react-i18next\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport ActivityOption from \"../AddActivityForm/activityLists/activityOption\"\nimport PlantseedActivity from \"../AddActivityForm/activityLists/plantseedactivity\"\nimport IrrigationActivity from \"./activityLists/irrigationactivity\";\nimport CropGrowthActivity from \"./activityLists/cropgrowthactivity\";\nimport FertilizationActivity from \"./activityLists/fertilizationactivity\";\nimport HarvestingActivity from \"./activityLists/harvestingactivity\";\nimport StorageActivity from \"./activityLists/storageactivity\";\nimport TransportationActivity from \"./activityLists/transportationactivity\";\nimport MarketingActivity from \"./activityLists/marketingactivity\";\n// import './addcropform.scss';\n//import axios from 'axios';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#fff\",\n      main: \"#67bc46\",\n      dark: \"#000\",\n    },\n    secondary: {\n      main: \"#1A960A\",\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n  textField: {\n    color: \"green\",\n    \"&:hover\": {\n      backgroundColor: \"green\",\n    },\n    \"&$focused\": {\n      backgroundColor: \"green\",\n      boxShadow: \"green 0.25 0 0 0 2px\",\n      borderColor: \"green\",\n    },\n    minWidth: \"200px !important\"\n  },\n  checkbox: {\n    color: \"green\",\n    \"&$checked\": {\n      color: \"green\",\n    },\n  },\n});\n\nclass AddActivityForm extends Component {\n  state = {\n    activityType: null,\n    cc: null,\n    errorMsg: false,\n    // snackbarOpen: false,\n    logDate: null,\n    description: null,\n    confirmed: false,\n    dateError: false,\n  };\n\n  \n  handleActivityChange = (e) => {\n    this.setState({ activityType: e.target.value });\n  };\n  \n  handleCropCycleChange = (e) => {\n    this.setState({ cc: e.target.value });\n  };\n  handleLogDateChange = (e) => {\n    this.setState({ logDate: e.target.value });\n  };\n  handleDescriptionChange = (e) => {\n    this.setState({ description: e.target.value });\n  };\n  handleSnackbarClose = () => {\n    // if (reason === 'clickaway') {\n    //     return;\n    //   }\n    this.setstate({ snackbarOpen: false });\n  };\n  handleCheckBoxChange = () => {\n    if (!this.state.dateError) {\n      this.setState({ confirmed: true });\n    }\n  };\n  handleClose = () => {\n    this.props.changeDialogDisp();\n  };\n  handleSubmit = () => {\n    if (this.state.confirmed) {\n      this.props.changeDialogDisp();\n      const activity = {\n        logDate: this.state.logDate,\n        cropCycleId: this.state.cc,\n        activityId: this.state.activityType,\n        description: this.state.description,\n      };\n      this.props.onSubmit(activity);\n      this.setState({\n        //snackbarOpen: false,\n        activityType: this.props.activityTypes.length\n          ? this.props.activityTypes[0]._id\n          : \"\",\n        cc: this.props.currentCropCycles.length\n          ? this.props.currentCropCycles[0]._id\n          : \"\",\n        description: \"\",\n        logDate: \"\",\n        confirmed: false,\n      });\n    } else {\n      this.setState({ errorMsg: true });\n    }\n  };\n\n  logDateValidation = (date) => {\n    console.log(\"in logDateVal\");\n    if (this.state.cc && this.props.currentCropCycles) {\n      const ccObject = this.props.currentCropCycles.find(\n        (cropCycle) => cropCycle._id === this.state.cc\n      );\n      return date < ccObject.startDate || date > ccObject.endDate;\n    }\n  };\n\n  componentDidUpdate() {\n    if (this.props.activityTypes.length && !this.state.activityType) {\n      this.setState({ activityType: this.props.activityTypes[0]._id });\n    }\n    if (this.props.currentCropCycles.length && !this.state.cc) {\n      this.setState({ cc: this.props.currentCropCycles[0]._id });\n    }\n    if (this.state.logDate && this.props.currentCropCycles && this.state.cc) {\n      const ccObject = this.props.currentCropCycles.find(\n        (cropCycle) => cropCycle._id === this.state.cc\n      );\n      console.log(\"dateErrorUpdate ccObject is\", ccObject);\n      if (\n        this.state.logDate < ccObject.startDate ||\n        this.state.logDate > ccObject.endDate\n      ) {\n        if (this.state.dateError === false) {\n          this.setState({ dateError: true, confirmed: false });\n        }\n      }\n      if (\n        this.state.logDate > ccObject.startDate &&\n        this.state.logDate < ccObject.endDate &&\n        this.state.dateError === true\n      ) {\n        this.setState({ dateError: false });\n      }\n    }\n  }\n\n  render() {\n    const { t } = this.props;\n    let activityList = [\"Land Preparation\", \"Planting of seeds\", \"Irrigation\", \"Crop Growth\", \"Fertilization\", \"Harvesting\", \"Storage\", \"Transportation\", \"Marketing\"]\n    return (\n      <MuiThemeProvider theme={theme}>\n\n        <Modal\n          open={this.props.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n          style = {{position : \"relative\"}}\n          \n        >\n          <Modal.Header>{t(\"act-form-title\")}</Modal.Header>\n          <Modal.Content >\n            <Grid>\n              <Grid.Row className = \"ml-0\">\n                <Grid.Column width = {8}>\n                  <TextField\n                    id=\"outlined-select-cc\"\n                    label={t(\"cc-label\")}\n                    select\n                    fullWidth\n                    // className=\"mr-4 ml-4 mt-2 w-25\"\n                    variant = \"outlined\"\n                    defaultValue={\n                      this.props.currentCropCycles[0]\n                        ? this.props.currentCropCycles[0]._id\n                        : \"\"\n                    }\n                    helperText={t(\"cc-helper\")}\n                    onChange={this.handleCropCycleChange}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  >\n                    {this.props.currentCropCycles ? (\n                      this.props.currentCropCycles.map((option) => (\n                        <MenuItem key={option._id} value={option._id}>\n                          {this.props.userFarms &&\n                            this.props.userFarms.find(\n                              (farm) => option.farmId === farm._id\n                            ).farmName}\n                        </MenuItem>\n                      ))\n                    ) : (\n                      <MenuItem disabled>{t(\"empty-option\")}</MenuItem>\n                    )}\n                  </TextField>\n                </Grid.Column>\n                <Grid.Column width = {4}>\n                  <TextField\n                    id=\"outlined-select-activity\"\n                    label={t(\"activity-label\")}\n                    select\n                    fullWidth\n                    defaultValue = \"\"\n                    onChange={this.handleActivityChange}\n                    variant=\"outlined\"\n                    // className=\"mr-4 ml-4 mt-2 w-25\"\n                    helperText={t(\"activity-helper\")}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  >\n                    {activityList ? activityList.map((item) => (\n                      <MenuItem key = {item} value = {item}>\n                        {item}\n                      </MenuItem>\n                    ))                    \n                    : (\n                      <MenuItem disabled>{t(\"empty-option\")}</MenuItem>\n                    )}\n                  </TextField>\n                </Grid.Column>\n                <Grid.Column width = {4}>\n                  <TextField\n                    error\n                    id=\"logdate\"\n                    fullWidth\n                    label={t(\"log-date-label\")}\n                    type=\"date\"\n                    // className=\"mr-4 ml-4 mt-2 w-25\"\n                    // defaultValue={new Date()}\n                    variant=\"outlined\"\n                    error={this.state.dateError}\n                    shouldDisableDate={this.logDateValidation}\n                    onChange={this.handleLogDateChange}\n                    helperText={t(\"log-date-error\")}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row className = \"ml-0\"> \n                <Grid.Column className = \"px-5\">\n                  {\n                    this.state.activityType === \"Land Preparation\" ? \n                      <ActivityOption />\n                    :\n\n                    this.state.activityType === \"Planting of seeds\" ?\n                      <PlantseedActivity />\n                    :\n                    this.state.activityType === \"Irrigation\" ? \n                      <IrrigationActivity/>\n                    :\n                    this.state.activityType === \"Crop Growth\" ? \n                      <CropGrowthActivity />\n                    :\n                    this.state.activityType === \"Fertilization\" ? \n                      <FertilizationActivity />\n                    :\n                    this.state.activityType === \"Harvesting\" ? \n                      <HarvestingActivity/>\n                    :\n                    this.state.activityType === \"Storage\" ? \n                      <StorageActivity/>\n                    :\n                    this.state.activityType === \"Transportation\" ? \n                      <TransportationActivity />\n                    :\n                    this.state.activityType === \"Marketing\" && <MarketingActivity/>\n                  }\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          \n          <Modal.Actions>\n            <Button onClick={this.handleClose} color=\"gray\">\n              {t(\"cancel\")}\n            </Button>\n            <Button onClick={this.handleSubmit} color=\"green\">\n              {t(\"submit\")}\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default withTranslation(\"add-activity\")(AddActivityForm);\n\n\n\n{/* <Grid>\n              <Grid.Row>\n                <TextField\n                  id=\"outlined-select-activity\"\n                  label={t(\"activity-label\")}\n                  select\n                  defaultValue={\n                    this.props.activityTypes[0]\n                      ? this.props.activityTypes[0]._id\n                      : \"Select Activity\"\n                  }\n                  onChange={this.handleActivityChange}\n                  variant=\"outlined\"\n                  className=\"mr-4 ml-4 mt-2 w-25\"\n                  helperText={t(\"activity-helper\")}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                >\n                  {this.props.activityTypes ? (\n                    this.props.activityTypes.map((option) => (\n                      <MenuItem key={option._id} value={option._id}>\n                        {option.name}\n                      </MenuItem>\n                    ))\n                  ) : (\n                    <MenuItem disabled>{t(\"empty-option\")}</MenuItem>\n                  )}\n                </TextField>\n                <TextField\n                  id=\"outlined-select-cc\"\n                  label={t(\"cc-label\")}\n                  select\n                  className=\"mr-4 ml-4 mt-2 w-25\"\n                  variant=\"outlined\"\n                  defaultValue={\n                    this.props.currentCropCycles[0]\n                      ? this.props.currentCropCycles[0]._id\n                      : \"\"\n                  }\n                  helperText={t(\"cc-helper\")}\n                  onChange={this.handleCropCycleChange}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                >\n                  {this.props.currentCropCycles ? (\n                    this.props.currentCropCycles.map((option) => (\n                      <MenuItem key={option._id} value={option._id}>\n                        {this.props.userFarms &&\n                          this.props.userFarms.find(\n                            (farm) => option.farmId === farm._id\n                          ).farmName}\n                      </MenuItem>\n                    ))\n                  ) : (\n                    <MenuItem disabled>{t(\"empty-option\")}</MenuItem>\n                  )}\n                </TextField>\n              </Grid.Row>\n              <Grid.Row>\n                <TextField\n                  error\n                  id=\"logdate\"\n                  label={t(\"log-date-label\")}\n                  type=\"date\"\n                  className=\"mr-4 ml-4 mt-2 w-25\"\n                  // defaultValue={new Date()}\n                  variant=\"outlined\"\n                  error={this.state.dateError}\n                  shouldDisableDate={this.logDateValidation}\n                  onChange={this.handleLogDateChange}\n                  helperText={t(\"log-date-error\")}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n                <TextField\n                  id=\"outlined-description\"\n                  label={t(\"description-label\")}\n                  variant=\"outlined\"\n                  className=\"mr-4 ml-4 mt-2 w-25\"\n                  helperText={t(\"description-helper\")}\n                  onChange={this.handleDescriptionChange}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n                <FormControlLabel\n                  className=\"mr-4 ml-4 w-50\"\n                  control={\n                    <Checkbox\n                      checked={this.state.confirmed}\n                      onChange={this.handleCheckBoxChange}\n                      name=\"checked\"\n                    />\n                  }\n                  label={t(\"cc-form-checkbox\")}\n                />\n              </Grid.Row>\n              <Grid.Row>\n                {this.state.errorMsg ? (\n                  <p\n                    style={{\n                      position: \"absolute\",\n                      color: \"red\",\n                      left: \"25%\",\n                      right: \"25%\",\n                    }}\n                  >\n                    {\" \"}\n                    {t(\"ccuncheckederror\")}{\" \"}\n                  </p>\n                ) : (\n                  \"\"\n                )}\n              </Grid.Row>\n            </Grid> */}"]},"metadata":{},"sourceType":"module"}