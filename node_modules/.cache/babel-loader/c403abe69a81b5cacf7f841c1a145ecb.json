{"ast":null,"code":"import _classCallCheck from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{connect}from\"react-redux\";import L from\"leaflet\";import{Map,TileLayer,Marker,Popup}from\"react-leaflet\";import SensorIcon from\"../../images/SensorIcon.png\";import{Segment}from\"semantic-ui-react\";import\"./MapCard.scss\";var MapCard=/*#__PURE__*/function(_Component){_inherits(MapCard,_Component);var _super=_createSuper(MapCard);function MapCard(){var _this;_classCallCheck(this,MapCard);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={greenIcon:{lat:35.787449,lng:-78.6438197},redIcon:{lat:35.774416,lng:-78.633271},orangeIcon:{lat:35.77279,lng:-78.652305},zoom:11};_this.sensorIcon=L.icon({iconUrl:SensorIcon,iconSize:[40,50],// size of the icon\niconAnchor:[22,94],// point of the icon which will correspond to marker's location\npopupAnchor:[-3,-86]});return _this;}_createClass(MapCard,[{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,sensors=_this$props.sensors,match=_this$props.match;// sensors = [];\n// if (sensors) return sensor;\nvar sensor=sensors.filter(function(sensor){return sensor.deviceId===match.params.id;})[0];// sensor = {};\nvar defaultPositionCenter=[40.7128,-74.006];var positionSensorCenter=[sensor&&sensor.location.latitude,sensor&&sensor.location.longitude];return sensor?/*#__PURE__*/React.createElement(Segment,{raised:true,className:\"p-0\"},/*#__PURE__*/React.createElement(Map,{className:\"map-card\",center:positionSensorCenter// center={positionGreenIcon}\n,zoom:this.state.zoom},/*#__PURE__*/React.createElement(TileLayer,{attribution:\"google\",url:\"http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}\"}),sensors&&sensors.map(function(sensor){return/*#__PURE__*/React.createElement(Marker,{key:sensor.deviceId,position:[sensor.location.latitude,sensor.location.longitude],icon:_this2.sensorIcon},/*#__PURE__*/React.createElement(Popup// onOpen={() => {\n//   this.props.history.push(`/sensors/${sensor.deviceId}`);\n// }}\n,null,/*#__PURE__*/React.createElement(\"br\",null),\"lat:\",sensor.location.latitude,/*#__PURE__*/React.createElement(\"br\",null),\"lon:\",sensor.location.longitude));}))):/*#__PURE__*/React.createElement(Segment,{raised:true,className:\"p-0\"},/*#__PURE__*/React.createElement(Map,{className:\"map-card\",center:defaultPositionCenter,zoom:6},/*#__PURE__*/React.createElement(TileLayer,{attribution:\"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"})));}}]);return MapCard;}(Component);var mapStateToProps=function mapStateToProps(state){return{sensors:state.sensors.sensormeasures};};export default connect(mapStateToProps)(MapCard);","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/MapCard/MapCard.js"],"names":["React","Component","connect","L","Map","TileLayer","Marker","Popup","SensorIcon","Segment","MapCard","state","greenIcon","lat","lng","redIcon","orangeIcon","zoom","sensorIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","props","sensors","match","sensor","filter","deviceId","params","id","defaultPositionCenter","positionSensorCenter","location","latitude","longitude","map","mapStateToProps","sensormeasures"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport L from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport SensorIcon from \"../../images/SensorIcon.png\";\nimport { Segment } from \"semantic-ui-react\";\nimport \"./MapCard.scss\";\n\nclass MapCard extends Component {\n  state = {\n    greenIcon: {\n      lat: 35.787449,\n      lng: -78.6438197,\n    },\n    redIcon: {\n      lat: 35.774416,\n      lng: -78.633271,\n    },\n    orangeIcon: {\n      lat: 35.77279,\n      lng: -78.652305,\n    },\n    zoom: 11,\n  };\n\n  sensorIcon = L.icon({\n    iconUrl: SensorIcon,\n    iconSize: [40, 50], // size of the icon\n    iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\n    popupAnchor: [-3, -86],\n  });\n\n  render() {\n    let { sensors, match } = this.props;\n    // sensors = [];\n    // if (sensors) return sensor;\n    let sensor = sensors.filter(\n      (sensor) => sensor.deviceId === match.params.id\n    )[0];\n    // sensor = {};\n    const defaultPositionCenter = [40.7128, -74.006];\n\n    const positionSensorCenter = [\n      sensor && sensor.location.latitude,\n      sensor && sensor.location.longitude,\n    ];\n    return sensor ? (\n      <Segment raised className=\"p-0\">\n        <Map\n          className=\"map-card\"\n          center={positionSensorCenter}\n          // center={positionGreenIcon}\n          zoom={this.state.zoom}\n        >\n          <TileLayer\n            attribution=\"google\"\n            url=\"http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}\"\n          />\n          {/* <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          /> */}\n\n          {sensors &&\n            sensors.map((sensor) => (\n              <Marker\n                key={sensor.deviceId}\n                position={[sensor.location.latitude, sensor.location.longitude]}\n                icon={this.sensorIcon}\n              >\n                <Popup\n                // onOpen={() => {\n                //   this.props.history.push(`/sensors/${sensor.deviceId}`);\n                // }}\n                >\n                  {/* deviceId:{sensor.deviceId} */}\n                  <br />\n                  lat:{sensor.location.latitude}\n                  <br />\n                  lon:{sensor.location.longitude}\n                </Popup>\n              </Marker>\n            ))}\n        </Map>\n\n        {/* <Popup\n          content=\"Add users to your feed\"\n          trigger={<Button icon=\"add\" />}\n        /> */}\n      </Segment>\n    ) : (\n      <Segment raised className=\"p-0\">\n        <Map className=\"map-card\" center={defaultPositionCenter} zoom={6}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n        </Map>\n      </Segment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  sensors: state.sensors.sensormeasures,\n});\n\nexport default connect(mapStateToProps)(MapCard);\n"]},"metadata":{},"sourceType":"module"}