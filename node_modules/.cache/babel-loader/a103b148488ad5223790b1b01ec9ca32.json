{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/MapPolygon/MapPolygon.js\";\nimport { Map, TileLayer, Marker, FeatureGroup, Polygon } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"leaflet-draw\";\nimport { EditControl } from \"react-leaflet-draw\";\n\nconst createPolygon = latlngArray => {\n  const polygon = [];\n\n  if (latlngArray && latlngArray[0]) {\n    for (const latlng of latlngArray[0]) {\n      polygon.push([latlng.lat, latlng.lng]);\n    }\n\n    polygon.push(polygon[0]);\n  } // polygon is of format : [[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]\n\n\n  return polygon;\n};\n/**\n * Map componenet that uses react-leaflet. This can be used as editable and readonly. For editable map, pass\n * onChange, editable(=true) center(eg: [51.508530, -0.076132]) and polygon if there is any value eg: edit a farm.\n * For readonly , pass polygon(eg: [[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]), center(matching one latlng or any nearby point of polygon) and editable=false in props.\n */\n\n\nconst MapPolygon = props => {\n  const mapRef = useRef();\n  let fgRef = null;\n  let leafLetEl = null;\n  const [center, setCenter] = useState(props.center || [51.50853, -0.076132]);\n\n  const onChange = polygon => {\n    if (props.onChange) {\n      props.onChange(polygon);\n    }\n  };\n\n  const onEdited = e => {\n    const polygons = [];\n    e.layers.eachLayer(layer => {\n      polygons.push(createPolygon(layer.getLatLngs()));\n    });\n    onChange(polygons[0]);\n  };\n\n  const onDeleted = e => {\n    onChange([]);\n  };\n\n  const onAdded = e => {\n    const added = e.layer;\n    const polygon = createPolygon(added.getLatLngs());\n\n    if (leafLetEl) {\n      leafLetEl.eachLayer(layer => {\n        if (layer._leaflet_id !== added._leaflet_id) {\n          leafLetEl.removeLayer(layer); // just so there is only one polygon at a time\n        }\n      });\n    }\n\n    onChange(polygon);\n  };\n\n  const setMapCenter = () => {\n    setCenter(props.center);\n  };\n\n  useEffect(() => {\n    if (center && props.center && JSON.stringify(center) !== JSON.stringify(props.center)) {\n      setMapCenter();\n    }\n  });\n\n  const setFGRef = ref => {\n    if (ref) {\n      fgRef = ref;\n      leafLetEl = fgRef.leafletElement;\n    }\n  };\n\n  let mapCenter = props.center || [51.50853, -0.076132];\n  const polygon = props.polygon;\n\n  if (polygon && polygon.length) {\n    mapCenter = polygon[0];\n  }\n\n  let bounds;\n\n  if (mapCenter && mapCenter.length) {\n    bounds = [[mapCenter[0], mapCenter[1]], [mapCenter[0], mapCenter[1]]];\n  }\n\n  const editable = props.editable;\n  const zoom = props.zoom || 16;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, mapCenter && /*#__PURE__*/React.createElement(Map, {\n    className: props.className || \"map\",\n    center: mapCenter,\n    zoom: zoom,\n    ref: mapRef,\n    fitBounds: bounds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    attribution: \"google\",\n    url: \"http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FeatureGroup, {\n    ref: ref => setFGRef(ref),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, polygon && polygon.length > 0 && /*#__PURE__*/React.createElement(Polygon, {\n    positions: polygon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 47\n    }\n  }), editable === true && /*#__PURE__*/React.createElement(EditControl, {\n    position: \"topright\",\n    onEdited: onEdited,\n    onCreated: onAdded,\n    onDeleted: onDeleted,\n    draw: {\n      polygon: {\n        allowIntersection: false,\n        // Restricts shapes to simple polygons\n        drawError: {\n          color: \"#e1e100\",\n          // Color the shape will turn when intersects\n          message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n\n        },\n        shapeOptions: {\n          color: \"#97009c\"\n        }\n      },\n      polyline: false,\n      circle: false,\n      // Turns off this drawing tool\n      rectangle: false,\n      marker: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }))));\n};\n\nexport default MapPolygon;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/MapPolygon/MapPolygon.js"],"names":["Map","TileLayer","Marker","FeatureGroup","Polygon","React","useEffect","useRef","useState","EditControl","createPolygon","latlngArray","polygon","latlng","push","lat","lng","MapPolygon","props","mapRef","fgRef","leafLetEl","center","setCenter","onChange","onEdited","e","polygons","layers","eachLayer","layer","getLatLngs","onDeleted","onAdded","added","_leaflet_id","removeLayer","setMapCenter","JSON","stringify","setFGRef","ref","leafletElement","mapCenter","length","bounds","editable","zoom","className","allowIntersection","drawError","color","message","shapeOptions","polyline","circle","rectangle","marker"],"mappings":"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","sourcesContent":["import { Map, TileLayer, Marker, FeatureGroup, Polygon } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"leaflet-draw\";\nimport { EditControl } from \"react-leaflet-draw\";\n\nconst createPolygon = (latlngArray) => {\n  const polygon = [];\n  if (latlngArray && latlngArray[0]) {\n    for (const latlng of latlngArray[0]) {\n      polygon.push([latlng.lat, latlng.lng]);\n    }\n    polygon.push(polygon[0]);\n  }\n  // polygon is of format : [[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]\n  return polygon;\n};\n\n/**\n * Map componenet that uses react-leaflet. This can be used as editable and readonly. For editable map, pass\n * onChange, editable(=true) center(eg: [51.508530, -0.076132]) and polygon if there is any value eg: edit a farm.\n * For readonly , pass polygon(eg: [[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]), center(matching one latlng or any nearby point of polygon) and editable=false in props.\n */\nconst MapPolygon = (props) => {\n  const mapRef = useRef();\n  let fgRef = null;\n  let leafLetEl = null;\n\n  const [center, setCenter] = useState(props.center || [51.50853, -0.076132]);\n\n  const onChange = (polygon) => {\n    if (props.onChange) {\n      props.onChange(polygon);\n    }\n  };\n\n  const onEdited = (e) => {\n    const polygons = [];\n    e.layers.eachLayer((layer) => {\n      polygons.push(createPolygon(layer.getLatLngs()));\n    });\n    onChange(polygons[0]);\n  };\n  const onDeleted = (e) => {\n    onChange([]);\n  };\n  const onAdded = (e) => {\n    const added = e.layer;\n    const polygon = createPolygon(added.getLatLngs());\n    if (leafLetEl) {\n      leafLetEl.eachLayer((layer) => {\n        if (layer._leaflet_id !== added._leaflet_id) {\n          leafLetEl.removeLayer(layer); // just so there is only one polygon at a time\n        }\n      });\n    }\n    onChange(polygon);\n  };\n  const setMapCenter = () => {\n    setCenter(props.center);\n  };\n\n  useEffect(() => {\n    if (\n      center &&\n      props.center &&\n      JSON.stringify(center) !== JSON.stringify(props.center)\n    ) {\n      setMapCenter();\n    }\n  });\n\n  const setFGRef = (ref) => {\n    if (ref) {\n      fgRef = ref;\n      leafLetEl = fgRef.leafletElement;\n    }\n  };\n  let mapCenter = props.center || [51.50853, -0.076132];\n\n  const polygon = props.polygon;\n  if (polygon && polygon.length) {\n    mapCenter = polygon[0];\n  }\n  let bounds;\n  if (mapCenter && mapCenter.length) {\n    bounds = [\n      [mapCenter[0], mapCenter[1]],\n      [mapCenter[0], mapCenter[1]],\n    ];\n  }\n\n  const editable = props.editable;\n  const zoom = props.zoom || 16;\n  return (\n    <div>\n      {mapCenter && (\n        <Map\n          className={props.className || \"map\"}\n          center={mapCenter}\n          zoom={zoom}\n          ref={mapRef}\n          fitBounds={bounds}\n        >\n          <TileLayer\n            attribution=\"google\"\n            url=\"http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}\"\n          />\n          {/* <Marker position={mapCenter || [51.50853, -0.076132]}></Marker> */}\n          <FeatureGroup ref={(ref) => setFGRef(ref)}>\n            {polygon && polygon.length > 0 && <Polygon positions={polygon} />}\n            {editable === true && (\n              <EditControl\n                position=\"topright\"\n                onEdited={onEdited}\n                onCreated={onAdded}\n                onDeleted={onDeleted}\n                draw={{\n                  polygon: {\n                    allowIntersection: false, // Restricts shapes to simple polygons\n                    drawError: {\n                      color: \"#e1e100\", // Color the shape will turn when intersects\n                      message: \"<strong>Oh snap!<strong> you can't draw that!\", // Message that will show when intersect\n                    },\n                    shapeOptions: {\n                      color: \"#97009c\",\n                    },\n                  },\n                  polyline: false,\n                  circle: false, // Turns off this drawing tool\n                  rectangle: false,\n                  marker: false,\n                }}\n              />\n            )}\n          </FeatureGroup>\n        </Map>\n      )}\n    </div>\n  );\n};\n\nexport default MapPolygon;\n"]},"metadata":{},"sourceType":"module"}