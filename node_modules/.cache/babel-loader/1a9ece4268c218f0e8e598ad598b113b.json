{"ast":null,"code":"import { ADD_FARM, ADD_FARM_ERROR, SET_FARMS, GET_FARMS_ERROR } from \"../actions/types\";\nconst initialState = {\n  userFarms: [],\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case ADD_FARM:\n      return { ...state,\n        userFarms: state.userFarms.find(f => f._id === payload._id) ? state.userFarms.map(f => f._id === payload._id ? payload : f) : [...state.userFarms, payload],\n        loading: false\n      };\n\n    case ADD_FARM_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case SET_FARMS:\n      return { ...state,\n        userFarms: payload\n      };\n\n    case GET_FARMS_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/deepakkumarsingh/Downloads/banao_lg/sensegrass/src/reducers/farms.js"],"names":["ADD_FARM","ADD_FARM_ERROR","SET_FARMS","GET_FARMS_ERROR","initialState","userFarms","error","state","action","type","payload","find","f","_id","map","loading"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,cAAnB,EAAmCC,SAAnC,EAA8CC,eAA9C,QAAqE,kBAArE;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAKA,eAAe,UAAUC,KAAK,GAAGH,YAAlB,EAAgCI,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACE,SAAKT,QAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBM,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUH,OAAO,CAACG,GAA9C,IACPN,KAAK,CAACF,SAAN,CAAgBS,GAAhB,CAAqBF,CAAD,IAAQA,CAAC,CAACC,GAAF,KAAUH,OAAO,CAACG,GAAlB,GAAwBH,OAAxB,GAAkCE,CAA9D,CADO,GAEP,CAAC,GAAGL,KAAK,CAACF,SAAV,EAAqBK,OAArB,CAJC;AAKLK,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKd,cAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELD,QAAAA,KAAK,EAAEI,OAFF;AAGLK,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKb,SAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELF,QAAAA,SAAS,EAAEK;AAFN,OAAP;;AAKF,SAAKP,eAAL;AACE,aAAM,EACJ,GAAGI,KADC;AAEJD,QAAAA,KAAK,EAAEI,OAFH;AAGJK,QAAAA,OAAO,EAAE;AAHL,OAAN;;AAKF;AACE,aAAOR,KAAP;AA5BJ;AA8BD","sourcesContent":["import { ADD_FARM, ADD_FARM_ERROR, SET_FARMS, GET_FARMS_ERROR } from \"../actions/types\";\n\nconst initialState = {\n  userFarms: [],\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case ADD_FARM:\n      return {\n        ...state,\n        userFarms: state.userFarms.find((f) => f._id === payload._id)\n          ? state.userFarms.map((f) => (f._id === payload._id ? payload : f))\n          : [...state.userFarms, payload],\n        loading: false,\n      };\n    case ADD_FARM_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    case SET_FARMS:\n      return {\n        ...state,\n        userFarms: payload,\n\n      };\n    case GET_FARMS_ERROR:\n      return{\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}