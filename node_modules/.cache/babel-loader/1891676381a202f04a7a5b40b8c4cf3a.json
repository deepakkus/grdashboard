{"ast":null,"code":"import axios from \"axios\";\nimport { ADD_ACTIVITY, ADD_ACTIVITY_ERROR, SET_ACTIVITIES, GET_ACTIVITIES_ERROR, SET_APP_LOADING } from \"../actions/types\";\nexport const addActivity = (activity, userId, token) => async dispatch => {\n  try {\n    const res = await axios.post(` ${process.env.REACT_APP_API_URL}/cropcycleactivity`, activity, {\n      headers: {\n        Authorization: `Bearer ${token} ${userId}`\n      }\n    });\n    console.log(res.data);\n    dispatch({\n      type: ADD_ACTIVITY,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_ACTIVITY_ERROR,\n      payload: err.response\n    });\n  }\n}; //Not Working To be checked\n\nexport const getUserActivities = (currentCropCycles, userId, token) => async dispatch => {\n  const currentCropCyclesIds = [];\n  currentCropCycles.map(cc => {\n    cc ? currentCropCyclesIds.find(c => c === cc._id) ? console.log(\"duplicate\") : cc._id ? currentCropCyclesIds.push(cc._id) : console.log(\"_id not defined\", cc) : console.log(\"fromaction\", cc);\n  });\n\n  if (currentCropCyclesIds.length > 0) {\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/cropcycleactivity/all`, currentCropCyclesIds, {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`\n        }\n      });\n      dispatch({\n        type: SET_ACTIVITIES,\n        payload: res.data\n      });\n      dispatch({\n        type: SET_APP_LOADING,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_ACTIVITIES_ERROR,\n        payload: {\n          msg: err.response\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/actions/activities.js"],"names":["axios","ADD_ACTIVITY","ADD_ACTIVITY_ERROR","SET_ACTIVITIES","GET_ACTIVITIES_ERROR","SET_APP_LOADING","addActivity","activity","userId","token","dispatch","res","post","process","env","REACT_APP_API_URL","headers","Authorization","console","log","data","type","payload","err","response","getUserActivities","currentCropCycles","currentCropCyclesIds","map","cc","find","c","_id","push","length","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,kBAAvB,EAA2CC,cAA3C,EAA2DC,oBAA3D,EAAiFC,eAAjF,QAAwG,kBAAxG;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,KAAnB,KAA6B,MAAOC,QAAP,IAAoB;AAC1E,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAN,CACf,IAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,oBADlB,EAEhBR,QAFgB,EAGhB;AACES,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASR,KAAM,IAAGD,MAAO;AADlC;AADX,KAHgB,CAAlB;AASAU,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACS,IAAhB;AACAV,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEpB,YADC;AAEPqB,MAAAA,OAAO,EAAEX,GAAG,CAACS;AAFN,KAAD,CAAR;AAID,GAfD,CAeE,OAAOG,GAAP,EAAY;AACZb,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEnB,kBADC;AAEPoB,MAAAA,OAAO,EAAEC,GAAG,CAACC;AAFN,KAAD,CAAR;AAID;AACF,CAtBM,C,CAwBP;;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,iBAAD,EAAoBlB,MAApB,EAA4BC,KAA5B,KAAsC,MAAOC,QAAP,IAAoB;AACvF,QAAMiB,oBAAoB,GAAG,EAA7B;AACAD,EAAAA,iBAAiB,CAACE,GAAlB,CAAsBC,EAAE,IAAI;AAC3BA,IAAAA,EAAE,GAAIF,oBAAoB,CAACG,IAArB,CAA2BC,CAAD,IAAOA,CAAC,KAAKF,EAAE,CAACG,GAA1C,IAAkDd,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAlD,GACLU,EAAE,CAACG,GAAH,GAAUL,oBAAoB,CAACM,IAArB,CAA0BJ,EAAE,CAACG,GAA7B,CAAV,GACEd,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BU,EAA/B,CAFD,GAIEX,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BU,EAA1B,CAJJ;AAKA,GAND;;AAOA,MAAGF,oBAAoB,CAACO,MAArB,GAA6B,CAAhC,EAAkC;AAC9B,QAAI;AACJ,YAAMvB,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,wBAA5C,EAClBY,oBADkB,EAElB;AACIX,QAAAA,OAAO,EAAE;AACTC,UAAAA,aAAa,EAAG,UAASR,KAAM,IAAGD,MAAO;AADhC;AADb,OAFkB,CAAlB;AAOAE,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAElB,cADD;AAELmB,QAAAA,OAAO,EAAEX,GAAG,CAACS;AAFR,OAAD,CAAR;AAIAV,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAEhB,eADD;AAELiB,QAAAA,OAAO,EAAE;AAFJ,OAAD,CAAR;AAIC,KAhBD,CAgBE,OAAOC,GAAP,EAAY;AACdb,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAEjB,oBADD;AAELkB,QAAAA,OAAO,EAAE;AAAEa,UAAAA,GAAG,EAAEZ,GAAG,CAACC;AAAX;AAFJ,OAAD,CAAR;AAIC;AACJ;AACJ,CAjCM","sourcesContent":["import axios from \"axios\";\n\nimport { ADD_ACTIVITY, ADD_ACTIVITY_ERROR, SET_ACTIVITIES, GET_ACTIVITIES_ERROR, SET_APP_LOADING } from \"../actions/types\";\n\nexport const addActivity = (activity, userId, token) => async (dispatch) => {\n  try {\n    const res = await axios.post(\n      ` ${process.env.REACT_APP_API_URL}/cropcycleactivity`,\n      activity,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`,\n        }\n      }\n    );\n    console.log(res.data)\n    dispatch({\n      type: ADD_ACTIVITY,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_ACTIVITY_ERROR,\n      payload: err.response,\n    });\n  }\n};\n\n//Not Working To be checked\nexport const getUserActivities = (currentCropCycles, userId, token) => async (dispatch) => {\n    const currentCropCyclesIds = [];\n    currentCropCycles.map(cc => {\n     cc ? (currentCropCyclesIds.find((c) => c === cc._id) ? (console.log(\"duplicate\")) : \n     (cc._id ? (currentCropCyclesIds.push(cc._id))\n     : (console.log(\"_id not defined\", cc)))\n     )\n      : (console.log(\"fromaction\", cc))   \n    }); \n    if(currentCropCyclesIds.length >0){\n        try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/cropcycleactivity/all`,\n        currentCropCyclesIds,\n        {\n            headers: {\n            Authorization: `Bearer ${token} ${userId}`,\n            }\n        });\n        dispatch({\n            type: SET_ACTIVITIES,\n            payload: res.data,\n        });\n        dispatch({\n            type: SET_APP_LOADING,\n            payload: false,\n        });\n        } catch (err) {\n        dispatch({\n            type: GET_ACTIVITIES_ERROR,\n            payload: { msg: err.response },\n        });\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}