{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/Page/Sensors.js\";\nimport React, { Suspense, useEffect, useState } from \"react\";\nimport { Segment, Container, Grid, Loader, Responsive } from \"semantic-ui-react\";\nimport Navbar from \"../Navbar/navbar\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport PublicData from \"../PublicData/PublicData\";\nimport Profile from \"../Profile/Profile\";\nimport MainButton from \"../MainButton/MainButton\";\nimport MapCard from \"../MapCard/MapCard\";\nimport AddSensorLink from \"../AddSensorLink/AddSensorLink\";\nimport SensorTable from \"../../components/SensorTable/sensortable\";\nimport { useTranslation } from \"react-i18next\";\nimport { getIdealRanges } from \"../../services/plantCard\";\nimport { getPlantName } from \"../../utils/utilsFunctions\";\nimport TabletViewSensorsPage from \"../tablet-view/tablet-view-sensors\";\n\nconst Sensors = props => {\n  const {\n    title,\n    devices: {\n      userDevices\n    },\n    getSensorsData,\n    ranges\n  } = props; // console.log(props.userFarms)\n\n  const [values, setValues] = useState({\n    ranges: {}\n  });\n  const {\n    t\n  } = useTranslation(\"common\");\n  const ids = \",14fbedaf-1b14-49f3-93ab-f3e405ab3e0d,20ac411f-4c09-409c-88a8-fe69594e2652\";\n  useEffect(() => {\n    document.title = t(props.title);\n    setRanges();\n    props.getIdealRange(\"generic\");\n\n    if (userDevices && userDevices.length) {\n      getSensorsData(userDevices.map(d => d.deviceId).join());\n    }\n\n    console.log(\"getSensorsData\");\n  }, [title]);\n\n  const selected = id => {\n    let sensors = props.sensors;\n    const sensor = sensors.filter(sensor => {\n      return sensor.deviceId === id;\n    });\n\n    if (sensor[0]) {\n      return sensor[0];\n    } else {\n      return;\n    }\n  }; // /console.log(props.farms)\n\n\n  const setRanges = async () => {\n    // TODO logic of finding the crop/plant\n    // const plant = \"allium%20cepa\";\n    const sensor = selected(props.match.params.id);\n    const markerLoc = sensor && [sensor.location.latitude, sensor.location.longitude];\n\n    if (sensor) {\n      const plant = getPlantName(props.userFarms, markerLoc, props.lookup.croptypes);\n      const ranges = plant ? await getIdealRanges(plant) : await getIdealRanges(\"generic\"); // props.getIdealRange(\"generic\");\n\n      setValues({\n        ranges\n      });\n      console.log({\n        plant\n      });\n      console.log({\n        ranges\n      });\n    }\n  };\n\n  const getLatLong = () => {\n    // console.log(sensors);\n    const sensor = props.sensors.filter(sensor => sensor.deviceId === props.match.params.id)[0];\n    const lat = sensor ? sensor.location.latitude : 0;\n    const lon = sensor ? sensor.location.longitude : 0;\n    return {\n      lat,\n      lon\n    };\n  }; // console.log(\"values\", values.ranges);\n  // const ranges = values.ranges;\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Responsive, {\n    minWidth: 1366,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    columns: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    active: \"sensors\",\n    defaultsensor: props.sensors && props.sensors[0] ? props.sensors[0].deviceId : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Suspense, {\n    fallback: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"midcontainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(SensorTable, Object.assign({\n    ranges: ranges,\n    sensor: selected(props.match.params.id),\n    firstSensor: props.sensors[0] && props.sensors[0],\n    match: props.match\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 4,\n    className: \"rightcontainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Profile, {\n    className: \"Profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MapCard, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AddSensorLink, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PublicData, Object.assign({}, props, {\n    latlng: getLatLong(),\n    className: \"weather-det-sensors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MainButton, Object.assign({\n    className: \"MainButton\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 19\n    }\n  }), t(\"ADD_ACTIVITY\")))))))), /*#__PURE__*/React.createElement(Responsive, {\n    minWidth: 768,\n    maxWidth: 1365.98,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TabletViewSensorsPage, Object.assign({}, props, {\n    latlng: getLatLong(),\n    selected: selected(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }))));\n};\n\nexport default Sensors;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/Page/Sensors.js"],"names":["React","Suspense","useEffect","useState","Segment","Container","Grid","Loader","Responsive","Navbar","SearchBar","PublicData","Profile","MainButton","MapCard","AddSensorLink","SensorTable","useTranslation","getIdealRanges","getPlantName","TabletViewSensorsPage","Sensors","props","title","devices","userDevices","getSensorsData","ranges","values","setValues","t","ids","document","setRanges","getIdealRange","length","map","d","deviceId","join","console","log","selected","id","sensors","sensor","filter","match","params","markerLoc","location","latitude","longitude","plant","userFarms","lookup","croptypes","getLatLong","lat","lon","undefined"],"mappings":"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","sourcesContent":["import React, { Suspense, useEffect, useState } from \"react\";\nimport { Segment, Container, Grid, Loader, Responsive } from \"semantic-ui-react\";\nimport Navbar from \"../Navbar/navbar\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport PublicData from \"../PublicData/PublicData\";\nimport Profile from \"../Profile/Profile\";\nimport MainButton from \"../MainButton/MainButton\";\nimport MapCard from \"../MapCard/MapCard\";\nimport AddSensorLink from \"../AddSensorLink/AddSensorLink\";\nimport SensorTable from \"../../components/SensorTable/sensortable\";\nimport { useTranslation } from \"react-i18next\";\nimport { getIdealRanges } from \"../../services/plantCard\";\nimport { getPlantName } from \"../../utils/utilsFunctions\";\nimport TabletViewSensorsPage from \"../tablet-view/tablet-view-sensors\"\nconst Sensors = (props) => {\n  const {\n    title,\n    devices: { userDevices },\n    getSensorsData,\n    ranges,\n  } = props;\n  // console.log(props.userFarms)\n  const [values, setValues] = useState({\n    ranges: {},\n  });\n  const { t } = useTranslation(\"common\");\n  const ids =\n    \",14fbedaf-1b14-49f3-93ab-f3e405ab3e0d,20ac411f-4c09-409c-88a8-fe69594e2652\";\n  useEffect(() => {\n    document.title = t(props.title);\n    setRanges();\n    props.getIdealRange(\"generic\");\n    if (userDevices && userDevices.length) {\n      getSensorsData(userDevices.map((d) => d.deviceId).join());\n    }\n    console.log(\"getSensorsData\");\n  }, [title]);\n\n  const selected = (id) => {\n    let sensors = props.sensors;\n    const sensor = sensors.filter((sensor) => {\n      return sensor.deviceId === id;\n    });\n    if (sensor[0]) {\n      return sensor[0];\n    } else {\n      return;\n    }\n  };\n\n  // /console.log(props.farms)\n\n  const setRanges = async () => {\n    // TODO logic of finding the crop/plant\n    // const plant = \"allium%20cepa\";\n    const sensor = selected(props.match.params.id);\n    const markerLoc = sensor && [\n      sensor.location.latitude,\n      sensor.location.longitude,\n    ];\n\n    if (sensor) {\n      const plant = getPlantName(\n        props.userFarms,\n        markerLoc,\n        props.lookup.croptypes\n      );\n      const ranges = plant\n        ? await getIdealRanges(plant)\n        : await getIdealRanges(\"generic\");\n\n      // props.getIdealRange(\"generic\");\n\n      setValues({ ranges });\n      console.log({ plant });\n      console.log({ ranges });\n    }\n  };\n\n  const getLatLong = () => {\n    // console.log(sensors);\n    const sensor = props.sensors.filter(\n      (sensor) => sensor.deviceId === props.match.params.id\n    )[0];\n    const lat = sensor ? sensor.location.latitude : 0;\n    const lon = sensor ? sensor.location.longitude : 0;\n    return { lat, lon };\n  };\n\n  // console.log(\"values\", values.ranges);\n  // const ranges = values.ranges;\n  return (\n    <>\n    <Responsive minWidth = {1366}>\n      <Grid columns={3}>\n        <Grid.Row>\n          <Grid.Column width={1}>\n            {/* <Container className=\"leftcontainer\"> */}\n              <Navbar\n                active=\"sensors\"\n                defaultsensor={\n                  props.sensors && props.sensors[0]\n                    ? props.sensors[0].deviceId\n                    : undefined\n                }\n              />\n            {/* </Container> */}\n          </Grid.Column>\n          <Suspense fallback=\"loading\">\n            <Grid.Column width={11}>\n              <div className=\"midcontainer\">\n                <SearchBar {...props} />\n                {/* <Container fluid> */}\n                  {/* <Segment raised className=\"SenseMidSection\"> */}\n                    {/* <Grid columns = {1}> */}\n                      {/* <Grid.Column className=\"p-0 m-0\"> */}\n                        <SensorTable\n                          ranges={ranges}\n                          sensor={selected(props.match.params.id)}\n                          firstSensor={props.sensors[0] && props.sensors[0]}\n                          match={props.match}\n                          {...props}\n                        />\n                      {/* </Grid.Column> */}\n                    {/* </Grid> */}\n                  {/* </Segment> */}\n                {/* </Container> */}\n              </div>\n            </Grid.Column>\n            <Grid.Column width={4} className=\"rightcontainer\">\n              {/* <Container> */}\n                <div>\n                  <Profile className=\"Profile\" />\n                </div>\n                <div>\n                  <MapCard {...props} />\n                </div>\n                <div>\n                  <AddSensorLink {...props} />\n                </div>\n                <Container>\n                <div>\n                  <PublicData {...props} latlng={getLatLong()} className = \"weather-det-sensors\"/>\n                </div>\n                </Container>\n                <div>\n                  <MainButton className=\"MainButton\" {...props}>\n                    {t(\"ADD_ACTIVITY\")}\n                  </MainButton>\n                </div>\n                \n              {/* </Container> */}\n            </Grid.Column>\n          </Suspense>\n        </Grid.Row>\n      </Grid>\n    </Responsive>\n    <Responsive minWidth = {768} maxWidth = {1365.98}>\n      <TabletViewSensorsPage {...props} latlng = {getLatLong()} selected = {selected()}/>\n    </Responsive>\n    </>\n  );\n};\n\nexport default Sensors;\n"]},"metadata":{},"sourceType":"module"}