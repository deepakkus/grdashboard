{"ast":null,"code":"import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import\"./SettingsListStyles.scss\";import{Segment,Grid}from\"semantic-ui-react\";import{calculateArea}from\"../../utils/utilsFunctions\";import MapPolygon from\"../MapPolygon/MapPolygon\";import fieldCorrectPic from\"../../images/xd/fieldCorrectPic.svg\";var SettingsList=function SettingsList(props){var userId=props.userId,token=props.token,userFarms=props.userFarms,getIdealRange=props.getIdealRange,lookup=props.lookup,soilHealth=props.soilHealth;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),fieldId=_useState2[0],setFieldId=_useState2[1];var fieldOptions=[];var userFields=userFarms.length>0?userFarms.map(function(farm){var polygon=farm.location;var center=farm.address.location;var soiltypes=lookup.soiltypes.filter(function(soiltype){return soiltype._id===farm.soilTypeId;});var watersources=lookup.watersources.filter(function(watersource){return watersource._id===farm.waterSourceId;});var terraintypes=lookup.terraintypes.filter(function(terrain){return terrain._id===farm.terrainTypeId;});console.log(soiltypes);// console.log(watersource)\nreturn/*#__PURE__*/React.createElement(Segment,{inverted:true,className:\"user-fields\",key:farm._id},/*#__PURE__*/React.createElement(Grid,null,/*#__PURE__*/React.createElement(Grid.Row,{columns:2,className:\"mx-0\"},/*#__PURE__*/React.createElement(Grid.Column,{width:3,className:\"fieldImg\"},/*#__PURE__*/React.createElement(\"img\",{src:fieldCorrectPic,className:\"Img\"})),/*#__PURE__*/React.createElement(Grid.Column,{width:13},/*#__PURE__*/React.createElement(\"div\",{className:\"fieldHeading\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h5\",null,farm.farmName)),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h5\",null,\"EDIT\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"fieldUpper\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",null,\"Location: \"),/*#__PURE__*/React.createElement(\"span\",null,farm.address.location[0].toFixed(2),\" Lat \",farm.address.location[1].toFixed(2),\" Lng\")),/*#__PURE__*/React.createElement(\"div\",null,soilHealth?'':/*#__PURE__*/React.createElement(\"span\",null,\"Size: \")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",null,\"DELETE\"))),soilHealth?/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"report-date\"},/*#__PURE__*/React.createElement(\"span\",null,\"Report Date: 11.11.2021\"))):'')),soilHealth?/*#__PURE__*/React.createElement(Grid.Row,{columns:2,className:\"fieldBottom\"},/*#__PURE__*/React.createElement(\"div\",{className:\"soilHealth-card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"lab-name\"},/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Name of Laboratory: \"),/*#__PURE__*/React.createElement(\"span\",null,\"Barath Kishan Lab\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"soil-type\"},/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Soil Sample Number: \"),/*#__PURE__*/React.createElement(\"span\",null,\"Black soil\"))))):/*#__PURE__*/React.createElement(Grid.Row,{columns:4,className:\"fieldBottom\"},/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Crop: \"),/*#__PURE__*/React.createElement(\"span\",null,\"Uncultivated\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Water Source: \"),/*#__PURE__*/React.createElement(\"span\",null,watersources[0]?watersources[0].name:watersources)),/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Soil Type: \"),/*#__PURE__*/React.createElement(\"span\",null,soiltypes[0]?soiltypes[0].name:soiltypes)),/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Terrain Type: \"),/*#__PURE__*/React.createElement(\"span\",null,terraintypes[0]?terraintypes[0].name:terraintypes))))));}):null;return userFields;};export default SettingsList;// const fillData = (newData) =>\n//     {\n//         newData.forEach((element) =>\n//         {\n//             fieldOptions.push({\n//                 text: element.farmName,\n//                 id: element._id,\n//                 value: element._id\n//             });\n//         });\n//     }","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/SettingsList/SettingsList.js"],"names":["React","useState","useEffect","Segment","Grid","calculateArea","MapPolygon","SettingsList","props","userId","token","userFarms","getIdealRange","lookup","soilHealth","fieldId","setFieldId","fieldOptions","userFields","length","map","farm","polygon","location","center","address","soiltypes","filter","soiltype","_id","soilTypeId","watersources","watersource","waterSourceId","terraintypes","terrain","terrainTypeId","console","log","fieldCorrectPic","farmName","toFixed","name"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from \"react\"\nimport \"./SettingsListStyles.scss\" \nimport {Segment, Grid} from \"semantic-ui-react\"\nimport {calculateArea} from \"../../utils/utilsFunctions\"\nimport MapPolygon from \"../MapPolygon/MapPolygon\"\nimport fieldCorrectPic from \"../../images/xd/fieldCorrectPic.svg\"\n\nconst SettingsList = (props) =>\n{\n    const {userId, token, userFarms, getIdealRange, lookup, soilHealth} = props;\n    const [fieldId, setFieldId] = useState(\"\");\n    let fieldOptions = [];\n    \n    const userFields = userFarms.length > 0 ? userFarms.map(farm => {\n        let polygon =  farm.location\n        let center =  farm.address.location\n        let soiltypes = lookup.soiltypes.filter((soiltype) => soiltype._id === farm.soilTypeId)\n        let watersources = lookup.watersources.filter((watersource) => watersource._id === farm.waterSourceId)\n        let terraintypes = lookup.terraintypes.filter((terrain) => terrain._id === farm.terrainTypeId)\n        console.log(soiltypes)\n        // console.log(watersource)\n\n        return(\n            <Segment inverted className=\"user-fields\" key = {farm._id}>\n                <Grid>\n                    <Grid.Row columns = {2} className = \"mx-0\">\n                        {/* <MapPolygon editable = {false} polygon = {polygon} center = {center}/> */}\n                        <Grid.Column width = {3} className = \"fieldImg\"><img src = {fieldCorrectPic} className = \"Img\"/></Grid.Column>\n                        <Grid.Column width = {13}>\n                            <div className = \"fieldHeading\">\n                                <div>\n                                    <h5>\n                                        {farm.farmName}\n                                    </h5>\n                                </div>\n                                <div>\n                                    <h5>\n                                        EDIT\n                                    </h5>\n                                </div>\n                            </div>\n                            <div className = \"fieldUpper\">\n                                <div>\n                                    <span>Location: </span><span>{farm.address.location[0].toFixed(2)} Lat {farm.address.location[1].toFixed(2)} Lng</span>\n                                </div>\n                                <div>\n                                    {\n                                        soilHealth ? '' : <span>Size: </span>\n                                    }\n                                </div>\n                                <div>\n                                    <span>\n                                        DELETE\n                                    </span>\n                                </div>\n                            </div>\n                            {\n                                soilHealth ? \n                                (\n                                    <div>\n                                        <div className = \"report-date\">\n                                            <span>Report Date: 11.11.2021</span>\n                                        </div>\n                                    </div>\n                                ): ('')\n                            }\n                            \n                            \n                            \n                            \n                            {/* <h5>\n                                Location: <span>{`${farm.address.location[0].toFixed(2)}`} Lat {`${farm.address.location[1].toFixed(2)}`} Long</span>\n                            </h5>                             */}\n                        </Grid.Column>\n                    </Grid.Row>\n                    {\n                        soilHealth ? \n                        (\n                            <Grid.Row columns = {2} className = \"fieldBottom\">\n                                <div className = \"soilHealth-card\">\n                                    <div className = \"lab-name\">\n                                        <Grid.Column className = \"fielDetails-bottom\">\n                                            <span>Name of Laboratory: </span><span>Barath Kishan Lab</span>\n                                        </Grid.Column>\n                                    </div>\n                                    <div className = \"soil-type\">\n                                        <Grid.Column className = \"fielDetails-bottom\">\n                                            <span>Soil Sample Number: </span>\n                                            <span>Black soil</span>\n                                        </Grid.Column>\n                                    </div>\n                                    \n                                </div>\n                            </Grid.Row>\n                        )\n                        :\n                        (\n                            <Grid.Row columns = {4} className = \"fieldBottom\">\n                                <>\n                                    <Grid.Column className = \"fielDetails-bottom\">\n                                        <span>Crop: </span><span>Uncultivated</span>\n                                    </Grid.Column>\n                                    <Grid.Column className = \"fielDetails-bottom\">\n                                        <span>Water Source: </span><span>{watersources[0] ? watersources[0].name : watersources}</span>\n                                        {/* {watersources[0].name} */}\n                                    </Grid.Column>\n                                    <Grid.Column className = \"fielDetails-bottom\">\n                                        <span>Soil Type: </span><span>{soiltypes[0] ? soiltypes[0].name : soiltypes}</span>\n                                    </Grid.Column>\n                                    <Grid.Column className = \"fielDetails-bottom\">\n                                        <span>Terrain Type: </span><span>{terraintypes[0] ? terraintypes[0].name : terraintypes}</span>\n                                    </Grid.Column>\n                                </>\n                            </Grid.Row>\n                        )\n                    }\n                    \n                </Grid>\n            </Segment>\n        )\n    })\n    :null\n    return(\n        userFields\n    )\n\n}\n    \n\n\n\nexport default SettingsList;\n\n\n\n// const fillData = (newData) =>\n//     {\n//         newData.forEach((element) =>\n//         {\n//             fieldOptions.push({\n//                 text: element.farmName,\n//                 id: element._id,\n//                 value: element._id\n//             });\n//         });\n//     }\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}