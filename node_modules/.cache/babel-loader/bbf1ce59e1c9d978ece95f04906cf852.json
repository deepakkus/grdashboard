{"ast":null,"code":"import _regeneratorRuntime from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{Link}from\"react-router-dom\";import{Grid,GridColumn,Segment,Divider,Loader}from\"semantic-ui-react\";import{ProgressBar}from\"react-bootstrap\";import{withTranslation}from\"react-i18next\";// import depthSensor from \"../../images/ssensorIMG.png\";\nimport depthSensor from\"../../images/sensorsImage.png\";import\"./sensortable.scss\";import SensorUpper from\"../../components/SensorUpper/sensorupper\";import MainButton from\"../../components/MainButton/MainButton\";import{getIdealRanges}from\"../../services/plantCard\";var SensorTable=/*#__PURE__*/function(_Component){_inherits(SensorTable,_Component);var _super=_createSuper(SensorTable);function SensorTable(){var _this;_classCallCheck(this,SensorTable);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={/**\n     * ProgressBar from Bootstrap coloring values\n     */progressVariants:[\"success\",\"warning\",\"danger\"],/**\n     * Progress from Semantic coloring values\n     * Not Used\n     */progressSemantic:[\"success\",\"warning\",\"error\"],/**\n     * Not checked yet\n     */progressMaxVal:[100,100,100,100,40,14,100,100]};_this.checkVariant=function(key,val,ranges){if(val>=ranges[key].min&&val<=ranges[key].max){return _this.state.progressVariants[0];}else if(Math.round(val/ranges[key].min)===1||Math.floor(val/ranges[key].max)===1){return _this.state.progressVariants[1];}else{return _this.state.progressVariants[2];}};_this.checkProgress=function(key,val,ranges){if(val>=ranges[key].min&&val<=ranges[key].max){return _this.state.progressSemantic[0];}else if(Math.round(val/ranges[key].min)===1||Math.floor(val/ranges[key].max)===1){return _this.state.progressSemantic[1];}else{return _this.state.progressSemantic[2];}};_this.testTable=function(){var table=[];// Outer loop to create parent\nfor(var i=0;i<3;i++){var children=[];//Inner loop to create children\nfor(var j=0;j<5;j++){children.push(/*#__PURE__*/React.createElement(\"td\",null,\"Column \".concat(j+1)));}//Create the parent and add the children\ntable.push(/*#__PURE__*/React.createElement(\"tr\",null,children));}return table;};_this.createTable=function(){var table=[];var _this$props=_this.props,t=_this$props.t,ranges=_this$props.ranges;// ranges = undefined;\nif(Object.keys(ranges).length){var depths=[_this.props.sensor.level1,_this.props.sensor.level2,_this.props.sensor.level3];// console.log(\"test\", depths);\n// console.log(\"test2\", this.state.depths);\n// Outer loop to create parent\n// const { t } = this.props;\ndepths.map(function(depth,index){var rangesFromState=ranges;var _rangesFromState=rangesFromState,nitrogen=_rangesFromState.nitrogen,phosphorus=_rangesFromState.phosphorus,potassium=_rangesFromState.potassium,salinity=_rangesFromState.salinity,soilTemp=_rangesFromState.soilTemp,pH=_rangesFromState.pH,moisture=_rangesFromState.moisture,respiration=_rangesFromState.respiration,aeration=_rangesFromState.aeration;// console.log(\"rangesFromState\", rangesFromState);\nvar children=[];rangesFromState={N:nitrogen,P:phosphorus,K:potassium,salinity:salinity,soilTemp:soilTemp,pH:pH,moisture:moisture,// respiration,\n// aeration,\n// \"evapotranspiration(ET)\": {\n//   min: 80,\n//   max: 100,\n// },\nitem:{respiration:respiration,aeration:aeration}};// console.log(\"rangesFromState1\", rangesFromState);\n//Inner loop to create children\nfor(var key in rangesFromState){var val=Math.round(depth[key]);children.push(/*#__PURE__*/React.createElement(GridColumn,{className:\"sensor-column\"},val==undefined||NaN||null?/*#__PURE__*/React.createElement(\"p\",null):/*#__PURE__*/React.createElement(\"div\",{className:\"p-0\"},/*#__PURE__*/React.createElement(\"p\",{style:{fontSize:40,textAlign:\"center\",color:\"#8D8C8C\",fontWeight:\"normal\",marginLeft:\"10px\"}},function(){if(key===\"item\"&&depth[\"respiration\"]){return val=depth[\"respiration\"];}else if(key===\"item\"&&depth[\"aeration\"]){return val=depth[\"aeration\"];}else if(depth[key]==undefined||NaN||null){return\"\";}else{return val=Math.round(depth[key]);}}()),val==undefined||isNaN(val)||null?/*#__PURE__*/React.createElement(\"p\",null):/*#__PURE__*/React.createElement(ProgressBar,{style:{height:\".5rem\",textAlign:\"center\"},striped:true,variant:_this.checkVariant(key,val,rangesFromState),now:val// max={rangesFromState[key].max}\n,max:function(){if(key===\"item\"&&depth[\"respiration\"]){return rangesFromState[\"item\"].respiration.max;}else if(key===\"item\"&&depth[\"aeration\"]){return rangesFromState[\"item\"].aeration.max;}else{return rangesFromState[key].max;}}(),key:\"$key+$index\"}),depth[key]==undefined||NaN||null?\"\":/*#__PURE__*/React.createElement(\"p\",{style:{margin:0,textAlign:\"center\"}},\" \",t(\"common:Ideal\"),\" \"),/*#__PURE__*/React.createElement(\"p\",{style:{fontSize:10,textAlign:\"center\"}},function(){if(key===\"item\"&&depth[\"respiration\"]){return\" \".concat(rangesFromState[\"item\"].respiration.min,\" -\\n                        \").concat(rangesFromState[\"item\"].respiration.max);}else if(key===\"item\"&&depth[\"aeration\"]){return\" \".concat(rangesFromState[\"item\"].aeration.min,\" -\\n                        \").concat(rangesFromState[\"item\"].aeration.max);}else if(key===\"item\"&&!depth[\"aeration\"]&&!depth[\"aeration\"]){return\"\";}else{return\"\".concat(rangesFromState[key].min,\" - \").concat(rangesFromState[key].max);}}()),function(){if(key===\"item\"&&depth[\"respiration\"]){return/*#__PURE__*/React.createElement(GridColumn,null,/*#__PURE__*/React.createElement(\"p\",{style:{fontWeight:\"bold\",margin:0}},\"Respiration\"),/*#__PURE__*/React.createElement(\"p\",{style:{fontSize:11,padding:\"0 30%\"}},\"(PPM)\"));}else if(key===\"item\"&&depth[\"aeration\"]){return/*#__PURE__*/React.createElement(GridColumn,null,/*#__PURE__*/React.createElement(\"p\",{style:{fontWeight:\"bold\",margin:0}},\"Aeration\"),/*#__PURE__*/React.createElement(\"p\",{style:{fontSize:11,padding:\"0 30%\",margin:0}},\"(%)\"));}}())));}table.push(/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Grid.Row,{className:\"sensor-row\"},children),/*#__PURE__*/React.createElement(Divider,{style:{minWidth:\"60vw\"},className:\"p-0 m-0\"})));});}return table;};return _this;}_createClass(SensorTable,[{key:\"componentDidMount\",value:function(){var _componentDidMount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:getIdealRanges();case 1:case\"end\":return _context.stop();}}},_callee);}));function componentDidMount(){return _componentDidMount.apply(this,arguments);}return componentDidMount;}()/**\n   * Progress from SemanticUI\n   * @param key table header in this.state.depths list\n   * @param val value for column from this.state.depths list\n   * if it is in the ideal range specified in the state {ranges}\n   * success -> in ideal range\n   * warning -> round(value/minIdeal) = 1 or floor(value/maxIdeal) = 1\n   * error -> otherwise\n   */},{key:\"render\",value:function render(){var _this$props2=this.props,t=_this$props2.t,sensor=_this$props2.sensor,ranges=_this$props2.ranges;return ranges?/*#__PURE__*/React.createElement(Segment,{style:{overflowX:\"hidden\",maxHeight:\"85vh\"},className:\"table\"},/*#__PURE__*/React.createElement(Grid,{columns:2},/*#__PURE__*/React.createElement(Grid.Column,{width:13},/*#__PURE__*/React.createElement(Grid.Row,{className:\"my-4 mx-2\"},/*#__PURE__*/React.createElement(SensorUpper,{match:this.props.match,sensor:this.props.sensor,userDevices:this.props.devices.UserDevicesOptions,className:\"m-5\"})),/*#__PURE__*/React.createElement(Divider,{style:{width:\"100vw\"},className:\"p-0 m-0\"}),sensor?/*#__PURE__*/React.createElement(Grid.Row,{className:\"table m-4 ml-0 pl-0\"},/*#__PURE__*/React.createElement(Grid,{columns:8,rows:4},/*#__PURE__*/React.createElement(Grid.Row,{className:\"header-row\"},/*#__PURE__*/React.createElement(Grid.Column,{className:\"bold\"},t(\"common:Nitrogen\"),\" \",/*#__PURE__*/React.createElement(\"br\",null),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"unit\"},\"(mg/L)\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"bold\"},t(\"common:Phosphorus\"),\" \",/*#__PURE__*/React.createElement(\"br\",null),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"unit\"},\"(mg/L)\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"bold\"},t(\"common:Potassium\"),\" \",/*#__PURE__*/React.createElement(\"br\",null),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"unit\"},\"(mg/L)\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"bold\"},t(\"common:Salinity\"),\" \",/*#__PURE__*/React.createElement(\"br\",null),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"unit\"},\"(ds/M)\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"bold\"},t(\"common:SoilTemp\"),\" \",/*#__PURE__*/React.createElement(\"br\",null),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"unit\"},\"(\\u2103)\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"bold ph-value\"},t(\"common:pH\"),\" \",/*#__PURE__*/React.createElement(\"br\",null),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"unit\"},\"(pH)\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"bold\"},t(\"common:Moisture\"),\" \",/*#__PURE__*/React.createElement(\"br\",null),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"unit\"},\"(%)\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"bold additional-value\"},\" \",t(\"common:Additional\"))),this.createTable())):\"\"),sensor&&/*#__PURE__*/React.createElement(Grid.Column,{width:3},/*#__PURE__*/React.createElement(\"img\",{src:depthSensor,alt:\"depthSensor\",className:\"depthSensorImg\"})))):/*#__PURE__*/React.createElement(\"div\",{style:{textAlign:\"center\",margin:\"1rem 0\"}},/*#__PURE__*/React.createElement(\"p\",{className:\"p-0 m-2\"},\"No sensors data found\"),/*#__PURE__*/React.createElement(Link,{className:\"p-0 m-0\",to:\"/addDevice\"},/*#__PURE__*/React.createElement(MainButton,{style:{textAlign:\"center\",width:\"15vw\"}},\"ADD A NEW DEVICE\")));}}]);return SensorTable;}(Component);var SensorTableComponent=withTranslation()(SensorTable);export default SensorTableComponent;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/SensorTable/sensortable.js"],"names":["React","Component","Link","Grid","GridColumn","Segment","Divider","Loader","ProgressBar","withTranslation","depthSensor","SensorUpper","MainButton","getIdealRanges","SensorTable","state","progressVariants","progressSemantic","progressMaxVal","checkVariant","key","val","ranges","min","max","Math","round","floor","checkProgress","testTable","table","i","children","j","push","createTable","props","t","Object","keys","length","depths","sensor","level1","level2","level3","map","depth","index","rangesFromState","nitrogen","phosphorus","potassium","salinity","soilTemp","pH","moisture","respiration","aeration","N","P","K","item","undefined","NaN","fontSize","textAlign","color","fontWeight","marginLeft","isNaN","height","margin","padding","minWidth","overflowX","maxHeight","match","devices","UserDevicesOptions","width","SensorTableComponent"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Grid, GridColumn, Segment, Divider, Loader } from \"semantic-ui-react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { withTranslation } from \"react-i18next\";\n\n// import depthSensor from \"../../images/ssensorIMG.png\";\nimport depthSensor from \"../../images/sensorsImage.png\";\nimport \"./sensortable.scss\";\nimport SensorUpper from \"../../components/SensorUpper/sensorupper\";\nimport MainButton from \"../../components/MainButton/MainButton\";\nimport { getIdealRanges } from \"../../services/plantCard\";\n\nclass SensorTable extends Component {\n  state = {\n    /**\n     * ProgressBar from Bootstrap coloring values\n     */\n    progressVariants: [\"success\", \"warning\", \"danger\"],\n\n    /**\n     * Progress from Semantic coloring values\n     * Not Used\n     */\n    progressSemantic: [\"success\", \"warning\", \"error\"],\n\n    /**\n     * Not checked yet\n     */\n    progressMaxVal: [100, 100, 100, 100, 40, 14, 100, 100],\n  };\n\n  /**\n   * ProgressBar from Bootstrap\n   * @param key table header in this.state.depths list\n   * @param val value for column from this.state.depths list\n   * if it is in the ideal range specified in the state {ranges}\n   */\n\n  checkVariant = (key, val, ranges) => {\n    if (val >= ranges[key].min && val <= ranges[key].max) {\n      return this.state.progressVariants[0];\n    } else if (\n      Math.round(val / ranges[key].min) === 1 ||\n      Math.floor(val / ranges[key].max) === 1\n    ) {\n      return this.state.progressVariants[1];\n    } else {\n      return this.state.progressVariants[2];\n    }\n  };\n  async componentDidMount() {\n    getIdealRanges();\n  }\n\n  /**\n   * Progress from SemanticUI\n   * @param key table header in this.state.depths list\n   * @param val value for column from this.state.depths list\n   * if it is in the ideal range specified in the state {ranges}\n   * success -> in ideal range\n   * warning -> round(value/minIdeal) = 1 or floor(value/maxIdeal) = 1\n   * error -> otherwise\n   */\n  checkProgress = (key, val, ranges) => {\n    if (val >= ranges[key].min && val <= ranges[key].max) {\n      return this.state.progressSemantic[0];\n    } else if (\n      Math.round(val / ranges[key].min) === 1 ||\n      Math.floor(val / ranges[key].max) === 1\n    ) {\n      return this.state.progressSemantic[1];\n    } else {\n      return this.state.progressSemantic[2];\n    }\n  };\n\n  /** Random Table For Testing */\n  testTable = () => {\n    let table = [];\n    // Outer loop to create parent\n    for (let i = 0; i < 3; i++) {\n      let children = [];\n      //Inner loop to create children\n      for (let j = 0; j < 5; j++) {\n        children.push(<td>{`Column ${j + 1}`}</td>);\n      }\n      //Create the parent and add the children\n      table.push(<tr>{children}</tr>);\n    }\n\n    return table;\n  };\n\n  /**\n   * Creating the table from state depths values\n   * @param ranges ideal range from state\n   * In react while rendering you can't render the parent then render child by loop\n   * Implement loop for parent then loop for children to add into children list\n   * exit children loop then add parent to list with children embedded in it\n   * return list of parents to be rendered\n   */\n\n  createTable = () => {\n    let table = [];\n\n    let { t, ranges } = this.props;\n\n    // ranges = undefined;\n\n    if (Object.keys(ranges).length) {\n      let depths = [\n        this.props.sensor.level1,\n        this.props.sensor.level2,\n        this.props.sensor.level3,\n      ];\n\n      // console.log(\"test\", depths);\n      // console.log(\"test2\", this.state.depths);\n      // Outer loop to create parent\n\n      // const { t } = this.props;\n      depths.map((depth, index) => {\n        let rangesFromState = ranges;\n        const {\n          nitrogen,\n          phosphorus,\n          potassium,\n          salinity,\n          soilTemp,\n          pH,\n          moisture,\n          respiration,\n          aeration,\n        } = rangesFromState;\n        // console.log(\"rangesFromState\", rangesFromState);\n        let children = [];\n\n        rangesFromState = {\n          N: nitrogen,\n          P: phosphorus,\n          K: potassium,\n          salinity,\n          soilTemp,\n          pH,\n          moisture,\n          // respiration,\n          // aeration,\n          // \"evapotranspiration(ET)\": {\n          //   min: 80,\n          //   max: 100,\n          // },\n          item: {\n            respiration,\n            aeration,\n          },\n        };\n        // console.log(\"rangesFromState1\", rangesFromState);\n\n        //Inner loop to create children\n        for (var key in rangesFromState) {\n          let val = Math.round(depth[key]);\n\n          children.push(\n            <GridColumn className = \"sensor-column\">\n              {val == undefined || NaN || null ? (\n                <p></p>\n              ) : (\n                <div className=\"p-0\">\n                  <p style={{ fontSize: 40, textAlign: \"center\", color: \"#8D8C8C\", fontWeight: \"normal\", marginLeft: \"10px\"}}>\n                    {(() => {\n                      if (key === \"item\" && depth[\"respiration\"]) {\n                        return (val = depth[\"respiration\"]);\n                      } else if (key === \"item\" && depth[\"aeration\"]) {\n                        return (val = depth[\"aeration\"]);\n                      } else if (depth[key] == undefined || NaN || null) {\n                        return \"\";\n                      } else {\n                        return (val = Math.round(depth[key]));\n                      }\n                    })()}\n                  </p>\n                  {val == undefined || isNaN(val) || null ? (\n                    <p></p>\n                  ) : (\n                    <ProgressBar\n                      style={{ height: \".5rem\", textAlign: \"center\" }}\n                      striped\n                      variant={this.checkVariant(key, val, rangesFromState)}\n                      now={val}\n                      // max={rangesFromState[key].max}\n                      max={(() => {\n                        if (key === \"item\" && depth[\"respiration\"]) {\n                          return rangesFromState[\"item\"].respiration.max;\n                        } else if (key === \"item\" && depth[\"aeration\"]) {\n                          return rangesFromState[\"item\"].aeration.max;\n                        } else {\n                          return rangesFromState[key].max;\n                        }\n                      })()}\n                      key={`$key+$index`}\n                    />\n                  )}\n\n                  {depth[key] == undefined || NaN || null ? (\n                    \"\"\n                  ) : (\n                    <p style={{ margin: 0, textAlign: \"center\" }}>\n                      {\" \"}\n                      {t(\"common:Ideal\")}{\" \"}\n                    </p>\n                  )}\n                  <p style={{ fontSize: 10, textAlign: \"center\" }}>\n                    {(() => {\n                      if (key === \"item\" && depth[\"respiration\"]) {\n                        return ` ${rangesFromState[\"item\"].respiration.min} -\n                        ${rangesFromState[\"item\"].respiration.max}`;\n                      } else if (key === \"item\" && depth[\"aeration\"]) {\n                        return ` ${rangesFromState[\"item\"].aeration.min} -\n                        ${rangesFromState[\"item\"].aeration.max}`;\n                      } else if (\n                        key === \"item\" &&\n                        !depth[\"aeration\"] &&\n                        !depth[\"aeration\"]\n                      ) {\n                        return ``;\n                      } else {\n                        return `${rangesFromState[key].min} - ${rangesFromState[key].max}`;\n                      }\n                    })()}\n                  </p>\n                  {/* <br /> */}\n\n                  {(() => {\n                    if (key === \"item\" && depth[\"respiration\"]) {\n                      return (\n                        <GridColumn>\n                          <p style={{ fontWeight: \"bold\", margin: 0 }}>\n                            Respiration\n                          </p>\n                          <p style={{ fontSize: 11, padding: \"0 30%\" }}>\n                            (PPM)\n                          </p>\n                        </GridColumn>\n                      );\n                    } else if (key === \"item\" && depth[\"aeration\"]) {\n                      return (\n                        <GridColumn>\n                          <p style={{ fontWeight: \"bold\", margin: 0 }}>\n                            Aeration\n                          </p>\n                          <p\n                            style={{\n                              fontSize: 11,\n                              padding: \"0 30%\",\n                              margin: 0,\n                            }}\n                          >\n                            (%)\n                          </p>\n                        </GridColumn>\n                      );\n                    }\n                  })()}\n                  {/* <Divider style={{ width: \"100%\" }} className=\"p-0 m-0\" /> */}\n                </div>\n              )}\n            </GridColumn>\n          );\n        }\n        table.push(\n          <React.Fragment>\n            <Grid.Row className=\"sensor-row\">{children}</Grid.Row>\n            <Divider style={{ minWidth: \"60vw\" }} className=\"p-0 m-0\" />\n          </React.Fragment>\n        );\n      });\n    }\n\n    return table;\n  };\n\n  render() {\n    const { t, sensor, ranges } = this.props;\n\n    return ranges ? (\n      <Segment\n        style={{ overflowX: \"hidden\", maxHeight: \"85vh\"}}\n        className=\"table\"\n      >\n        <Grid columns={2}>\n          <Grid.Column width={13}>\n            <Grid.Row className=\"my-4 mx-2\">\n              <SensorUpper\n                match={this.props.match}\n                sensor={this.props.sensor}\n                userDevices={this.props.devices.UserDevicesOptions}\n                className=\"m-5\"\n              />\n            </Grid.Row>\n            <Divider style={{ width: \"100vw\" }} className=\"p-0 m-0\" />\n            {sensor ? (\n              <Grid.Row className=\"table m-4 ml-0 pl-0\">\n                <Grid columns={8} rows={4}>\n                  <Grid.Row className=\"header-row\">\n                    <Grid.Column className=\"bold\">\n                      {t(\"common:Nitrogen\")} <br /> <span className = \"unit\">(mg/L)</span>\n                    </Grid.Column>\n                    <Grid.Column className=\"bold\">\n                      {t(\"common:Phosphorus\")} <br /> <span className = \"unit\">(mg/L)</span>\n                    </Grid.Column>\n                    <Grid.Column className=\"bold\">\n                      {t(\"common:Potassium\")} <br /> <span className = \"unit\">(mg/L)</span>\n                    </Grid.Column>\n                    <Grid.Column className=\"bold\">\n                      {t(\"common:Salinity\")} <br /> <span className = \"unit\">(ds/M)</span>\n                    </Grid.Column>\n                    <Grid.Column className=\"bold\">\n                      {t(\"common:SoilTemp\")} <br /> <span className = \"unit\">(&#8451;)</span>\n                    </Grid.Column>\n                    <Grid.Column className=\"bold ph-value\">\n                      {t(\"common:pH\")} <br /> <span className = \"unit\">(pH)</span>\n                    </Grid.Column>\n                    <Grid.Column className=\"bold\">\n                      {t(\"common:Moisture\")} <br /> <span className = \"unit\">(%)</span>\n                    </Grid.Column>\n                    <Grid.Column className=\"bold additional-value\">\n                      {\" \"}\n                      {t(\"common:Additional\")}\n                    </Grid.Column>\n                  </Grid.Row>\n                  {this.createTable()}\n                </Grid>\n              </Grid.Row>\n            ) : (\n              \"\"\n            )}\n          </Grid.Column>\n          {sensor && (\n            <Grid.Column width={3}>\n              <img\n                src={depthSensor}\n                alt=\"depthSensor\"\n                className=\"depthSensorImg\"\n              />\n            </Grid.Column>\n          )}\n        </Grid>\n      </Segment>\n    ) : (\n      <div style={{ textAlign: \"center\", margin: \"1rem 0\" }}>\n        <p className=\"p-0 m-2\">No sensors data found</p>\n        <Link className=\"p-0 m-0\" to=\"/addDevice\">\n          <MainButton style={{ textAlign: \"center\", width: \"15vw\" }}>\n            ADD A NEW DEVICE\n          </MainButton>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst SensorTableComponent = withTranslation()(SensorTable);\n\nexport default SensorTableComponent;\n"]},"metadata":{},"sourceType":"module"}