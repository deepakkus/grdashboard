{"ast":null,"code":"import { ADD_CROPCYCLE, ADD_CROPCYCLE_ERROR, SET_CROPCYCLES, SET_SORTEDCROPCYCLES, GET_CROPCYCLES_ERROR, GET_USER_FARM_CROPCYCLES, GET_USER_FARM_CROPCYCLES_ERROR, UPDATE_CROPCYCLE, UPDATE_CROPCYCLE_ERROR } from \"../actions/types\";\nconst initialState = {\n  userCropCycles: [],\n  userCurrentCropCycles: [],\n  userPastCropCycles: [],\n  userFarmCropCycle: [],\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case ADD_CROPCYCLE:\n      return { ...state,\n        userCurrentCropCycles: state.userCurrentCropCycles.find(f => f._id === payload._id) ? state.userCurrentCropCycles.map(f => f._id === payload._id ? payload : f) : [...state.userCurrentCropCycles, payload],\n        loading: false\n      };\n\n    case ADD_CROPCYCLE_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case SET_SORTEDCROPCYCLES:\n      {\n        const past = [];\n        const current = [];\n        payload.map(listOfFarms => {\n          listOfFarms.map(cropCycle => {\n            cropCycle.isPast ? past.push(cropCycle) : current.push(cropCycle);\n          });\n        });\n        return { ...state,\n          userCurrentCropCycles: current,\n          userPastCropCycles: past\n        };\n      }\n\n    case SET_CROPCYCLES:\n      return { ...state,\n        userCropCycles: payload\n      };\n\n    case GET_CROPCYCLES_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case GET_USER_FARM_CROPCYCLES:\n      return { ...state,\n        userFarmCropCycle: payload\n      };\n\n    case GET_USER_FARM_CROPCYCLES_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_CROPCYCLE:\n      {\n        const cropToMove = state.userCurrentCropCycles.find(item => item._id === payload._id);\n        cropToMove.isPast = payload.isPast; // const cropRemoved = state.userCurrentCropCycles.filter(crop => {\n        //     return crop._id !== presentCropId\n        // })\n        // const cropAdded = [...state.userPastCropCycles, cropToMove]\n        // if(cropToMove){\n        //     this.setState({userCropCurrentList: cropRemoved})\n        //     this.setState({userCropPastList: cropAdded})\n        // }\n        // else{\n        //     console.log(presentCropId)\n        // } \n\n        return { ...state,\n          userCurrentCropCycles: state.userCurrentCropCycles.filter(crop => {\n            return crop._id !== payload._id;\n          }),\n          userPastCropCycles: [...state.userPastCropCycles, cropToMove]\n        };\n      }\n      ;\n\n    case UPDATE_CROPCYCLE_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/reducers/cropCycles.js"],"names":["ADD_CROPCYCLE","ADD_CROPCYCLE_ERROR","SET_CROPCYCLES","SET_SORTEDCROPCYCLES","GET_CROPCYCLES_ERROR","GET_USER_FARM_CROPCYCLES","GET_USER_FARM_CROPCYCLES_ERROR","UPDATE_CROPCYCLE","UPDATE_CROPCYCLE_ERROR","initialState","userCropCycles","userCurrentCropCycles","userPastCropCycles","userFarmCropCycle","error","state","action","type","payload","find","f","_id","map","loading","past","current","listOfFarms","cropCycle","isPast","push","cropToMove","item","filter","crop"],"mappings":"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","sourcesContent":["import {\n  ADD_CROPCYCLE,\n  ADD_CROPCYCLE_ERROR,\n  SET_CROPCYCLES,\n  SET_SORTEDCROPCYCLES,\n  GET_CROPCYCLES_ERROR,\n  GET_USER_FARM_CROPCYCLES,\n  GET_USER_FARM_CROPCYCLES_ERROR,\n  UPDATE_CROPCYCLE,\n  UPDATE_CROPCYCLE_ERROR\n} from \"../actions/types\";\n\nconst initialState = {\n  userCropCycles: [],\n  userCurrentCropCycles: [],\n  userPastCropCycles: [],\n  userFarmCropCycle: [],\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case ADD_CROPCYCLE:\n      return {\n        ...state,\n        userCurrentCropCycles: state.userCurrentCropCycles.find((f) => f._id === payload._id)\n          ? state.userCurrentCropCycles.map((f) => (f._id === payload._id ? payload : f))\n          : [...state.userCurrentCropCycles, payload],\n        loading: false,\n      };\n    case ADD_CROPCYCLE_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    case SET_SORTEDCROPCYCLES: {\n      const past = [];\n      const current = [];\n      payload.map((listOfFarms) => {\n        listOfFarms.map((cropCycle) => {\n          cropCycle.isPast ? past.push(cropCycle) : current.push(cropCycle);\n        });\n      });\n      return {\n        ...state,\n        userCurrentCropCycles: current,\n        userPastCropCycles: past,\n      };\n    }\n    case SET_CROPCYCLES:\n      return {\n        ...state,\n        userCropCycles: payload,\n      };\n    case GET_CROPCYCLES_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    case GET_USER_FARM_CROPCYCLES:\n      return {\n        ...state,\n        userFarmCropCycle: payload,\n      };\n    case GET_USER_FARM_CROPCYCLES_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n      case UPDATE_CROPCYCLE:\n        {\n          const cropToMove = state.userCurrentCropCycles.find(item => item._id === payload._id);\n          cropToMove.isPast = payload.isPast;\n          // const cropRemoved = state.userCurrentCropCycles.filter(crop => {\n          //     return crop._id !== presentCropId\n          // })\n          // const cropAdded = [...state.userPastCropCycles, cropToMove]\n          // if(cropToMove){\n          //     this.setState({userCropCurrentList: cropRemoved})\n          //     this.setState({userCropPastList: cropAdded})\n          // }\n          // else{\n          //     console.log(presentCropId)\n          // } \n          return {\n            ...state,\n            userCurrentCropCycles: state.userCurrentCropCycles.filter(crop => {\n              return crop._id !== payload._id\n          }),\n            userPastCropCycles: [...state.userPastCropCycles, cropToMove],\n          };  \n        };\n        case UPDATE_CROPCYCLE_ERROR:\n          return {\n            ...state,\n            error: payload,\n            loading: false,\n          };  \n  \n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}