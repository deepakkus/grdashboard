{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/SettingsList/SettingsList.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./SettingsListStyles.scss\";\nimport { Segment, Grid } from \"semantic-ui-react\";\nimport { calculateArea } from \"../../utils/utilsFunctions\";\nimport MapPolygon from \"../MapPolygon/MapPolygon\";\nimport fieldCorrectPic from \"../../images/xd/fieldCorrectPic.svg\";\n\nconst SettingsList = props => {\n  const {\n    userId,\n    token,\n    userFarms,\n    getIdealRange,\n    lookup\n  } = props;\n  const [fieldId, setFieldId] = useState(\"\");\n  let fieldOptions = [];\n  const firstFarm = userFarms[0]; // const [farm] = userFarms.filter((farm) => farm._id === fieldId)\n  // const fieldArea = calculateArea(farm ? [farm.location] : []) * 0.000247105;\n  // const firstFieldArea =\n  // calculateArea(firstFarm ? [firstFarm.location] : []) * 0.000247105;\n  // console.log(fieldId)\n\n  const userFields = userFarms.length > 0 ? userFarms.map(farm => {\n    console.log(farm);\n    let polygon = farm.location;\n    let center = farm.address.location;\n    let soiltypes = lookup.soiltypes.filter(soiltype => soiltype._id === farm.soilTypeId);\n    let watersources = lookup.watersources.filter(watersource => watersource._id === farm.waterSourceId);\n    let terraintypes = lookup.terraintypes.filter(terrain => terrain._id === farm.terrainTypeId);\n    console.log(soiltypes); // console.log(watersource)\n\n    return /*#__PURE__*/React.createElement(Segment, {\n      inverted: true,\n      className: \"user-fields\",\n      key: farm._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      columns: 2,\n      className: \"mx-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      className: \"fieldImg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: fieldCorrectPic,\n      className: \"Img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fieldHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 37\n      }\n    }, farm.farmName)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 37\n      }\n    }, \"EDIT\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fieldUpper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 37\n      }\n    }, \"Location:\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 37\n      }\n    }, \"Size:\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 37\n      }\n    }, \"DELETE\"))))), /*#__PURE__*/React.createElement(Grid.Row, {\n      columns: 4,\n      className: \"fieldBottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"fielDetails-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, \"Crop: \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 48\n      }\n    }, \"Uncultivated\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"fielDetails-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 29\n      }\n    }, \"Water Source: \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 56\n      }\n    }, watersources[0].name)), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"fielDetails-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, \"Soil Type: \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 53\n      }\n    }, soiltypes[0].name)), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"fielDetails-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }\n    }, \"Terrain Type: \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 56\n      }\n    }, terraintypes[0].name)))));\n  }) : null;\n  return userFields;\n};\n\nexport default SettingsList; // const fillData = (newData) =>\n//     {\n//         newData.forEach((element) =>\n//         {\n//             fieldOptions.push({\n//                 text: element.farmName,\n//                 id: element._id,\n//                 value: element._id\n//             });\n//         });\n//     }","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/SettingsList/SettingsList.js"],"names":["React","useState","useEffect","Segment","Grid","calculateArea","MapPolygon","SettingsList","props","userId","token","userFarms","getIdealRange","lookup","fieldId","setFieldId","fieldOptions","firstFarm","userFields","length","map","farm","console","log","polygon","location","center","address","soiltypes","filter","soiltype","_id","soilTypeId","watersources","watersource","waterSourceId","terraintypes","terrain","terrainTypeId","fieldCorrectPic","farmName","name"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from \"react\"\nimport \"./SettingsListStyles.scss\" \nimport {Segment, Grid} from \"semantic-ui-react\"\nimport {calculateArea} from \"../../utils/utilsFunctions\"\nimport MapPolygon from \"../MapPolygon/MapPolygon\"\nimport fieldCorrectPic from \"../../images/xd/fieldCorrectPic.svg\"\n\nconst SettingsList = (props) =>\n{\n    const {userId, token, userFarms, getIdealRange, lookup} = props;\n    const [fieldId, setFieldId] = useState(\"\");\n    let fieldOptions = [];\n    \n    const firstFarm = userFarms[0];\n    // const [farm] = userFarms.filter((farm) => farm._id === fieldId)\n    \n    // const fieldArea = calculateArea(farm ? [farm.location] : []) * 0.000247105;\n    // const firstFieldArea =\n    // calculateArea(firstFarm ? [firstFarm.location] : []) * 0.000247105;\n    // console.log(fieldId)\n    \n    const userFields = userFarms.length > 0 ? userFarms.map(farm => {\n        console.log(farm)\n        \n        let polygon =  farm.location\n        let center =  farm.address.location\n        let soiltypes = lookup.soiltypes.filter((soiltype) => soiltype._id === farm.soilTypeId)\n        let watersources = lookup.watersources.filter((watersource) => watersource._id === farm.waterSourceId)\n        let terraintypes = lookup.terraintypes.filter((terrain) => terrain._id === farm.terrainTypeId)\n        console.log(soiltypes)\n        // console.log(watersource)\n\n        return(\n            <Segment inverted className=\"user-fields\" key = {farm._id}>\n                <Grid>\n                    <Grid.Row columns = {2} className = \"mx-0\">\n                        {/* <MapPolygon editable = {false} polygon = {polygon} center = {center}/> */}\n                        <Grid.Column width = {3} className = \"fieldImg\"><img src = {fieldCorrectPic} className = \"Img\"/></Grid.Column>\n                        <Grid.Column width = {13}>\n                            <div className = \"fieldHeading\">\n                                <div>\n                                    <h5>\n                                        {farm.farmName}\n                                    </h5>\n                                </div>\n                                <div>\n                                    <h5>\n                                        EDIT\n                                    </h5>\n                                </div>\n                            </div>\n                            <div className = \"fieldUpper\">\n                                <div>\n                                    <span>\n                                        Location:\n                                    </span>\n                                </div>\n                                <div>\n                                    <span>\n                                        Size:\n                                    </span>\n                                </div>\n                                <div>\n                                    <span>\n                                        DELETE\n                                    </span>\n                                </div>\n                            </div>\n                            \n                            \n                            \n                            \n                            {/* <h5>\n                                Location: <span>{`${farm.address.location[0].toFixed(2)}`} Lat {`${farm.address.location[1].toFixed(2)}`} Long</span>\n                            </h5>                             */}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row columns = {4} className = \"fieldBottom\">\n                        <Grid.Column className = \"fielDetails-bottom\">\n                            <span>Crop: </span><span>Uncultivated</span>\n                        </Grid.Column>\n                        <Grid.Column className = \"fielDetails-bottom\">\n                            <span>Water Source: </span><span>{watersources[0].name}</span>\n                            {/* {watersources[0].name} */}\n                        </Grid.Column>\n                        <Grid.Column className = \"fielDetails-bottom\">\n                            <span>Soil Type: </span><span>{soiltypes[0].name}</span>\n                        </Grid.Column>\n                        <Grid.Column className = \"fielDetails-bottom\">\n                            <span>Terrain Type: </span><span>{terraintypes[0].name}</span>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n        )\n    })\n    :null\n    return(\n        userFields\n    )\n\n}\n    \n\n\n\nexport default SettingsList;\n\n\n\n// const fillData = (newData) =>\n//     {\n//         newData.forEach((element) =>\n//         {\n//             fieldOptions.push({\n//                 text: element.farmName,\n//                 id: element._id,\n//                 value: element._id\n//             });\n//         });\n//     }\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}