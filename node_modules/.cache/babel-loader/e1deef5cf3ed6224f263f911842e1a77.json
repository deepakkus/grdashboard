{"ast":null,"code":"import _toConsumableArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ADD_CROPCYCLE,ADD_CROPCYCLE_ERROR,SET_CROPCYCLES,SET_SORTEDCROPCYCLES,GET_CROPCYCLES_ERROR,GET_USER_FARM_CROPCYCLES,GET_USER_FARM_CROPCYCLES_ERROR,UPDATE_CROPCYCLE,UPDATE_CROPCYCLE_ERROR}from\"../actions/types\";var initialState={userCropCycles:[],userCurrentCropCycles:[],userPastCropCycles:[],userFarmCropCycle:[],error:{}};export default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var type=action.type,payload=action.payload;switch(type){case ADD_CROPCYCLE:return _objectSpread(_objectSpread({},state),{},{userCurrentCropCycles:state.userCurrentCropCycles.find(function(f){return f._id===payload._id;})?state.userCurrentCropCycles.map(function(f){return f._id===payload._id?payload:f;}):[].concat(_toConsumableArray(state.userCurrentCropCycles),[payload]),loading:false});case ADD_CROPCYCLE_ERROR:return _objectSpread(_objectSpread({},state),{},{error:payload,loading:false});case SET_SORTEDCROPCYCLES:{var past=[];var current=[];payload.map(function(listOfFarms){listOfFarms.map(function(cropCycle){cropCycle.isPast?past.push(cropCycle):current.push(cropCycle);});});return _objectSpread(_objectSpread({},state),{},{userCurrentCropCycles:current,userPastCropCycles:past});}case SET_CROPCYCLES:return _objectSpread(_objectSpread({},state),{},{userCropCycles:payload});case GET_CROPCYCLES_ERROR:return _objectSpread(_objectSpread({},state),{},{error:payload,loading:false});case GET_USER_FARM_CROPCYCLES:return _objectSpread(_objectSpread({},state),{},{userFarmCropCycle:payload});case GET_USER_FARM_CROPCYCLES_ERROR:return _objectSpread(_objectSpread({},state),{},{error:payload,loading:false});case UPDATE_CROPCYCLE:{var cropToMove=state.userCurrentCropCycles.find(function(item){return item._id===payload._id;});cropToMove.isPast=payload.isPast;// const cropRemoved = state.userCurrentCropCycles.filter(crop => {\n//     return crop._id !== presentCropId\n// })\n// const cropAdded = [...state.userPastCropCycles, cropToMove]\n// if(cropToMove){\n//     this.setState({userCropCurrentList: cropRemoved})\n//     this.setState({userCropPastList: cropAdded})\n// }\n// else{\n//     console.log(presentCropId)\n// } \nreturn _objectSpread(_objectSpread({},state),{},{userCurrentCropCycles:state.userCurrentCropCycles.filter(function(crop){return crop._id!==payload._id;}),userPastCropCycles:[].concat(_toConsumableArray(state.userPastCropCycles),[cropToMove])});};case UPDATE_CROPCYCLE_ERROR:return _objectSpread(_objectSpread({},state),{},{error:payload,loading:false});default:return state;}}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/reducers/cropCycles.js"],"names":["ADD_CROPCYCLE","ADD_CROPCYCLE_ERROR","SET_CROPCYCLES","SET_SORTEDCROPCYCLES","GET_CROPCYCLES_ERROR","GET_USER_FARM_CROPCYCLES","GET_USER_FARM_CROPCYCLES_ERROR","UPDATE_CROPCYCLE","UPDATE_CROPCYCLE_ERROR","initialState","userCropCycles","userCurrentCropCycles","userPastCropCycles","userFarmCropCycle","error","state","action","type","payload","find","f","_id","map","loading","past","current","listOfFarms","cropCycle","isPast","push","cropToMove","item","filter","crop"],"mappings":"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","sourcesContent":["import {\n  ADD_CROPCYCLE,\n  ADD_CROPCYCLE_ERROR,\n  SET_CROPCYCLES,\n  SET_SORTEDCROPCYCLES,\n  GET_CROPCYCLES_ERROR,\n  GET_USER_FARM_CROPCYCLES,\n  GET_USER_FARM_CROPCYCLES_ERROR,\n  UPDATE_CROPCYCLE,\n  UPDATE_CROPCYCLE_ERROR\n} from \"../actions/types\";\n\nconst initialState = {\n  userCropCycles: [],\n  userCurrentCropCycles: [],\n  userPastCropCycles: [],\n  userFarmCropCycle: [],\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case ADD_CROPCYCLE:\n      return {\n        ...state,\n        userCurrentCropCycles: state.userCurrentCropCycles.find((f) => f._id === payload._id)\n          ? state.userCurrentCropCycles.map((f) => (f._id === payload._id ? payload : f))\n          : [...state.userCurrentCropCycles, payload],\n        loading: false,\n      };\n    case ADD_CROPCYCLE_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    case SET_SORTEDCROPCYCLES: {\n      const past = [];\n      const current = [];\n      payload.map((listOfFarms) => {\n        listOfFarms.map((cropCycle) => {\n          cropCycle.isPast ? past.push(cropCycle) : current.push(cropCycle);\n        });\n      });\n      return {\n        ...state,\n        userCurrentCropCycles: current,\n        userPastCropCycles: past,\n      };\n    }\n    case SET_CROPCYCLES:\n      return {\n        ...state,\n        userCropCycles: payload,\n      };\n    case GET_CROPCYCLES_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    case GET_USER_FARM_CROPCYCLES:\n      return {\n        ...state,\n        userFarmCropCycle: payload,\n      };\n    case GET_USER_FARM_CROPCYCLES_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n      case UPDATE_CROPCYCLE:\n        {\n          const cropToMove = state.userCurrentCropCycles.find(item => item._id === payload._id);\n          cropToMove.isPast = payload.isPast;\n          // const cropRemoved = state.userCurrentCropCycles.filter(crop => {\n          //     return crop._id !== presentCropId\n          // })\n          // const cropAdded = [...state.userPastCropCycles, cropToMove]\n          // if(cropToMove){\n          //     this.setState({userCropCurrentList: cropRemoved})\n          //     this.setState({userCropPastList: cropAdded})\n          // }\n          // else{\n          //     console.log(presentCropId)\n          // } \n          return {\n            ...state,\n            userCurrentCropCycles: state.userCurrentCropCycles.filter(crop => {\n              return crop._id !== payload._id\n          }),\n            userPastCropCycles: [...state.userPastCropCycles, cropToMove],\n          };  \n        };\n        case UPDATE_CROPCYCLE_ERROR:\n          return {\n            ...state,\n            error: payload,\n            loading: false,\n          };  \n  \n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}