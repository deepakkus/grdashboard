{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/CropManagement/addcropform.js\";\nimport React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Modal, Button, Grid } from 'semantic-ui-react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Chip from '@material-ui/core/Chip';\nimport Select from '@material-ui/core/Select';\nimport MapPolygon from '../MapPolygon/MapPolygon';\nimport { withTranslation } from 'react-i18next';\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport './addcropform.scss'; //import axios from 'axios';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#fff\",\n      main: \"#67bc46\",\n      dark: \"#000\"\n    },\n    secondary: {\n      main: \"#1A960A\"\n    }\n  },\n  typography: {\n    useNextVariants: true\n  },\n  textField: {\n    color: \"green\",\n    '&:hover': {\n      backgroundColor: 'green'\n    },\n    '&$focused': {\n      backgroundColor: 'green',\n      boxShadow: 'green 0.25 0 0 0 2px',\n      borderColor: 'green'\n    }\n  },\n  checkbox: {\n    color: 'green',\n    '&$checked': {\n      color: 'green'\n    }\n  }\n});\n\nclass AddCropForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errorMsg: false,\n      // snackbarOpen: false,\n      cropType: this.props.cropTypes ? this.props.croptypes[0]._id : null,\n      seedType: this.props.seedTypes ? this.props.seedtypes[0]._id : null,\n      cultivationType: this.props.cultivationTypes ? this.props.cultivationtypes[0]._id : null,\n      startDate: null,\n      endDate: null,\n      confirmed: false,\n      dateError: false,\n      chips: [],\n      field: this.props.fieldId ? this.props.fieldId : null,\n      polygon: null,\n      //=  props.userFarms.location\n      center: null //=  props.userFarms.address.location\n\n    };\n\n    this.handleFieldChange = e => {\n      this.setState({\n        field: e.target.value,\n        polygon: this.props.fields.find(field => e.target.value === field._id).location,\n        center: this.props.fields.find(field => e.target.value === field._id).address.location\n      });\n    };\n\n    this.handleCropChange = e => {\n      this.setState({\n        cropType: e.target.value\n      });\n    };\n\n    this.handleSeedChange = e => {\n      this.setState({\n        seedType: e.target.value\n      });\n    };\n\n    this.handleStartDateChange = e => {\n      this.setState({\n        startDate: e.target.value\n      });\n    };\n\n    this.handleEndDateChange = e => {\n      this.setState({\n        endDate: e.target.value\n      });\n    };\n\n    this.handleCultivationChange = e => {\n      this.setState({\n        cultivationType: e.target.value\n      });\n    };\n\n    this.handleSnackbarClose = () => {\n      // if (reason === 'clickaway') {\n      //     return;\n      //   }      \n      this.setstate({\n        snackbarOpen: false\n      });\n    };\n\n    this.handleCheckBoxChange = () => {\n      if (this.state.startDate < this.state.endDate) {\n        this.setState({\n          confirmed: true\n        });\n      } else {\n        this.setState({\n          confirmed: false\n        });\n      }\n    };\n\n    this.addChip = chip => {\n      const chips = this.state.chips;\n      chips.push(chip);\n      this.setState(chips);\n    };\n\n    this.handleDeleteChip = chip => {\n      const chips = this.state.chips.filter(item => {\n        return item !== chip;\n      });\n      this.setState({\n        chips\n      });\n    };\n\n    this.handleAddCropSeed = () => {\n      let chip = {};\n\n      if (this.state.cropType && this.state.seedType) {\n        chip = {\n          id: this.state.chips.length + 1,\n          crop: this.props.croptypes.find(crop => crop._id === this.state.cropType).name,\n          seed: this.props.seedtypes.find(seed => seed._id === this.state.seedType).name\n        };\n      }\n\n      const boolFound = this.state.chips.find(item => item.crop === chip.crop ? item.seed === chip.seed ? true : false : false);\n      if (!boolFound && chip.id) this.addChip(chip);\n    };\n\n    this.handleClose = () => {\n      this.props.changeDialogDisp();\n      this.setState({\n        errorMsg: false,\n        // snackbarOpen: false,\n        cropType: this.props.cropTypes ? this.props.croptypes[0]._id : \"\",\n        seedType: this.props.seedTypes ? this.props.seedtypes[0]._id : \"\",\n        cultivationType: this.props.cultivationTypes ? this.props.cultivationtypes[0]._id : \"\",\n        startDate: \"\",\n        endDate: \"\",\n        confirmed: false,\n        dateError: false,\n        chips: [],\n        field: null,\n        polygon: null,\n        //=  props.userFarms.location\n        center: null //=  props.userFarms.address.location        \n\n      });\n    };\n\n    this.handleSubmit = () => {\n      if (this.state.confirmed) {\n        this.props.changeDialogDisp();\n        const listCropSeed = [];\n        this.state.chips.map(chip => {\n          listCropSeed.push({\n            cropId: this.props.croptypes.find(crop => crop.name === chip.crop)._id,\n            seedId: this.props.seedtypes.find(seed => seed.name === chip.seed)._id\n          });\n        });\n        const cropCycle = {\n          cropSeeds: listCropSeed,\n          startDate: this.state.startDate,\n          endDate: this.state.endDate,\n          farmId: this.state.field,\n          cultivationId: this.state.cultivationType,\n          isPast: false\n        };\n        this.props.onSubmit(cropCycle);\n        this.setState({\n          errorMsg: false,\n          // snackbarOpen: false,\n          cropType: this.props.cropTypes ? this.props.croptypes[0]._id : \"\",\n          seedType: this.props.seedTypes ? this.props.seedtypes[0]._id : \"\",\n          cultivationType: this.props.cultivationTypes ? this.props.cultivationtypes[0]._id : \"\",\n          startDate: \"\",\n          endDate: \"\",\n          confirmed: false,\n          dateError: false,\n          chips: [],\n          field: null,\n          polygon: null,\n          //=  props.userFarms.location\n          center: null //=  props.userFarms.address.location        \n\n        });\n      } else {\n        this.setState({\n          errorMsg: true\n        });\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.props.croptypes && !this.state.cropType) {\n      this.setState({\n        cropType: this.props.croptypes ? this.props.croptypes[0]._id : ''\n      });\n    }\n\n    if (this.props.seedtypes && !this.state.seedType) {\n      this.setState({\n        seedType: this.props.seedtypes ? this.props.seedtypes[0]._id : ''\n      });\n    }\n\n    if (this.props.cultivationtypes && !this.state.cultivationType) {\n      this.setState({\n        cultivationType: this.props.cultivationtypes ? this.props.cultivationtypes[0]._id : ''\n      });\n    }\n\n    if (this.props.fields && !this.state.field) {\n      this.setState({\n        field: this.props.fields ? this.props.fields[0]._id : ''\n      });\n    }\n\n    if (this.state.field && !this.state.center && !this.state.polygon) {\n      this.setState({\n        polygon: this.props.fields.find(field => field._id === this.state.field).location,\n        center: this.props.fields.find(field => field._id === this.state.field).address.location\n      });\n    }\n\n    if (this.state.startDate && this.state.endDate) {\n      if (this.state.endDate < this.state.startDate && this.state.dateError === false) {\n        this.setState({\n          dateError: true,\n          confirmed: false\n        });\n      }\n\n      if (this.state.endDate > this.state.startDate && this.state.dateError === true) {\n        this.setState({\n          dateError: false\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      t\n    } = this.props;\n    return /*#__PURE__*/React.createElement(MuiThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      open: this.props.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, t('cc-form-title')), /*#__PURE__*/React.createElement(Modal.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      className: \"farmFields mr-4 mt-2 w-50\",\n      defaultValue: this.props.fieldId,\n      onChange: this.handleFieldChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, this.props.fields ? this.props.fields.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option._id,\n      value: option._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 25\n      }\n    }, option.farmName)) : /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 32\n      }\n    }, t('empty-option'))), /*#__PURE__*/React.createElement(MapPolygon, {\n      editable: false,\n      polygon: this.state.polygon,\n      center: this.state.center,\n      className: \"mapCrop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"outlined-select-crop\",\n      label: t('crop-label'),\n      select: true,\n      defaultValue: this.props.croptypes[0] ? this.props.croptypes[0]._id : \"Select a Crop\",\n      onChange: this.handleCropChange,\n      variant: \"outlined\",\n      className: \"mr-4 ml-4 mt-2 w-25\",\n      helperText: t('crop-helper'),\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }, this.props.croptypes ? this.props.croptypes.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option._id,\n      value: option._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 29\n      }\n    }, option.name)) : /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 36\n      }\n    }, t('empty-option'))), /*#__PURE__*/React.createElement(TextField, {\n      id: \"outlined-select-seed\",\n      label: t('seed-label'),\n      select: true,\n      className: \"mr-4 ml-4 mt-2 w-25\",\n      variant: \"outlined\",\n      defaultValue: this.props.seedtypes[0] ? this.props.seedtypes[0]._id : \"\",\n      helperText: t('seed-helper'),\n      onChange: this.handleSeedChange,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 25\n      }\n    }, this.props.seedtypes ? this.props.seedtypes.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option._id,\n      value: option._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 29\n      }\n    }, option.name)) : /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 36\n      }\n    }, t('empty-option'))), /*#__PURE__*/React.createElement(Button, {\n      className: \"semantic-button\",\n      color: \"green\",\n      onClick: this.handleAddCropSeed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 25\n      }\n    }, t('add-crop'))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }\n    }, this.state.chips.map(chip => /*#__PURE__*/React.createElement(Chip, {\n      key: chip.id,\n      className: \"ml-4 my-3\",\n      size: \"small\" //icon={}\n      ,\n      label: chip.crop + \": \" + chip.seed,\n      onDelete: () => this.handleDeleteChip(chip),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"sdate\",\n      label: t('starting-date-label'),\n      type: \"date\",\n      className: \"mr-4 ml-4 mt-2 w-25\" //defaultValue={new Date().toLocaleDateString()}\n      ,\n      variant: \"outlined\",\n      helperText: t('starting-date-helper'),\n      onChange: this.handleStartDateChange,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      error: true,\n      id: \"edate\",\n      label: t('endDatelabel'),\n      type: \"date\",\n      className: \"mr-4 ml-4 mt-2 w-25\" // defaultValue={new Date()}\n      ,\n      error: this.state.dateError,\n      variant: \"outlined\",\n      onChange: this.handleEndDateChange,\n      helperText: t('ending-date-error'),\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"outlined-select-cultivation\",\n      label: t('cultivationlabel'),\n      select: true,\n      variant: \"outlined\",\n      className: \"mr-4 ml-4 mt-2 w-25\",\n      defaultValue: this.props.cultivationtypes[0] ? this.props.cultivationtypes[0]._id : \"\",\n      helperText: t('cultivation-helper'),\n      onChange: this.handleCultivationChange,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }\n    }, this.props.cultivationtypes ? this.props.cultivationtypes.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option._id,\n      value: option._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 25\n      }\n    }, option.name)) : /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 32\n      }\n    }, t('empty-option'))), /*#__PURE__*/React.createElement(FormControlLabel, {\n      className: \"mr-4 ml-4 w-50\",\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: this.state.confirmed,\n        onChange: this.handleCheckBoxChange,\n        name: \"checked\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 34\n        }\n      }),\n      label: t('cc-form-checkbox'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }\n    }, this.state.errorMsg ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        position: 'absolute',\n        color: 'red',\n        left: '25%',\n        right: '25%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 45\n      }\n    }, \" \", t('ccuncheckederror'), \" \") : \"\")))), /*#__PURE__*/React.createElement(Modal.Actions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"gray\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }\n    }, t('cancel')), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleSubmit,\n      color: \"green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }\n    }, t('submit')))));\n  }\n\n}\n\nexport default withTranslation(\"crop-management\")(AddCropForm);","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/CropManagement/addcropform.js"],"names":["React","Component","TextField","MenuItem","Modal","Button","Grid","Checkbox","FormControlLabel","Chip","Select","MapPolygon","withTranslation","MuiThemeProvider","createMuiTheme","theme","palette","primary","light","main","dark","secondary","typography","useNextVariants","textField","color","backgroundColor","boxShadow","borderColor","checkbox","AddCropForm","state","errorMsg","cropType","props","cropTypes","croptypes","_id","seedType","seedTypes","seedtypes","cultivationType","cultivationTypes","cultivationtypes","startDate","endDate","confirmed","dateError","chips","field","fieldId","polygon","center","handleFieldChange","e","setState","target","value","fields","find","location","address","handleCropChange","handleSeedChange","handleStartDateChange","handleEndDateChange","handleCultivationChange","handleSnackbarClose","setstate","snackbarOpen","handleCheckBoxChange","addChip","chip","push","handleDeleteChip","filter","item","handleAddCropSeed","id","length","crop","name","seed","boolFound","handleClose","changeDialogDisp","handleSubmit","listCropSeed","map","cropId","seedId","cropCycle","cropSeeds","farmId","cultivationId","isPast","onSubmit","componentDidUpdate","render","t","open","position","option","farmName","shrink","left","right"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {Modal, Button, Grid} from 'semantic-ui-react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Chip from '@material-ui/core/Chip';\nimport Select from '@material-ui/core/Select';\nimport MapPolygon from '../MapPolygon/MapPolygon';\nimport { withTranslation } from 'react-i18next';\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport './addcropform.scss';\n//import axios from 'axios';\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: {\n        light: \"#fff\",\n        main: \"#67bc46\",\n        dark: \"#000\",\n      },\n      secondary: {\n        main: \"#1A960A\",\n      },\n    },\n    typography: {\n      useNextVariants: true,\n    },\n        textField: {\n        color: \"green\",    \n        '&:hover': {\n                backgroundColor: 'green',\n          },\n          '&$focused': {\n            backgroundColor: 'green',\n            boxShadow: 'green 0.25 0 0 0 2px',\n            borderColor: 'green',\n          }\n    },\n    checkbox: {\n        color: 'green',\n        '&$checked': {\n          color: 'green',\n        },\n      }\n  });\n\nclass AddCropForm extends Component {\n\n    state= {\n        errorMsg: false,\n        // snackbarOpen: false,\n        cropType: this.props.cropTypes ? (this.props.croptypes[0]._id) : null,\n        seedType: this.props.seedTypes ? (this.props.seedtypes[0]._id) : null,\n        cultivationType: this.props.cultivationTypes ? (this.props.cultivationtypes[0]._id) : null,\n        startDate: null,\n        endDate: null,\n        confirmed: false,\n        dateError: false,\n        chips: [],\n        field: this.props.fieldId ? this.props.fieldId : null,\n        polygon: null, //=  props.userFarms.location\n        center: null//=  props.userFarms.address.location\n    }\n\n    handleFieldChange = (e) => {\n        this.setState({field: e.target.value,\n            polygon: this.props.fields.find(field => e.target.value === field._id).location\n                ,center: this.props.fields.find(field => e.target.value === field._id).address.location\n        });\n    }\n    handleCropChange = (e) => {\n        this.setState({cropType: e.target.value});\n    }\n    handleSeedChange = (e) => {\n        this.setState({seedType: e.target.value});\n    }\n    handleStartDateChange = (e) => {\n        this.setState({startDate: e.target.value});\n    }\n    handleEndDateChange = (e) => {\n        this.setState({endDate: e.target.value});\n    }\n    handleCultivationChange = (e) => {\n        this.setState({cultivationType: e.target.value});\n    }\n    handleSnackbarClose = () => {\n        // if (reason === 'clickaway') {\n        //     return;\n        //   }      \n          this.setstate({snackbarOpen: false})\n    }\n    handleCheckBoxChange = () => {\n        if(this.state.startDate < this.state.endDate){\n            this.setState({confirmed: true})\n        }\n        else{\n            this.setState({confirmed: false})\n        }   \n    }\n    addChip = (chip) => {\n        const chips = this.state.chips;\n        chips.push(chip);\n        this.setState(chips);\n    }\n    handleDeleteChip = (chip) => {\n        const chips = this.state.chips.filter(item => {return item!==chip})\n        this.setState({chips});\n    }\n    handleAddCropSeed = () => {\n        let chip = {}\n        if(this.state.cropType && this.state.seedType){\n            chip = {id: this.state.chips.length+1,\n                crop: this.props.croptypes.find(crop => crop._id === this.state.cropType).name,\n                seed:this.props.seedtypes.find(seed => seed._id === this.state.seedType).name}\n        }\n        const boolFound = this.state.chips.find(item => item.crop === chip.crop ? (\n            item.seed === chip.seed ? (true) : (false)\n        ) \n        : (false))\n        if(!boolFound && chip.id)\n            this.addChip(chip)\n    }\n\n    handleClose = () => {\n        this.props.changeDialogDisp();\n        this.setState({\n            errorMsg: false,\n            // snackbarOpen: false,\n            cropType: this.props.cropTypes ? (this.props.croptypes[0]._id) : (\"\"),\n            seedType: this.props.seedTypes ? (this.props.seedtypes[0]._id) : (\"\"),\n            cultivationType: this.props.cultivationTypes ? (this.props.cultivationtypes[0]._id) : (\"\"),\n            startDate: \"\",\n            endDate: \"\",\n            confirmed: false,\n            dateError: false,\n            chips: [],\n            field: null,\n            polygon: null, //=  props.userFarms.location\n            center: null//=  props.userFarms.address.location        \n          });    \n    };\n\n    handleSubmit = () => {\n        if(this.state.confirmed){\n            this.props.changeDialogDisp();\n            const listCropSeed = []\n            this.state.chips.map(chip => {\n                listCropSeed.push({cropId: this.props.croptypes.find(crop => crop.name === chip.crop)._id\n                    , seedId: this.props.seedtypes.find(seed => seed.name === chip.seed)._id})\n            })\n            const cropCycle = {\n                    cropSeeds: listCropSeed,\n                    startDate: this.state.startDate,\n                    endDate: this.state.endDate,\n                    farmId: this.state.field,\n                    cultivationId: this.state.cultivationType,\n                    isPast: false\n            };\n            this.props.onSubmit(cropCycle);\n              this.setState({\n                errorMsg: false,\n                // snackbarOpen: false,\n                cropType: this.props.cropTypes ? (this.props.croptypes[0]._id) : (\"\"),\n                seedType: this.props.seedTypes ? (this.props.seedtypes[0]._id) : (\"\"),\n                cultivationType: this.props.cultivationTypes ? (this.props.cultivationtypes[0]._id) : (\"\"),\n                startDate: \"\",\n                endDate: \"\",\n                confirmed: false,\n                dateError: false,\n                chips: [],\n                field: null,\n                polygon: null, //=  props.userFarms.location\n                center: null//=  props.userFarms.address.location        \n              });    \n        }\n        else{\n            this.setState({errorMsg: true})\n        }\n    };\n\n    componentDidUpdate(){\n        if(this.props.croptypes && !this.state.cropType){\n            this.setState({cropType: this.props.croptypes ? this.props.croptypes[0]._id : ''})\n        }\n        if(this.props.seedtypes && !this.state.seedType){\n            this.setState({seedType: this.props.seedtypes ?  this.props.seedtypes[0]._id : ''})\n        }\n        if(this.props.cultivationtypes && !this.state.cultivationType){\n            this.setState({cultivationType: this.props.cultivationtypes ?  this.props.cultivationtypes[0]._id : ''})\n        }\n        if(this.props.fields && !this.state.field)\n        {\n            this.setState({field: this.props.fields ?  this.props.fields[0]._id : ''})\n        }\n        if(this.state.field && !this.state.center && !this.state.polygon)\n        {\n            this.setState({polygon: this.props.fields.find(field => field._id === this.state.field).location, \n                center: this.props.fields.find(field => field._id === this.state.field).address.location})\n        }\n        if(this.state.startDate && this.state.endDate){\n            if(this.state.endDate < this.state.startDate && this.state.dateError === false)\n            {\n                this.setState({dateError: true, confirmed: false});\n            }\n                \n            if(this.state.endDate > this.state.startDate && this.state.dateError === true){\n                this.setState({dateError: false});\n            }   \n        }\n    }\n    \n    render(){\n        const {t} = this.props\n    return (\n    <MuiThemeProvider theme={theme}>\n      <Modal open={this.props.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\" style = {{position : \"relative\"}}>\n        <Modal.Header>{t('cc-form-title')}</Modal.Header>\n        <Modal.Content>\n            <Grid columns={2}>\n                <Grid.Column width={4}>\n                    <Select \n                    className=\"farmFields mr-4 mt-2 w-50\"\n                    defaultValue= {this.props.fieldId}\n                    onChange={this.handleFieldChange}\n                    >\n                    {this.props.fields ? \n                        (this.props.fields.map((option) => (\n                        <MenuItem key={option._id} value={option._id}>\n                            {option.farmName}\n                        </MenuItem>\n                        ))) : (<MenuItem disabled>{t('empty-option')}</MenuItem>)}\n                    </Select>            \n            <MapPolygon editable={false} polygon={this.state.polygon} center={this.state.center} className=\"mapCrop\"/>\n            </Grid.Column>\n                <Grid.Column width={12}>\n                    <Grid.Row>\n                        <TextField\n                        id=\"outlined-select-crop\"\n                        label={t('crop-label')}\n                        select\n                        defaultValue={this.props.croptypes[0] ? (this.props.croptypes[0]._id) : (\"Select a Crop\")}\n                        onChange = {this.handleCropChange}\n                        variant=\"outlined\"\n                        className=\"mr-4 ml-4 mt-2 w-25\"\n                        helperText={t('crop-helper')}\n                        InputLabelProps={{\n                        shrink: true,\n                        }}\n                        >\n                            {this.props.croptypes ? \n                            (this.props.croptypes.map((option) => (\n                            <MenuItem key={option._id} value={option._id}>\n                                {option.name}\n                            </MenuItem>\n                            ))) : (<MenuItem disabled>{t('empty-option')}</MenuItem>)}\n\n                        </TextField>\n                        <TextField\n                                id=\"outlined-select-seed\"\n                                label={t('seed-label')}\n                                select\n                                className=\"mr-4 ml-4 mt-2 w-25\"\n                                variant=\"outlined\"\n                                defaultValue={this.props.seedtypes[0] ? (this.props.seedtypes[0]._id) : (\"\")}\n                                helperText={t('seed-helper')}\n                                onChange={this.handleSeedChange}\n                                InputLabelProps={{\n                                shrink: true,\n                                }}\n                        >\n                            {this.props.seedtypes ? \n                            (this.props.seedtypes.map((option) => (\n                            <MenuItem key={option._id} value={option._id}>\n                                {option.name}\n                            </MenuItem>\n                            ))) : (<MenuItem disabled>{t('empty-option')}</MenuItem>)}\n                        </TextField>\n                        <Button className=\"semantic-button\" color='green' onClick={this.handleAddCropSeed}>\n                        {t('add-crop')}\n                        </Button>\n                    </Grid.Row>\n                <Grid.Row>\n                    {this.state.chips.map((chip) => (\n                        <Chip\n                            key= {chip.id}\n                            className= \"ml-4 my-3\"\n                            size=\"small\"\n                            //icon={}\n                            label={chip.crop + \": \"+ chip.seed}\n                            onDelete={() => this.handleDeleteChip(chip)}\n                        />\n                    ))}\n                </Grid.Row>\n                <Grid.Row>\n                    <TextField\n                        id=\"sdate\"\n                        label={t('starting-date-label')}\n                        type=\"date\"\n                        className=\"mr-4 ml-4 mt-2 w-25\"\n                        //defaultValue={new Date().toLocaleDateString()}\n                        variant=\"outlined\"\n                        helperText={t('starting-date-helper')}\n                        onChange={this.handleStartDateChange}\n                        InputLabelProps={{\n                        shrink: true,\n                        }}\n                    />\n                        <TextField error\n                            id=\"edate\"\n                            label={t('endDatelabel')}\n                            type=\"date\"\n                            className=\"mr-4 ml-4 mt-2 w-25\"\n                            // defaultValue={new Date()}\n                            error={this.state.dateError}\n                            variant=\"outlined\"\n                            onChange={this.handleEndDateChange}\n                            helperText={t('ending-date-error')}\n                            InputLabelProps={{\n                            shrink: true\n                            }}\n                        />\n                </Grid.Row>\n                <Grid.Row>\n                    <TextField\n                        id=\"outlined-select-cultivation\"\n                        label={t('cultivationlabel')}\n                        select\n                        variant=\"outlined\"\n                        className=\"mr-4 ml-4 mt-2 w-25\"\n                        defaultValue={this.props.cultivationtypes[0] ? (this.props.cultivationtypes[0]._id) : (\"\")}\n                        helperText={t('cultivation-helper')}\n                        onChange={this.handleCultivationChange}\n                        InputLabelProps={{\n                        shrink: true,\n                        }}\n                    >\n                        {this.props.cultivationtypes ? \n                        (this.props.cultivationtypes.map((option) => (\n                        <MenuItem key={option._id} value={option._id}>\n                        {option.name}\n                        </MenuItem>\n                        ))) : (<MenuItem disabled>{t('empty-option')}</MenuItem>)}\n                    </TextField>\n                    <FormControlLabel\n                        className=\"mr-4 ml-4 w-50\"\n                        control={<Checkbox checked={this.state.confirmed} \n                        onChange={this.handleCheckBoxChange} name=\"checked\" />}\n                        label={t('cc-form-checkbox')}\n                    />\n                </Grid.Row>\n                <Grid.Row>\n                    {this.state.errorMsg ? (<p style={{position: 'absolute', color: 'red', left:'25%', right:'25%'}}> {t('ccuncheckederror')} </p>) : (\"\")}\n                </Grid.Row>\n            </Grid.Column> \n            </Grid>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={this.handleClose} color=\"gray\">\n          {t('cancel')}\n          </Button>\n          <Button onClick={this.handleSubmit} color=\"green\">\n          {t('submit')}\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </MuiThemeProvider>\n );\n}\n}\n\nexport default withTranslation(\"crop-management\")(AddCropForm);"]},"metadata":{},"sourceType":"module"}