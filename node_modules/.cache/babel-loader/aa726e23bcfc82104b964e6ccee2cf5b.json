{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/AddActivityForm/AddActivityForm.js\";\nimport React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Modal, Button, Grid } from \"semantic-ui-react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { withTranslation } from \"react-i18next\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\"; // import './addcropform.scss';\n//import axios from 'axios';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#fff\",\n      main: \"#67bc46\",\n      dark: \"#000\"\n    },\n    secondary: {\n      main: \"#1A960A\"\n    }\n  },\n  typography: {\n    useNextVariants: true\n  },\n  textField: {\n    color: \"green\",\n    \"&:hover\": {\n      backgroundColor: \"green\"\n    },\n    \"&$focused\": {\n      backgroundColor: \"green\",\n      boxShadow: \"green 0.25 0 0 0 2px\",\n      borderColor: \"green\"\n    }\n  },\n  checkbox: {\n    color: \"green\",\n    \"&$checked\": {\n      color: \"green\"\n    }\n  }\n});\n\nclass AddActivityForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activityType: null,\n      cc: null,\n      errorMsg: false,\n      // snackbarOpen: false,\n      logDate: null,\n      description: null,\n      confirmed: false,\n      dateError: false\n    };\n\n    this.handleActivityChange = e => {\n      this.setState({\n        activityType: e.target.value\n      });\n    };\n\n    this.handleCropCycleChange = e => {\n      this.setState({\n        cc: e.target.value\n      });\n    };\n\n    this.handleLogDateChange = e => {\n      this.setState({\n        logDate: e.target.value\n      });\n    };\n\n    this.handleDescriptionChange = e => {\n      this.setState({\n        description: e.target.value\n      });\n    };\n\n    this.handleSnackbarClose = () => {\n      // if (reason === 'clickaway') {\n      //     return;\n      //   }\n      this.setstate({\n        snackbarOpen: false\n      });\n    };\n\n    this.handleCheckBoxChange = () => {\n      if (!this.state.dateError) {\n        this.setState({\n          confirmed: true\n        });\n      }\n    };\n\n    this.handleClose = () => {\n      this.props.changeDialogDisp();\n    };\n\n    this.handleSubmit = () => {\n      if (this.state.confirmed) {\n        this.props.changeDialogDisp();\n        const activity = {\n          logDate: this.state.logDate,\n          cropCycleId: this.state.cc,\n          activityId: this.state.activityType,\n          description: this.state.description\n        };\n        this.props.onSubmit(activity);\n        this.setState({\n          //snackbarOpen: false,\n          activityType: this.props.activityTypes.length ? this.props.activityTypes[0]._id : \"\",\n          cc: this.props.currentCropCycles.length ? this.props.currentCropCycles[0]._id : \"\",\n          description: \"\",\n          logDate: \"\",\n          confirmed: false\n        });\n      } else {\n        this.setState({\n          errorMsg: true\n        });\n      }\n    };\n\n    this.logDateValidation = date => {\n      console.log(\"in logDateVal\");\n\n      if (this.state.cc && this.props.currentCropCycles) {\n        const ccObject = this.props.currentCropCycles.find(cropCycle => cropCycle._id === this.state.cc);\n        return date < ccObject.startDate || date > ccObject.endDate;\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.props.activityTypes.length && !this.state.activityType) {\n      this.setState({\n        activityType: this.props.activityTypes[0]._id\n      });\n    }\n\n    if (this.props.currentCropCycles.length && !this.state.cc) {\n      this.setState({\n        cc: this.props.currentCropCycles[0]._id\n      });\n    }\n\n    if (this.state.logDate && this.props.currentCropCycles && this.state.cc) {\n      const ccObject = this.props.currentCropCycles.find(cropCycle => cropCycle._id === this.state.cc);\n      console.log(\"dateErrorUpdate ccObject is\", ccObject);\n\n      if (this.state.logDate < ccObject.startDate || this.state.logDate > ccObject.endDate) {\n        if (this.state.dateError === false) {\n          this.setState({\n            dateError: true,\n            confirmed: false\n          });\n        }\n      }\n\n      if (this.state.logDate > ccObject.startDate && this.state.logDate < ccObject.endDate && this.state.dateError === true) {\n        this.setState({\n          dateError: false\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      t\n    } = this.props;\n    return /*#__PURE__*/React.createElement(MuiThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      open: this.props.open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }, t(\"act-form-title\")), /*#__PURE__*/React.createElement(Modal.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"outlined-select-activity\",\n      label: t(\"activity-label\"),\n      select: true,\n      defaultValue: this.props.activityTypes[0] ? this.props.activityTypes[0]._id : \"Select Activity\",\n      onChange: this.handleActivityChange,\n      variant: \"outlined\",\n      className: \"mr-4 ml-4 mt-2 w-25\",\n      helperText: t(\"activity-helper\"),\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, this.props.activityTypes ? this.props.activityTypes.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option._id,\n      value: option._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 23\n      }\n    }, option.name)) : /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, t(\"empty-option\"))), /*#__PURE__*/React.createElement(TextField, {\n      id: \"outlined-select-cc\",\n      label: t(\"cc-label\"),\n      select: true,\n      className: \"mr-4 ml-4 mt-2 w-25\",\n      variant: \"outlined\",\n      defaultValue: this.props.currentCropCycles[0] ? this.props.currentCropCycles[0]._id : \"\",\n      helperText: t(\"cc-helper\"),\n      onChange: this.handleCropCycleChange,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, this.props.currentCropCycles ? this.props.currentCropCycles.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option._id,\n      value: option._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 23\n      }\n    }, this.props.userFarms && this.props.userFarms.find(farm => option.farmId === farm._id).farmName)) : /*#__PURE__*/React.createElement(MenuItem, {\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, t(\"empty-option\")))), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      error: true,\n      id: \"logdate\",\n      label: t(\"log-date-label\"),\n      type: \"date\",\n      className: \"mr-4 ml-4 mt-2 w-25\" // defaultValue={new Date()}\n      ,\n      variant: \"outlined\",\n      error: this.state.dateError,\n      shouldDisableDate: this.logDateValidation,\n      onChange: this.handleLogDateChange,\n      helperText: t(\"log-date-error\"),\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"outlined-description\",\n      label: t(\"description-label\"),\n      variant: \"outlined\",\n      className: \"mr-4 ml-4 mt-2 w-25\",\n      helperText: t(\"description-helper\"),\n      onChange: this.handleDescriptionChange,\n      InputLabelProps: {\n        shrink: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      className: \"mr-4 ml-4 w-50\",\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: this.state.confirmed,\n        onChange: this.handleCheckBoxChange,\n        name: \"checked\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }\n      }),\n      label: t(\"cc-form-checkbox\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 15\n      }\n    }, this.state.errorMsg ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        position: \"absolute\",\n        color: \"red\",\n        left: \"25%\",\n        right: \"25%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 19\n      }\n    }, \" \", t(\"ccuncheckederror\"), \" \") : \"\"))), /*#__PURE__*/React.createElement(Modal.Actions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"gray\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }\n    }, t(\"cancel\")), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleSubmit,\n      color: \"green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }\n    }, t(\"submit\")))));\n  }\n\n}\n\nexport default withTranslation(\"add-activity\")(AddActivityForm);","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/AddActivityForm/AddActivityForm.js"],"names":["React","Component","TextField","MenuItem","Modal","Button","Grid","Checkbox","FormControlLabel","withTranslation","MuiThemeProvider","createMuiTheme","theme","palette","primary","light","main","dark","secondary","typography","useNextVariants","textField","color","backgroundColor","boxShadow","borderColor","checkbox","AddActivityForm","state","activityType","cc","errorMsg","logDate","description","confirmed","dateError","handleActivityChange","e","setState","target","value","handleCropCycleChange","handleLogDateChange","handleDescriptionChange","handleSnackbarClose","setstate","snackbarOpen","handleCheckBoxChange","handleClose","props","changeDialogDisp","handleSubmit","activity","cropCycleId","activityId","onSubmit","activityTypes","length","_id","currentCropCycles","logDateValidation","date","console","log","ccObject","find","cropCycle","startDate","endDate","componentDidUpdate","render","t","open","shrink","map","option","name","userFarms","farm","farmId","farmName","position","left","right"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Modal, Button, Grid } from \"semantic-ui-react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { withTranslation } from \"react-i18next\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n// import './addcropform.scss';\n//import axios from 'axios';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#fff\",\n      main: \"#67bc46\",\n      dark: \"#000\",\n    },\n    secondary: {\n      main: \"#1A960A\",\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n  textField: {\n    color: \"green\",\n    \"&:hover\": {\n      backgroundColor: \"green\",\n    },\n    \"&$focused\": {\n      backgroundColor: \"green\",\n      boxShadow: \"green 0.25 0 0 0 2px\",\n      borderColor: \"green\",\n    },\n  },\n  checkbox: {\n    color: \"green\",\n    \"&$checked\": {\n      color: \"green\",\n    },\n  },\n});\n\nclass AddActivityForm extends Component {\n  state = {\n    activityType: null,\n    cc: null,\n    errorMsg: false,\n    // snackbarOpen: false,\n    logDate: null,\n    description: null,\n    confirmed: false,\n    dateError: false,\n  };\n\n  handleActivityChange = (e) => {\n    this.setState({ activityType: e.target.value });\n  };\n  handleCropCycleChange = (e) => {\n    this.setState({ cc: e.target.value });\n  };\n  handleLogDateChange = (e) => {\n    this.setState({ logDate: e.target.value });\n  };\n  handleDescriptionChange = (e) => {\n    this.setState({ description: e.target.value });\n  };\n  handleSnackbarClose = () => {\n    // if (reason === 'clickaway') {\n    //     return;\n    //   }\n    this.setstate({ snackbarOpen: false });\n  };\n  handleCheckBoxChange = () => {\n    if (!this.state.dateError) {\n      this.setState({ confirmed: true });\n    }\n  };\n  handleClose = () => {\n    this.props.changeDialogDisp();\n  };\n  handleSubmit = () => {\n    if (this.state.confirmed) {\n      this.props.changeDialogDisp();\n      const activity = {\n        logDate: this.state.logDate,\n        cropCycleId: this.state.cc,\n        activityId: this.state.activityType,\n        description: this.state.description,\n      };\n      this.props.onSubmit(activity);\n      this.setState({\n        //snackbarOpen: false,\n        activityType: this.props.activityTypes.length\n          ? this.props.activityTypes[0]._id\n          : \"\",\n        cc: this.props.currentCropCycles.length\n          ? this.props.currentCropCycles[0]._id\n          : \"\",\n        description: \"\",\n        logDate: \"\",\n        confirmed: false,\n      });\n    } else {\n      this.setState({ errorMsg: true });\n    }\n  };\n\n  logDateValidation = (date) => {\n    console.log(\"in logDateVal\");\n    if (this.state.cc && this.props.currentCropCycles) {\n      const ccObject = this.props.currentCropCycles.find(\n        (cropCycle) => cropCycle._id === this.state.cc\n      );\n      return date < ccObject.startDate || date > ccObject.endDate;\n    }\n  };\n\n  componentDidUpdate() {\n    if (this.props.activityTypes.length && !this.state.activityType) {\n      this.setState({ activityType: this.props.activityTypes[0]._id });\n    }\n    if (this.props.currentCropCycles.length && !this.state.cc) {\n      this.setState({ cc: this.props.currentCropCycles[0]._id });\n    }\n    if (this.state.logDate && this.props.currentCropCycles && this.state.cc) {\n      const ccObject = this.props.currentCropCycles.find(\n        (cropCycle) => cropCycle._id === this.state.cc\n      );\n      console.log(\"dateErrorUpdate ccObject is\", ccObject);\n      if (\n        this.state.logDate < ccObject.startDate ||\n        this.state.logDate > ccObject.endDate\n      ) {\n        if (this.state.dateError === false) {\n          this.setState({ dateError: true, confirmed: false });\n        }\n      }\n      if (\n        this.state.logDate > ccObject.startDate &&\n        this.state.logDate < ccObject.endDate &&\n        this.state.dateError === true\n      ) {\n        this.setState({ dateError: false });\n      }\n    }\n  }\n\n  render() {\n    const { t } = this.props;\n    return (\n      <MuiThemeProvider theme={theme}>\n        <Modal\n          open={this.props.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <Modal.Header>{t(\"act-form-title\")}</Modal.Header>\n          <Modal.Content>\n            <Grid>\n              <Grid.Row>\n                <TextField\n                  id=\"outlined-select-activity\"\n                  label={t(\"activity-label\")}\n                  select\n                  defaultValue={\n                    this.props.activityTypes[0]\n                      ? this.props.activityTypes[0]._id\n                      : \"Select Activity\"\n                  }\n                  onChange={this.handleActivityChange}\n                  variant=\"outlined\"\n                  className=\"mr-4 ml-4 mt-2 w-25\"\n                  helperText={t(\"activity-helper\")}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                >\n                  {this.props.activityTypes ? (\n                    this.props.activityTypes.map((option) => (\n                      <MenuItem key={option._id} value={option._id}>\n                        {option.name}\n                      </MenuItem>\n                    ))\n                  ) : (\n                    <MenuItem disabled>{t(\"empty-option\")}</MenuItem>\n                  )}\n                </TextField>\n                <TextField\n                  id=\"outlined-select-cc\"\n                  label={t(\"cc-label\")}\n                  select\n                  className=\"mr-4 ml-4 mt-2 w-25\"\n                  variant=\"outlined\"\n                  defaultValue={\n                    this.props.currentCropCycles[0]\n                      ? this.props.currentCropCycles[0]._id\n                      : \"\"\n                  }\n                  helperText={t(\"cc-helper\")}\n                  onChange={this.handleCropCycleChange}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                >\n                  {this.props.currentCropCycles ? (\n                    this.props.currentCropCycles.map((option) => (\n                      <MenuItem key={option._id} value={option._id}>\n                        {this.props.userFarms &&\n                          this.props.userFarms.find(\n                            (farm) => option.farmId === farm._id\n                          ).farmName}\n                      </MenuItem>\n                    ))\n                  ) : (\n                    <MenuItem disabled>{t(\"empty-option\")}</MenuItem>\n                  )}\n                </TextField>\n              </Grid.Row>\n              <Grid.Row>\n                <TextField\n                  error\n                  id=\"logdate\"\n                  label={t(\"log-date-label\")}\n                  type=\"date\"\n                  className=\"mr-4 ml-4 mt-2 w-25\"\n                  // defaultValue={new Date()}\n                  variant=\"outlined\"\n                  error={this.state.dateError}\n                  shouldDisableDate={this.logDateValidation}\n                  onChange={this.handleLogDateChange}\n                  helperText={t(\"log-date-error\")}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n                <TextField\n                  id=\"outlined-description\"\n                  label={t(\"description-label\")}\n                  variant=\"outlined\"\n                  className=\"mr-4 ml-4 mt-2 w-25\"\n                  helperText={t(\"description-helper\")}\n                  onChange={this.handleDescriptionChange}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n                <FormControlLabel\n                  className=\"mr-4 ml-4 w-50\"\n                  control={\n                    <Checkbox\n                      checked={this.state.confirmed}\n                      onChange={this.handleCheckBoxChange}\n                      name=\"checked\"\n                    />\n                  }\n                  label={t(\"cc-form-checkbox\")}\n                />\n              </Grid.Row>\n              <Grid.Row>\n                {this.state.errorMsg ? (\n                  <p\n                    style={{\n                      position: \"absolute\",\n                      color: \"red\",\n                      left: \"25%\",\n                      right: \"25%\",\n                    }}\n                  >\n                    {\" \"}\n                    {t(\"ccuncheckederror\")}{\" \"}\n                  </p>\n                ) : (\n                  \"\"\n                )}\n              </Grid.Row>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button onClick={this.handleClose} color=\"gray\">\n              {t(\"cancel\")}\n            </Button>\n            <Button onClick={this.handleSubmit} color=\"green\">\n              {t(\"submit\")}\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default withTranslation(\"add-activity\")(AddActivityForm);\n"]},"metadata":{},"sourceType":"module"}