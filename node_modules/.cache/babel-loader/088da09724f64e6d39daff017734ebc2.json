{"ast":null,"code":"import _regeneratorRuntime from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var turf=require(\"@turf/turf\");var axios=require(\"axios\");export var fillSelect=function fillSelect(optionsType,optionsData){if(optionsType&&optionsData&&optionsData.length){var options=[];for(var index in optionsData){var selectOption={key:optionsData[index]._id,value:optionsData[index]._id,text:optionsData[index].name};options.push(selectOption);}return options;}else{return[{key:0,value:\"No Options\",text:\"No Options\"}];}};export var calculateArea=function calculateArea(polygonLatLng){// eg: polygon is of format : [[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]\nvar polygon=turf.polygon(polygonLatLng);return turf.area(polygon);};export var isNotValidNumber=function isNotValidNumber(number){if(number===null||number===\"\"||isNaN(parseFloat(number))){return true;}return false;};var getUrlVars=function getUrlVars(){var vars={};var parts=window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,function(m,key,value){vars[key]=value;});return vars;};export var getUrlParam=function getUrlParam(parameter,defaultvalue){var urlparameter=defaultvalue||\"\";if(window.location.href.indexOf(parameter)>-1){urlparameter=getUrlVars()[parameter];}return urlparameter;};export var isInsideFarm=function isInsideFarm(farmLoc,deviceLoc){var pt=turf.point(deviceLoc);var poly=turf.polygon([farmLoc]);return turf.booleanPointInPolygon(pt,poly);};export var getPlantName=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userFarms,markerLoc,cropTypes){var farm,farmId,cropCyles,data,cropId,cropType,scientificPlantName;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:farm=userFarms.find(function(farm){return isInsideFarm(farm.location,markerLoc);});if(!farm){_context.next=15;break;}farmId=farm._id;_context.next=5;return axios.get(\"\".concat(process.env.REACT_APP_API_URL,\"/cropcycle/\").concat(farmId));case 5:cropCyles=_context.sent;data=cropCyles.data;if(!(data[0]&&data[0].cropSeeds&&data[0].cropSeeds[0])){_context.next=14;break;}cropId=cropCyles.data[0].cropSeeds[0].cropId;cropType=cropTypes.filter(function(cropType){return cropType._id===cropId;});scientificPlantName=cropType[0].scientificName;return _context.abrupt(\"return\",scientificPlantName);case 14:return _context.abrupt(\"return\",'generic');case 15:return _context.abrupt(\"return\",\"\");case 16:case\"end\":return _context.stop();}}},_callee);}));return function getPlantName(_x,_x2,_x3){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/utils/utilsFunctions.js"],"names":["turf","require","axios","fillSelect","optionsType","optionsData","length","options","index","selectOption","key","_id","value","text","name","push","calculateArea","polygonLatLng","polygon","area","isNotValidNumber","number","isNaN","parseFloat","getUrlVars","vars","parts","window","location","href","replace","m","getUrlParam","parameter","defaultvalue","urlparameter","indexOf","isInsideFarm","farmLoc","deviceLoc","pt","point","poly","booleanPointInPolygon","getPlantName","userFarms","markerLoc","cropTypes","farm","find","farmId","get","process","env","REACT_APP_API_URL","cropCyles","data","cropSeeds","cropId","cropType","filter","scientificPlantName","scientificName"],"mappings":"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","sourcesContent":["const turf = require(\"@turf/turf\");\nconst axios = require(\"axios\");\n\nexport const fillSelect = (optionsType, optionsData) => {\n  if (optionsType && optionsData && optionsData.length) {\n    const options = [];\n    for (const index in optionsData) {\n      const selectOption = {\n        key: optionsData[index]._id,\n        value: optionsData[index]._id,\n        text: optionsData[index].name,\n      };\n      options.push(selectOption);\n    }\n    return options;\n  } else {\n    return [{ key: 0, value: \"No Options\", text: \"No Options\" }];\n  }\n};\n\nexport const calculateArea = (polygonLatLng) => {\n  // eg: polygon is of format : [[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]\n  const polygon = turf.polygon(polygonLatLng);\n  return turf.area(polygon);\n};\n\nexport const isNotValidNumber = (number) => {\n  if (number === null || number === \"\" || isNaN(parseFloat(number))) {\n    return true;\n  }\n  return false;\n};\n\nconst getUrlVars = () => {\n  const vars = {};\n  const parts = window.location.href.replace(\n    /[?&]+([^=&]+)=([^&]*)/gi,\n    function (m, key, value) {\n      vars[key] = value;\n    }\n  );\n  return vars;\n};\n\nexport const getUrlParam = (parameter, defaultvalue) => {\n  let urlparameter = defaultvalue || \"\";\n  if (window.location.href.indexOf(parameter) > -1) {\n    urlparameter = getUrlVars()[parameter];\n  }\n  return urlparameter;\n};\n\nexport const isInsideFarm = (farmLoc, deviceLoc) => {\n  const pt = turf.point(deviceLoc);\n  const poly = turf.polygon([farmLoc]);\n  return turf.booleanPointInPolygon(pt, poly);\n};\n\nexport const getPlantName = async (userFarms, markerLoc, cropTypes) => {  \n  const farm = userFarms.find((farm) => isInsideFarm(farm.location, markerLoc));\n  if (farm) {    \n    const farmId = farm._id;    \n    const cropCyles = await axios.get(\n      `${process.env.REACT_APP_API_URL}/cropcycle/${farmId}`      \n    );\n    const data = cropCyles.data;\n    if (data[0] && data[0].cropSeeds && data[0].cropSeeds[0]) {\n      const cropId = cropCyles.data[0].cropSeeds[0].cropId;    \n      const cropType = cropTypes.filter((cropType) => cropType._id === cropId);\n      const scientificPlantName = cropType[0].scientificName;    \n      return scientificPlantName;\n    } else {\n      return 'generic';\n    }    \n  }\n  return \"\";\n};"]},"metadata":{},"sourceType":"module"}