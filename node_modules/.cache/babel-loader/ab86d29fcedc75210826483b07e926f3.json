{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/TimelineLabel/TimelineLabel.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport styles from \"./TimelineLabel.module.css\";\nimport { Timeline, Typography, Space, Row, Col } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport TimelineHeading from \"../TimelineHeading/TimelineHeading\";\nimport { Container, Grid, Icon } from \"semantic-ui-react\";\n\nconst TimelineLabel = props => {\n  const {\n    Text\n  } = Typography;\n  const dotColor = \"green\";\n  const textType = \"secondary\";\n  const [cc, setCC] = useState();\n  const [activities, setActivities] = useState([]);\n\n  function chosenCC(ccId) {\n    setCC(ccId);\n  }\n\n  useEffect(() => {\n    if (cc) {\n      if (props) {\n        if (props.userActivities) {\n          if (props.userActivities.length > 0) {\n            const ccActivities = props.userActivities.filter(act => act.cropCycleId === cc);\n            ccActivities.sort(function (a, b) {\n              if (a.logDate < b.logDate) return -1;\n              if (a.logDate > b.logDate) return 1;else return 0;\n            });\n            setActivities(ccActivities);\n          }\n        }\n      }\n    }\n  }, [cc]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    columns: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"mx-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TimelineHeading, Object.assign({}, props, {\n    chosenCC: chosenCC,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  })))), /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"mx-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Timeline, {\n    mode: \"left\",\n    className: styles.timelines,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, activities.map(activity => {\n    const log = new Date(activity.logDate);\n    return /*#__PURE__*/React.createElement(Timeline.Item, {\n      key: activity._id,\n      color: dotColor,\n      label: log.getDay() + log.toLocaleString('en-us', {\n        month: 'short'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Space, {\n      direction: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      type: textType,\n      className: styles.timelineHeading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 23\n      }\n    }, props.activitytypes.find(type => type._id === activity.activityId).name), /*#__PURE__*/React.createElement(Text, {\n      type: textType,\n      className: styles.timelinesdesc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 23\n      }\n    }, \"VIEW SOIL CONDITION | VIEW INFO\")));\n  }), /*#__PURE__*/React.createElement(Timeline.Item, {\n    color: dotColor,\n    label: \"12 Jan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Space, {\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelineHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"Tilling\"), /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelinesdesc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, \"VIEW SOIL CONDITION | VIEW INFO\"))), /*#__PURE__*/React.createElement(Timeline.Item, {\n    color: dotColor,\n    label: \"19 Jan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Space, {\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelineHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"1st Weekly Soil Report\"), /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelinesdesc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"VIEW SOIL CONDITION \"))), /*#__PURE__*/React.createElement(Timeline.Item, {\n    color: dotColor,\n    label: \"22 Jan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Space, {\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelineHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Seed sowing\"), /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelinesdesc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, \"VIEW SOIL CONDITION | VIEW INFO\"))), /*#__PURE__*/React.createElement(Timeline.Item, {\n    color: dotColor,\n    label: \"10 Feb\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Space, {\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelineHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Irrigation\"), /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelinesdesc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"VIEW SOIL CONDITION | VIEW INFO\"))), /*#__PURE__*/React.createElement(Timeline.Item, {\n    color: dotColor,\n    label: \"16 Feb\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Space, {\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelineHeading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Irrigation \", /*#__PURE__*/React.createElement(Icon, {\n    name: \"check square\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 30\n    }\n  }), \"Prescribed Action\"), /*#__PURE__*/React.createElement(Text, {\n    type: textType,\n    className: styles.timelinesdesc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"VIEW SOIL CONDITION | VIEW INFO\"))))))) // <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n  // <Container fluid>\n  //   <Container fluid>\n  //     <TimelineHeading {...props} chosenCC={chosenCC}/>\n  //   </Container>\n  //   <Container textAlign=\"left\" fluid>\n  //   <Row>\n  //     <Col span={18}>\n  //       <Timeline mode=\"left\">\n  //         {\n  //           activities.map(activity => {\n  //             const log = new Date(activity.logDate)\n  //             return (\n  //             <Timeline.Item key={activity._id} color={dotColor} label={log.getDay() + log.toLocaleString('en-us', { month: 'short' })}>\n  //             <Space direction=\"vertical\">\n  //               <Text type={textType} className={styles.timelineHeading}>\n  //                 {props.activitytypes.find(type => type._id === activity.activityId).name}\n  //               </Text>\n  //               <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n  //             </Space>\n  //           </Timeline.Item>\n  //             );  \n  //           })\n  //         }\n  //         <Timeline.Item color={dotColor} label=\"12 Jan\">\n  //           <Space direction=\"vertical\">\n  //             <Text type={textType} className={styles.timelineHeading}>\n  //               Tilling\n  //             </Text>\n  //             <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n  //           </Space>\n  //         </Timeline.Item>\n  //         <Timeline.Item color={dotColor} label=\"19 Jan\">\n  //           <Space direction=\"vertical\">\n  //             <Text type={textType} className={styles.timelineHeading}>\n  //               1st Weekly Soil Report\n  //             </Text>\n  //             <Text type={textType}>VIEW SOIL CONDITION </Text>\n  //           </Space>\n  //         </Timeline.Item>\n  //         <Timeline.Item color={dotColor} label=\"22 Jan\">\n  //           <Space direction=\"vertical\">\n  //             <Text type={textType} className={styles.timelineHeading}>\n  //               Seed sowing\n  //             </Text>\n  //             <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n  //           </Space>\n  //         </Timeline.Item>\n  //         <Timeline.Item color={dotColor} label=\"10 Feb\">\n  //           <Space direction=\"vertical\">\n  //             <Text type={textType} className={styles.timelineHeading}>\n  //               Irrigation\n  //             </Text>\n  //             <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n  //           </Space>\n  //         </Timeline.Item>\n  //         <Timeline.Item color={dotColor} label=\"16 Feb\">\n  //           <Space direction=\"vertical\">\n  //             <Text type={textType} className={styles.timelineHeading}>\n  //               Irrigation <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n  //               Prescribed Action\n  //             </Text>\n  //             <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n  //           </Space>\n  //         </Timeline.Item>\n  //       </Timeline>\n  //     </Col>\n  //   </Row>\n  //   </Container>\n  // </Container>\n  ;\n};\n\nexport default TimelineLabel;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/TimelineLabel/TimelineLabel.js"],"names":["React","useEffect","useState","styles","Timeline","Typography","Space","Row","Col","CheckCircleTwoTone","TimelineHeading","Container","Grid","Icon","TimelineLabel","props","Text","dotColor","textType","cc","setCC","activities","setActivities","chosenCC","ccId","userActivities","length","ccActivities","filter","act","cropCycleId","sort","a","b","logDate","timelines","map","activity","log","Date","_id","getDay","toLocaleString","month","timelineHeading","activitytypes","find","type","activityId","name","timelinesdesc"],"mappings":"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I,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADb,sBADF,eAKE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE1B,QAAZ;AAAsB,IAAA,SAAS,EAAEf,MAAM,CAAC+C,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCALF,CADF,CAhDF,CADF,CADF,CANF,CAFF,CAwEE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/IF;AAiJD,CAhLD;;AAkLA,eAAepC,aAAf","sourcesContent":["import React,{useEffect,useState} from \"react\";\nimport \"antd/dist/antd.css\";\nimport styles from \"./TimelineLabel.module.css\";\nimport { Timeline, Typography, Space, Row, Col } from \"antd\";\nimport { CheckCircleTwoTone } from \"@ant-design/icons\";\nimport TimelineHeading from \"../TimelineHeading/TimelineHeading\";\nimport { Container, Grid, Icon } from \"semantic-ui-react\";\nconst TimelineLabel = (props) => {\n  const { Text } = Typography;\n  const dotColor = \"green\";\n  const textType = \"secondary\";\n  const [cc, setCC] = useState();\n  const [activities, setActivities] = useState([])\n  function chosenCC(ccId) {\n    setCC(ccId);\n  }\n  useEffect(() => {\n    if(cc){\n    if(props){\n      if(props.userActivities){\n        if(props.userActivities.length > 0){\n            const ccActivities = props.userActivities.filter(act => act.cropCycleId === cc)\n            ccActivities.sort(function(a,b){\n              \n              if(a.logDate < b.logDate)\n                return -1 \n              if(a.logDate > b.logDate)\n                return 1\n              else\n                return 0\n              \n            })\n            setActivities(ccActivities);  \n          }\n        }\n      }\n    }\n  }, [cc]);\n  return (\n    \n    <Grid columns={1}>\n      <Grid.Row  className=\"mx-0\">\n        <Grid.Column>\n          <TimelineHeading {...props} chosenCC={chosenCC}/>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row className=\"mx-0\">\n        <Grid.Column width={16}>\n          <Timeline mode=\"left\" className={styles.timelines}>\n            {\n              activities.map(activity => {\n                const log = new Date(activity.logDate)\n                return (\n                  <Timeline.Item key={activity._id} color={dotColor} label={log.getDay() + log.toLocaleString('en-us', { month: 'short' })}>\n                    <Space direction=\"vertical\">\n                      <Text type={textType} className={styles.timelineHeading}>\n                        {props.activitytypes.find(type => type._id === activity.activityId).name}\n                      </Text>\n                      <Text type={textType} className={styles.timelinesdesc}>VIEW SOIL CONDITION | VIEW INFO</Text>\n                    </Space>\n                  </Timeline.Item>\n                );  \n              })\n            }\n            <Timeline.Item color={dotColor} label=\"12 Jan\">\n              <Space direction=\"vertical\">\n                <Text type={textType} className={styles.timelineHeading}>\n                  Tilling\n                </Text>\n                <Text type={textType} className={styles.timelinesdesc}>VIEW SOIL CONDITION | VIEW INFO</Text>\n              </Space>\n            </Timeline.Item>\n            <Timeline.Item color={dotColor} label=\"19 Jan\">\n              <Space direction=\"vertical\">\n                <Text type={textType} className={styles.timelineHeading}>\n                  1st Weekly Soil Report\n                </Text>\n                <Text type={textType} className={styles.timelinesdesc}>VIEW SOIL CONDITION </Text>\n              </Space>\n            </Timeline.Item>\n            <Timeline.Item color={dotColor} label=\"22 Jan\">\n              <Space direction=\"vertical\">\n                <Text type={textType} className={styles.timelineHeading}>\n                  Seed sowing\n                </Text>\n                <Text type={textType} className={styles.timelinesdesc}>VIEW SOIL CONDITION | VIEW INFO</Text>\n              </Space>\n            </Timeline.Item>\n            <Timeline.Item color={dotColor} label=\"10 Feb\">\n              <Space direction=\"vertical\">\n                <Text type={textType} className={styles.timelineHeading}>\n                  Irrigation\n                </Text>\n                <Text type={textType} className={styles.timelinesdesc}>VIEW SOIL CONDITION | VIEW INFO</Text>\n              </Space>\n            </Timeline.Item>\n            <Timeline.Item color={dotColor} label=\"16 Feb\">\n              <Space direction=\"vertical\">\n                <Text type={textType} className={styles.timelineHeading}>\n                  Irrigation <Icon name=\"check square\"/>\n                  Prescribed Action\n                </Text>\n                <Text type={textType} className={styles.timelinesdesc}>VIEW SOIL CONDITION | VIEW INFO</Text>\n              </Space>\n            </Timeline.Item>\n          </Timeline>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n    \n    // <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n    \n    // <Container fluid>\n    //   <Container fluid>\n    //     <TimelineHeading {...props} chosenCC={chosenCC}/>\n    //   </Container>\n    //   <Container textAlign=\"left\" fluid>\n    //   <Row>\n    //     <Col span={18}>\n    //       <Timeline mode=\"left\">\n    //         {\n    //           activities.map(activity => {\n    //             const log = new Date(activity.logDate)\n    //             return (\n    //             <Timeline.Item key={activity._id} color={dotColor} label={log.getDay() + log.toLocaleString('en-us', { month: 'short' })}>\n    //             <Space direction=\"vertical\">\n    //               <Text type={textType} className={styles.timelineHeading}>\n    //                 {props.activitytypes.find(type => type._id === activity.activityId).name}\n    //               </Text>\n    //               <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n    //             </Space>\n    //           </Timeline.Item>\n    //             );  \n    //           })\n    //         }\n    //         <Timeline.Item color={dotColor} label=\"12 Jan\">\n    //           <Space direction=\"vertical\">\n    //             <Text type={textType} className={styles.timelineHeading}>\n    //               Tilling\n    //             </Text>\n    //             <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n    //           </Space>\n    //         </Timeline.Item>\n    //         <Timeline.Item color={dotColor} label=\"19 Jan\">\n    //           <Space direction=\"vertical\">\n    //             <Text type={textType} className={styles.timelineHeading}>\n    //               1st Weekly Soil Report\n    //             </Text>\n    //             <Text type={textType}>VIEW SOIL CONDITION </Text>\n    //           </Space>\n    //         </Timeline.Item>\n    //         <Timeline.Item color={dotColor} label=\"22 Jan\">\n    //           <Space direction=\"vertical\">\n    //             <Text type={textType} className={styles.timelineHeading}>\n    //               Seed sowing\n    //             </Text>\n    //             <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n    //           </Space>\n    //         </Timeline.Item>\n    //         <Timeline.Item color={dotColor} label=\"10 Feb\">\n    //           <Space direction=\"vertical\">\n    //             <Text type={textType} className={styles.timelineHeading}>\n    //               Irrigation\n    //             </Text>\n    //             <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n    //           </Space>\n    //         </Timeline.Item>\n    //         <Timeline.Item color={dotColor} label=\"16 Feb\">\n    //           <Space direction=\"vertical\">\n    //             <Text type={textType} className={styles.timelineHeading}>\n    //               Irrigation <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n    //               Prescribed Action\n    //             </Text>\n\n    //             <Text type={textType}>VIEW SOIL CONDITION | VIEW INFO</Text>\n    //           </Space>\n    //         </Timeline.Item>\n    //       </Timeline>\n    //     </Col>\n    //   </Row>\n    //   </Container>\n    // </Container>\n  );\n};\n\nexport default TimelineLabel;\n"]},"metadata":{},"sourceType":"module"}