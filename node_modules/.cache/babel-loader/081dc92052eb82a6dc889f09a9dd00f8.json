{"ast":null,"code":"import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{useTranslation}from'react-i18next';import{Grid,Dropdown,Icon,Responsive}from'semantic-ui-react';// download\nfunction TimelineHeading(props){var _useTranslation=useTranslation(\"crop-management\"),t=_useTranslation.t;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),activityOptions=_useState2[0],setActivityOptions=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),chosenCC=_useState4[0],setChosenCC=_useState4[1];function activitySelector(e,key){props.chosenCC(key.value);if(e){setChosenCC(key.value);//cc _id\n}}var getDropdownText=function getDropdownText(cropItem){if(props){var cropDate=new Date(cropItem.startDate);return cropDate.toLocaleString('en-us',{month:'short'})+\" \"+cropDate.getFullYear()+\" \"+props.userFarms.find(function(farm){return cropItem.farmId===farm._id;}).farmName+\" \"+cropItem.cropSeeds.map(function(cropSeed,index){if(index===0){return\"\".concat(props.croptypes.find(function(type){return type._id===cropSeed.cropId;}).name);}else{return\" & \".concat(props.croptypes.find(function(type){return type._id===cropSeed.cropId;}).name);}});}};useEffect(function(){if(props){if(props.userActivities){if(props.userActivities.length){if(activityOptions.length<1){var copyOptions=[];props.currentcropcycles.map(function(cc){copyOptions.push({key:cc._id,value:cc._id,text:getDropdownText(cc)});});setActivityOptions(copyOptions);}if(activityOptions.length>1&&activityOptions.length<props.userActivities.length){var _copyOptions=[];props.userActivities.map(function(activity){_copyOptions.push({key:activity._id,value:activity._id,text:activity._id});});setActivityOptions(_copyOptions);}}}}});//   useEffect(() => {\n//     if(!chosenCC){\n//         if(props.currentcropcycles){\n//             setChosenCC(props.currentcropcycles[0]._id)\n//         }\n//     }\n//   }, [chosenCC])\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Responsive,{minWidth:1450},/*#__PURE__*/React.createElement(Grid,{columns:2},/*#__PURE__*/React.createElement(Grid.Row,{className:\"mx-0\"},/*#__PURE__*/React.createElement(Grid.Column,{width:16},/*#__PURE__*/React.createElement(\"p\",{style:{color:\"#B2AFAF\",fontWeight:\"bold\",fontSize:\"20px\"}},t(\"Activity Logs Of\")))),/*#__PURE__*/React.createElement(Grid.Row,{className:\"mx-0 p-0\"},/*#__PURE__*/React.createElement(Grid.Column,{width:15},/*#__PURE__*/React.createElement(\"span\",{fluid:true,style:{color:\"#58CB7C\",fontSize:\"20px\",position:\"relative\",top:\"-1rem\"}},props?props.userActivities?/*#__PURE__*/React.createElement(Dropdown,{text:t('dropdown-text'),inline:true,onChange:function onChange(e,key){return activitySelector(e,key);},options:activityOptions}):/*#__PURE__*/React.createElement(Dropdown,{text:t('empty-option'),disabled:true}):null)),/*#__PURE__*/React.createElement(Grid.Column,{width:1},/*#__PURE__*/React.createElement(Icon,{name:\"download\"}))))),/*#__PURE__*/React.createElement(Responsive,{minWidth:768,maxWidth:1449},/*#__PURE__*/React.createElement(Grid,{columns:2},/*#__PURE__*/React.createElement(Grid.Row,{className:\"mx-0\"},/*#__PURE__*/React.createElement(Grid.Column,{width:16},/*#__PURE__*/React.createElement(\"p\",{style:{color:\"#B2AFAF\",fontWeight:\"bold\",fontSize:\"20px\"}},t(\"Activity Logs Of\")))),/*#__PURE__*/React.createElement(Grid.Row,{className:\"mx-0 p-0\"},/*#__PURE__*/React.createElement(Grid.Column,{width:14},/*#__PURE__*/React.createElement(\"span\",{fluid:true,style:{color:\"#58CB7C\",fontSize:\"20px\",position:\"relative\",top:\"-1rem\"}},props?props.userActivities?/*#__PURE__*/React.createElement(Dropdown,{text:t('dropdown-text'),inline:true,onChange:function onChange(e,key){return activitySelector(e,key);},options:activityOptions}):/*#__PURE__*/React.createElement(Dropdown,{text:t('empty-option'),disabled:true}):null)),/*#__PURE__*/React.createElement(Grid.Column,{width:2,style:{position:\"relative\",top:\"-10px\",right:\"20px\"}},/*#__PURE__*/React.createElement(Icon,{name:\"download\"}))))))// {/* <Grid.Column floated=\"left\" fluid>\n//         <Grid.Row>\n//             <p style={{color: \"gray\"}}>\n//                 {t(\"activity-logs-title\")}\n//             </p>\n//         </Grid.Row>\n//         <Grid.Row fluid>\n//             <span fluid style={{color: \"green\"}}>\n//                 { props ? (props.userActivities ? \n//                 (<Dropdown text={t('dropdown-text')} inline onChange={(e, key) => activitySelector(e, key)} \n//                 options={activityOptions}/>)\n//                 : (<Dropdown text={t('empty-option')} disabled/>)) : (null)}\n//             </span>\n//         </Grid.Row>\n//     </Grid.Column>\n//     <Grid.Column floated=\"right\" width={2}>\n//         <Icon className=\"download\"/>\n//     </Grid.Column> */}\n;}export default TimelineHeading;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/TimelineHeading/TimelineHeading.js"],"names":["React","useState","useEffect","useTranslation","Grid","Dropdown","Icon","Responsive","TimelineHeading","props","t","activityOptions","setActivityOptions","chosenCC","setChosenCC","activitySelector","e","key","value","getDropdownText","cropItem","cropDate","Date","startDate","toLocaleString","month","getFullYear","userFarms","find","farm","farmId","_id","farmName","cropSeeds","map","cropSeed","index","croptypes","type","cropId","name","userActivities","length","copyOptions","currentcropcycles","cc","push","text","activity","color","fontWeight","fontSize","position","top","right"],"mappings":"2KAAA,MAAOA,CAAAA,KAAP,EAAcC,QAAd,CAAwBC,SAAxB,KAAwC,OAAxC,CACA,OAAQC,cAAR,KAA6B,eAA7B,CACA,OAAQC,IAAR,CAAcC,QAAd,CAAwBC,IAAxB,CAA8BC,UAA9B,KAA+C,mBAA/C,CACA;AACA,QAASC,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,qBAChBN,cAAc,CAAC,iBAAD,CADE,CACrBO,CADqB,iBACrBA,CADqB,eAEkBT,QAAQ,CAAC,EAAD,CAF1B,wCAErBU,eAFqB,eAEJC,kBAFI,8BAGIX,QAAQ,CAAC,EAAD,CAHZ,yCAGrBY,QAHqB,eAGXC,WAHW,eAI5B,QAASC,CAAAA,gBAAT,CAA0BC,CAA1B,CAA6BC,GAA7B,CAAiC,CAC7BR,KAAK,CAACI,QAAN,CAAeI,GAAG,CAACC,KAAnB,EACA,GAAGF,CAAH,CAAK,CACDF,WAAW,CAACG,GAAG,CAACC,KAAL,CAAX,CAAuB;AAC1B,CACJ,CAED,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,QAAD,CAAc,CAClC,GAAGX,KAAH,CAAS,CACT,GAAIY,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,IAAJ,CAASF,QAAQ,CAACG,SAAlB,CAAf,CACA,MACIF,CAAAA,QAAQ,CAACG,cAAT,CAAwB,OAAxB,CAAiC,CAAEC,KAAK,CAAE,OAAT,CAAjC,EAAsD,GAAtD,CACAJ,QAAQ,CAACK,WAAT,EADA,CACwB,GADxB,CAEAjB,KAAK,CAACkB,SAAN,CAAgBC,IAAhB,CAAqB,SAAAC,IAAI,QACrBT,CAAAA,QAAQ,CAACU,MAAT,GAAoBD,IAAI,CAACE,GADJ,EAAzB,EAEEC,QAJF,CAIa,GAJb,CAKAZ,QAAQ,CAACa,SAAT,CAAmBC,GAAnB,CAAuB,SAACC,QAAD,CAAWC,KAAX,CAAqB,CACxC,GAAGA,KAAK,GAAG,CAAX,CAAa,CACT,gBAAU3B,KAAK,CAAC4B,SAAN,CAAgBT,IAAhB,CAAqB,SAAAU,IAAI,QAAIA,CAAAA,IAAI,CAACP,GAAL,GAAaI,QAAQ,CAACI,MAA1B,EAAzB,EAA2DC,IAArE,EACH,CAFD,IAGI,CACA,mBAAa/B,KAAK,CAAC4B,SAAN,CAAgBT,IAAhB,CAAqB,SAAAU,IAAI,QAAIA,CAAAA,IAAI,CAACP,GAAL,GAAaI,QAAQ,CAACI,MAA1B,EAAzB,EAA2DC,IAAxE,EACH,CACJ,CAPD,CANJ,CAeC,CACJ,CAnBD,CAoBAtC,SAAS,CAAC,UAAM,CACZ,GAAGO,KAAH,CAAS,CACL,GAAGA,KAAK,CAACgC,cAAT,CAAwB,CACpB,GAAGhC,KAAK,CAACgC,cAAN,CAAqBC,MAAxB,CAA+B,CAC3B,GAAG/B,eAAe,CAAC+B,MAAhB,CAAyB,CAA5B,CAA8B,CAC1B,GAAMC,CAAAA,WAAW,CAAG,EAApB,CACJlC,KAAK,CAACmC,iBAAN,CAAwBV,GAAxB,CAA4B,SAAAW,EAAE,CAAI,CAC9BF,WAAW,CAACG,IAAZ,CAAiB,CACb7B,GAAG,CAAE4B,EAAE,CAACd,GADK,CAEbb,KAAK,CAAE2B,EAAE,CAACd,GAFG,CAGbgB,IAAI,CAAE5B,eAAe,CAAC0B,EAAD,CAHR,CAAjB,EAKH,CAND,EAOAjC,kBAAkB,CAAC+B,WAAD,CAAlB,CACH,CACD,GAAGhC,eAAe,CAAC+B,MAAhB,CAAyB,CAAzB,EAA8B/B,eAAe,CAAC+B,MAAhB,CAAwBjC,KAAK,CAACgC,cAAN,CAAqBC,MAA9E,CAAqF,CACjF,GAAMC,CAAAA,YAAW,CAAG,EAApB,CACAlC,KAAK,CAACgC,cAAN,CAAqBP,GAArB,CAAyB,SAAAc,QAAQ,CAAI,CACjCL,YAAW,CAACG,IAAZ,CAAiB,CACb7B,GAAG,CAAE+B,QAAQ,CAACjB,GADD,CAEbb,KAAK,CAAE8B,QAAQ,CAACjB,GAFH,CAGbgB,IAAI,CAAEC,QAAQ,CAACjB,GAHF,CAAjB,EAKH,CAND,EAOAnB,kBAAkB,CAAC+B,YAAD,CAAlB,CACH,CACJ,CACA,CACJ,CACF,CA7BM,CAAT,CA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAGI,4CACI,oBAAC,UAAD,EAAY,QAAQ,CAAE,IAAtB,eACI,oBAAC,IAAD,EAAM,OAAO,CAAE,CAAf,eACI,oBAAC,IAAD,CAAM,GAAN,EAAW,SAAS,CAAC,MAArB,eACI,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,eACI,yBAAG,KAAK,CAAE,CAACM,KAAK,CAAE,SAAR,CAAmBC,UAAU,CAAC,MAA9B,CAAsCC,QAAQ,CAAE,MAAhD,CAAV,EACKzC,CAAC,CAAC,kBAAD,CADN,CADJ,CADJ,CADJ,cAQI,oBAAC,IAAD,CAAM,GAAN,EAAU,SAAS,CAAC,UAApB,eACI,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,eACI,4BAAM,KAAK,KAAX,CAAY,KAAK,CAAE,CAACuC,KAAK,CAAE,SAAR,CAAmBE,QAAQ,CAAE,MAA7B,CAAqCC,QAAQ,CAAC,UAA9C,CAA0DC,GAAG,CAAC,OAA9D,CAAnB,EACM5C,KAAK,CAAIA,KAAK,CAACgC,cAAN,cACV,oBAAC,QAAD,EAAU,IAAI,CAAE/B,CAAC,CAAC,eAAD,CAAjB,CAAoC,MAAM,KAA1C,CAA2C,QAAQ,CAAE,kBAACM,CAAD,CAAIC,GAAJ,QAAYF,CAAAA,gBAAgB,CAACC,CAAD,CAAIC,GAAJ,CAA5B,EAArD,CACD,OAAO,CAAEN,eADR,EADU,cAGR,oBAAC,QAAD,EAAU,IAAI,CAAED,CAAC,CAAC,cAAD,CAAjB,CAAmC,QAAQ,KAA3C,EAHI,CAG+C,IAJ1D,CADJ,CADJ,cASI,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,CAApB,eACI,oBAAC,IAAD,EAAM,IAAI,CAAC,UAAX,EADJ,CATJ,CARJ,CADJ,CADJ,cAyBI,oBAAC,UAAD,EAAY,QAAQ,CAAE,GAAtB,CAA2B,QAAQ,CAAE,IAArC,eACI,oBAAC,IAAD,EAAM,OAAO,CAAE,CAAf,eACI,oBAAC,IAAD,CAAM,GAAN,EAAW,SAAS,CAAC,MAArB,eACI,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,eACI,yBAAG,KAAK,CAAE,CAACuC,KAAK,CAAE,SAAR,CAAmBC,UAAU,CAAC,MAA9B,CAAsCC,QAAQ,CAAE,MAAhD,CAAV,EACKzC,CAAC,CAAC,kBAAD,CADN,CADJ,CADJ,CADJ,cAQI,oBAAC,IAAD,CAAM,GAAN,EAAU,SAAS,CAAC,UAApB,eACI,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,eACI,4BAAM,KAAK,KAAX,CAAY,KAAK,CAAE,CAACuC,KAAK,CAAE,SAAR,CAAmBE,QAAQ,CAAE,MAA7B,CAAqCC,QAAQ,CAAC,UAA9C,CAA0DC,GAAG,CAAC,OAA9D,CAAnB,EACM5C,KAAK,CAAIA,KAAK,CAACgC,cAAN,cACV,oBAAC,QAAD,EAAU,IAAI,CAAE/B,CAAC,CAAC,eAAD,CAAjB,CAAoC,MAAM,KAA1C,CAA2C,QAAQ,CAAE,kBAACM,CAAD,CAAIC,GAAJ,QAAYF,CAAAA,gBAAgB,CAACC,CAAD,CAAIC,GAAJ,CAA5B,EAArD,CACD,OAAO,CAAEN,eADR,EADU,cAGR,oBAAC,QAAD,EAAU,IAAI,CAAED,CAAC,CAAC,cAAD,CAAjB,CAAmC,QAAQ,KAA3C,EAHI,CAG+C,IAJ1D,CADJ,CADJ,cASI,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,CAApB,CAAuB,KAAK,CAAE,CAAC0C,QAAQ,CAAE,UAAX,CAAuBC,GAAG,CAAE,OAA5B,CAAqCC,KAAK,CAAE,MAA5C,CAA9B,eACI,oBAAC,IAAD,EAAM,IAAI,CAAC,UAAX,EADJ,CATJ,CARJ,CADJ,CAzBJ,CAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEJ,CA+EH,CAED,cAAe9C,CAAAA,eAAf","sourcesContent":["import React,{useState, useEffect} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {Grid, Dropdown, Icon, Responsive} from 'semantic-ui-react'\n// download\nfunction TimelineHeading(props) {\n    const {t} = useTranslation(\"crop-management\");\n    const [activityOptions, setActivityOptions] = useState([])\n    const [chosenCC, setChosenCC] = useState([])\n    function activitySelector(e, key){\n        props.chosenCC(key.value)\n        if(e){\n            setChosenCC(key.value) //cc _id\n        }\n    }\n\n    const getDropdownText = (cropItem) => {\n        if(props){\n        let cropDate = new Date(cropItem.startDate)        \n        return(\n            cropDate.toLocaleString('en-us', { month: 'short' })+ \" \" +\n            cropDate.getFullYear()+ \" \" +\n            props.userFarms.find(farm =>\n                cropItem.farmId === farm._id\n            ).farmName + \" \" +\n            cropItem.cropSeeds.map((cropSeed, index) => {\n                if(index===0){\n                    return `${props.croptypes.find(type => type._id === cropSeed.cropId).name}`\n                }\n                else{\n                    return ` & ${props.croptypes.find(type => type._id === cropSeed.cropId).name}`\n                }\n            })\n        ); \n        }\n    } \n    useEffect(() => {\n        if(props){\n            if(props.userActivities){\n                if(props.userActivities.length){\n                    if(activityOptions.length < 1){\n                        const copyOptions = [];\n                    props.currentcropcycles.map(cc => {\n                        copyOptions.push({\n                            key: cc._id,\n                            value: cc._id,\n                            text: getDropdownText(cc)\n                        });\n                    });\n                    setActivityOptions(copyOptions);\n                }\n                if(activityOptions.length > 1 && activityOptions.length< props.userActivities.length){\n                    const copyOptions = [];\n                    props.userActivities.map(activity => {\n                        copyOptions.push({\n                            key: activity._id,\n                            value: activity._id,\n                            text: activity._id\n                        });\n                    });\n                    setActivityOptions(copyOptions);                    \n                }\n            }\n            }\n        }\n      });\n    //   useEffect(() => {\n    //     if(!chosenCC){\n    //         if(props.currentcropcycles){\n    //             setChosenCC(props.currentcropcycles[0]._id)\n    //         }\n    //     }\n    //   }, [chosenCC])\n    return(\n       \n\n        <div>\n            <Responsive minWidth={1450}>\n                <Grid columns={2}>\n                    <Grid.Row  className=\"mx-0\">\n                        <Grid.Column width={16}>\n                            <p style={{color: \"#B2AFAF\", fontWeight:\"bold\", fontSize: \"20px\"}}>\n                                {t(\"Activity Logs Of\")}\n                            </p>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row className=\"mx-0 p-0\">\n                        <Grid.Column width={15}>\n                            <span fluid style={{color: \"#58CB7C\", fontSize: \"20px\", position:\"relative\", top:\"-1rem\"}}>\n                                { props ? (props.userActivities ? \n                                (<Dropdown text={t('dropdown-text')} inline onChange={(e, key) => activitySelector(e, key)} \n                                options={activityOptions}/>)\n                                : (<Dropdown text={t('empty-option')} disabled/>)) : (null)}\n                            </span>\n                        </Grid.Column>\n                        <Grid.Column width={1}>\n                            <Icon name=\"download\"/>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid> \n            </Responsive>\n            <Responsive minWidth={768} maxWidth={1449}>\n                <Grid columns={2}>\n                    <Grid.Row  className=\"mx-0\">\n                        <Grid.Column width={16}>\n                            <p style={{color: \"#B2AFAF\", fontWeight:\"bold\", fontSize: \"20px\"}}>\n                                {t(\"Activity Logs Of\")}\n                            </p>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row className=\"mx-0 p-0\">\n                        <Grid.Column width={14}>\n                            <span fluid style={{color: \"#58CB7C\", fontSize: \"20px\", position:\"relative\", top:\"-1rem\"}}>\n                                { props ? (props.userActivities ? \n                                (<Dropdown text={t('dropdown-text')} inline onChange={(e, key) => activitySelector(e, key)} \n                                options={activityOptions}/>)\n                                : (<Dropdown text={t('empty-option')} disabled/>)) : (null)}\n                            </span>\n                        </Grid.Column>\n                        <Grid.Column width={2} style={{position: \"relative\", top: \"-10px\", right: \"20px\"}}>\n                            <Icon name=\"download\"/>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid> \n            </Responsive>\n        </div>\n\n\n        // {/* <Grid.Column floated=\"left\" fluid>\n        //         <Grid.Row>\n        //             <p style={{color: \"gray\"}}>\n        //                 {t(\"activity-logs-title\")}\n        //             </p>\n        //         </Grid.Row>\n        //         <Grid.Row fluid>\n        //             <span fluid style={{color: \"green\"}}>\n        //                 { props ? (props.userActivities ? \n        //                 (<Dropdown text={t('dropdown-text')} inline onChange={(e, key) => activitySelector(e, key)} \n        //                 options={activityOptions}/>)\n        //                 : (<Dropdown text={t('empty-option')} disabled/>)) : (null)}\n        //             </span>\n        //         </Grid.Row>\n        //     </Grid.Column>\n        //     <Grid.Column floated=\"right\" width={2}>\n        //         <Icon className=\"download\"/>\n        //     </Grid.Column> */}\n\n\n\n\n\n    )\n} \n\nexport default TimelineHeading;"]},"metadata":{},"sourceType":"module"}