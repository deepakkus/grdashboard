{"ast":null,"code":"import axios from \"axios\"; // import { NULL } from \"node-sass\";\n\nimport { ADD_FARM, ADD_FARM_ERROR, SET_FARMS, GET_FARMS_ERROR, SET_APP_LOADING } from \"./types\";\nexport const addFarm = (farm, token) => async dispatch => {\n  try {\n    const res = await axios.post(` ${process.env.REACT_APP_API_URL}/farm`, farm, {\n      headers: {\n        Authorization: `Bearer ${token} ${farm.userId}`\n      }\n    });\n    dispatch({\n      type: ADD_FARM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_FARM_ERROR,\n      payload: err.response\n    });\n  }\n};\nexport const editFarm = (farm, token) => async dispatch => {\n  try {\n    const res = await axios.put(` ${process.env.REACT_APP_API_URL}/farm`, farm, {\n      headers: {\n        Authorization: `Bearer ${token} ${farm.userId}`\n      }\n    });\n    dispatch({\n      type: ADD_FARM,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_FARM_ERROR,\n      payload: err.response\n    });\n  }\n};\nexport const getUserFarms = (userId, token) => async dispatch => {\n  try {\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/farm/all/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token} ${userId}`\n      }\n    }); // console.log(res)\n\n    dispatch({\n      type: SET_FARMS,\n      payload: res.data\n    });\n    dispatch({\n      type: SET_APP_LOADING,\n      payload: false\n    });\n  } catch (err) {\n    // if(err.response.status === 401)\n    // {\n    //   window.location.href = process.env.REACT_APP_LOGIN_URL\n    // } \n    // else\n    // {\n    dispatch({\n      type: GET_FARMS_ERROR,\n      payload: {\n        msg: err.response\n      }\n    }); // }\n  }\n};","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/actions/farms.js"],"names":["axios","ADD_FARM","ADD_FARM_ERROR","SET_FARMS","GET_FARMS_ERROR","SET_APP_LOADING","addFarm","farm","token","dispatch","res","post","process","env","REACT_APP_API_URL","headers","Authorization","userId","type","payload","data","err","response","editFarm","put","getUserFarms","get","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,SAAnC,EAA8CC,eAA9C,EAA+DC,eAA/D,QAAsF,SAAtF;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB,MAAOC,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CACf,IAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,OADlB,EAEhBP,IAFgB,EAGhB;AACEQ,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASR,KAAM,IAAGD,IAAI,CAACU,MAAO;AADvC;AADX,KAHgB,CAAlB;AASAR,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEjB,QADC;AAEPkB,MAAAA,OAAO,EAAET,GAAG,CAACU;AAFN,KAAD,CAAR;AAID,GAdD,CAcE,OAAOC,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEhB,cADC;AAEPiB,MAAAA,OAAO,EAAEE,GAAG,CAACC;AAFN,KAAD,CAAR;AAID;AACF,CArBM;AAuBP,OAAO,MAAMC,QAAQ,GAAG,CAAChB,IAAD,EAAOC,KAAP,KAAiB,MAAOC,QAAP,IAAoB;AACzD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACwB,GAAN,CACf,IAAGZ,OAAO,CAACC,GAAR,CAAYC,iBAAkB,OADlB,EAEhBP,IAFgB,EAGhB;AACEQ,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASR,KAAM,IAAGD,IAAI,CAACU,MAAO;AADvC;AADX,KAHgB,CAAlB;AASAR,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEjB,QADC;AAEPkB,MAAAA,OAAO,EAAET,GAAG,CAACU;AAFN,KAAD,CAAR;AAID,GAdD,CAcE,OAAOC,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEhB,cADC;AAEPiB,MAAAA,OAAO,EAAEE,GAAG,CAACC;AAFN,KAAD,CAAR;AAID;AACJ,CArBM;AAuBP,OAAO,MAAMG,YAAY,GAAG,CAACR,MAAD,EAAST,KAAT,KAAmB,MAAOC,QAAP,IAAoB;AACjE,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAAC0B,GAAN,CAAW,GAAEd,OAAO,CAACC,GAAR,CAAYC,iBAAkB,aAAYG,MAAO,EAA9D,EAClB;AACEF,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASR,KAAM,IAAGS,MAAO;AADlC;AADX,KADkB,CAAlB,CADE,CAOF;;AACAR,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEf,SADC;AAEPgB,MAAAA,OAAO,EAAET,GAAG,CAACU;AAFN,KAAD,CAAR;AAIAX,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEb,eADC;AAEPc,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAhBD,CAgBE,OAAOE,GAAP,EAAY;AACZ;AACA;AACA;AACA;AAEA;AACA;AACEZ,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEd,eADC;AAEPe,MAAAA,OAAO,EAAE;AAAEQ,QAAAA,GAAG,EAAEN,GAAG,CAACC;AAAX;AAFF,KAAD,CAAR,CARU,CAYZ;AACD;AACF,CA/BM","sourcesContent":["import axios from \"axios\";\n// import { NULL } from \"node-sass\";\n\nimport { ADD_FARM, ADD_FARM_ERROR, SET_FARMS, GET_FARMS_ERROR, SET_APP_LOADING } from \"./types\";\n\nexport const addFarm = (farm, token) => async (dispatch) => {\n  try {\n    const res = await axios.post(\n      ` ${process.env.REACT_APP_API_URL}/farm`,\n      farm,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${farm.userId}`,\n        }\n      }\n    );\n    dispatch({\n      type: ADD_FARM,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_FARM_ERROR,\n      payload: err.response,\n    });\n  }\n};\n\nexport const editFarm = (farm, token) => async (dispatch) => {\n    try {\n      const res = await axios.put(\n        ` ${process.env.REACT_APP_API_URL}/farm`,\n        farm,\n        {\n          headers: {\n            Authorization: `Bearer ${token} ${farm.userId}`,\n          }\n        }\n      );\n      dispatch({\n        type: ADD_FARM,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: ADD_FARM_ERROR,\n        payload: err.response,\n      });\n    }\n};\n\nexport const getUserFarms = (userId, token) => async (dispatch) => {\n  try {\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/farm/all/${userId}`,\n    {\n      headers: {\n        Authorization: `Bearer ${token} ${userId}`,\n      }\n    });\n    // console.log(res)\n    dispatch({\n      type: SET_FARMS,\n      payload: res.data,\n    });\n    dispatch({\n      type: SET_APP_LOADING,\n      payload: false,\n    });\n  } catch (err) {\n    // if(err.response.status === 401)\n    // {\n    //   window.location.href = process.env.REACT_APP_LOGIN_URL\n    // } \n\n    // else\n    // {\n      dispatch({\n        type: GET_FARMS_ERROR,\n        payload: { msg: err.response },\n      });\n    // }\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}