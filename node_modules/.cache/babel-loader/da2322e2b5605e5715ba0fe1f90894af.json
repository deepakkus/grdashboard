{"ast":null,"code":"import _regeneratorRuntime from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Link}from\"react-router-dom\";import{Grid,Menu,Container,Segment,Button,Dropdown,Form,Responsive}from'semantic-ui-react';// import { } from 'semantic-ui-react';\nimport'./GisAnalysis.scss';import MapPolygon from'../MapPolygon/MapPolygon';import{useTranslation}from\"react-i18next\";import HeatMap from'../HeatMap/HeatMap';import GeneralAnalyzer from'./GisGeneralAnalyzer';// import { setRTLTextPlugin } from 'mapbox-gl';\nvar GisAnalysis=function GisAnalysis(props){var _useState=useState('Recent Map'),_useState2=_slicedToArray(_useState,2),activeItem=_useState2[0],setActiveItem=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),indices=_useState4[0],setIndices=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),field=_useState6[0],setField=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),fieldId=_useState8[0],setFieldId=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),date=_useState10[0],setDate=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),heatmap=_useState12[0],setHeatmap=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),datt=_useState14[0],setDatt=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),latlon=_useState16[0],setLatLon=_useState16[1];// const [imageId, setImageId] = useState('');\nvar _useState17=useState(''),_useState18=_slicedToArray(_useState17,2),imageLink=_useState18[0],setImageLink=_useState18[1];var _useState19=useState(''),_useState20=_slicedToArray(_useState19,2),image=_useState20[0],setImage=_useState20[1];var polygon=[[48.8566,2.3522]];//=  props.userFarms.location\nvar center=[48.8566,2.3522];//=  props.userFarms.address.location\nvar fieldOptions=[];var selectedField='';var currentFieldId='';var fillData=function fillData(){var newData=arguments.length>0&&arguments[0]!==undefined?arguments[0]:props.userFarms;newData.forEach(function(element){fieldOptions.push({text:element.farmName,id:element._id,value:element.farmName,polygon:element.location,center:element.address.location});});selectedField=newData[0].farmName;polygon=newData[0].location;center=newData[0].address.location;currentFieldId=newData[0]._id;};var indicesOptions=[{key:'NDVI',text:'NDVI',value:'NDVI'}];var handleItemClick=function handleItemClick(e,_ref){var name=_ref.name;setActiveItem(name);// setHeatmap(!heatmap)\n};var handleSubmit=function handleSubmit(event){event.preventDefault();// setHeatmap(true);\n};var datee=[];var aoi=[];var getHeatData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var fId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:fId='';fieldId?fId=fieldId:fId=currentFieldId;fieldOptions.forEach(function(element){if(element.id===fId){element.polygon.forEach(function(ele){aoi.push([ele[1],ele[0]]);});}});// const re = [];\n// re =  getHeatData(aoi);\n// //console.log(\"--%%--re--\",re);\n// datee = aoi.map((element) => \n//         ({\n//             key: element.image,\n//             value: element.image,\n//             text: element.date.split('T')[0]\n//         })\n// );\n// setDatt(datee);\n// console.log(datee);\n// console.log(\"---))))))----handleHeatMap----(((((((----\");\ncase 3:case\"end\":return _context.stop();}}},_callee);}));return function getHeatData(){return _ref2.apply(this,arguments);};}();/* HeatMap Function */var handleHeatMap=function handleHeatMap(event){event.preventDefault();if(indices===''){return;}// if(date === ''){\n//     return;\n// }\nvar fId='';fieldId?fId=fieldId:fId=currentFieldId;var res=props.getLinkForImage(image,indices,fId);// console.log(\"response--> \", res);\nsetImageLink(res);setHeatmap(!heatmap);};useEffect(function(){document.title=t(props.title);},[props.title]);useEffect(function(){//---- For Rerendering the component with new value\n//----- This get heat data only called when changing the fields\ngetHeatData();//console.log(\"latlon----> \",latlon);\nif(latlon.length>0){//console.log(\"getget---->> \",latlon[0][0],latlon[0][1]);\nprops.getWeatherData(latlon[0][0],latlon[0][1]);}},[field]);useEffect(function(){//----- Rendering only on heatmap\ngetHeatData();},[heatmap]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Responsive,{minWidth:1024},activeItem==\"Recent Map\"?/*#__PURE__*/React.createElement(Grid,{columns:1,container:true},/*#__PURE__*/React.createElement(Grid.Row,{className:\"ml-2\"},/*#__PURE__*/React.createElement(Grid.Column,null,props.userFarms.length>0?fillData(props.userFarms):null,/*#__PURE__*/React.createElement(Segment,{className:\"px-0 analysis-map\"},/*#__PURE__*/React.createElement(Menu,{pointing:true,secondary:true,fluid:true},/*#__PURE__*/React.createElement(Menu.Item,{name:\"Recent Map\",color:\"green\",active:activeItem===\"Recent Map\",onClick:handleItemClick}),/*#__PURE__*/React.createElement(Menu.Item,{name:\"Timeline\",color:\"green\",active:activeItem===\"Timeline\",onClick:handleItemClick}),/*#__PURE__*/React.createElement(Menu.Menu,{position:\"right\"},/*#__PURE__*/React.createElement(Menu.Item,{name:\"Gis-app\",className:\"gis-app\"},/*#__PURE__*/React.createElement(Link,{to:{pathname:\"http://gisapp.sensegrass.com/\"},target:\"_blank\",rel:\"noopener noreferrer\"},/*#__PURE__*/React.createElement(Button,{className:\"gis-app-btn\"},\"Gis Analyzer\"))))),/*#__PURE__*/React.createElement(Grid,{columns:1},/*#__PURE__*/React.createElement(Grid.Row,{className:\"mx-0 py-0\"},/*#__PURE__*/React.createElement(Grid.Column,{className:\"segment-Gis\"},!heatmap?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"form-wrapper\"},/*#__PURE__*/React.createElement(Form,{onSubmit:handleHeatMap},/*#__PURE__*/React.createElement(Form.Field,null,/*#__PURE__*/React.createElement(\"label\",null,t(\"common:AreaSelected\")),/*#__PURE__*/React.createElement(Dropdown,{placeholder:\"Select Field\",defaultValue:field?field:selectedField,selection:true,fluid:true,options:fieldOptions// value={field}\n,onChange:function onChange(e,center){var dumm=center.options.filter(function(pers){return pers.id===e.target.id;}).map(function(filtered){return filtered.center;});setField(e.target.textContent);setFieldId(e.target.id);setLatLon(dumm);//console.log(\"setLAtLon---->\",dumm);\n}})),/*#__PURE__*/React.createElement(Form.Field,null,/*#__PURE__*/React.createElement(\"label\",null,t(\"common:SelectDate\")),/*#__PURE__*/React.createElement(Dropdown,{placeholder:\"Select Date\",fluid:true,selection:true// options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n,options:datt,onChange:function onChange(e,_ref3){var value=_ref3.value;setDate(e.target.textContent);//  handleDateClick(value);\nsetImage(value);}})),/*#__PURE__*/React.createElement(Form.Field,null,/*#__PURE__*/React.createElement(\"label\",null,t(\"common:SelectIndices\")),/*#__PURE__*/React.createElement(Dropdown,{placeholder:\"Select Indices\",fluid:true,selection:true,options:indicesOptions,onChange:function onChange(e,_ref4){var value=_ref4.value;return setIndices(value);}})),/*#__PURE__*/React.createElement(Button,{fluid:true,type:\"submit\",color:\"green\",className:\"form-button\"},\"Generate Heat Map\")))):null,heatmap?/*#__PURE__*/React.createElement(HeatMap,Object.assign({},props,{fieldId:fieldId?fieldId:currentFieldId,date:date,indices:indices,selectedField:selectedField,setHeatmap:setHeatmap,imageLink:imageLink})):null,props.userFarms.length>0&&fieldId&&!heatmap?props.userFarms.forEach(function(poly){if(poly._id===fieldId){polygon=poly.location;center=poly.address.location;}}):null,!heatmap?/*#__PURE__*/ // <div className=\"mapContainer\">\nReact.createElement(MapPolygon,{editable:true,polygon:polygon,center:center})/* </div>  */:null))))))):setActiveItem(\"Recent Map\")),/*#__PURE__*/React.createElement(Responsive,{minWidth:768,maxWidth:1023.98},activeItem==\"Recent Map\"?/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(Grid,{columns:1,container:true},/*#__PURE__*/React.createElement(Grid.Row,{className:\"ml-2\"},/*#__PURE__*/React.createElement(Grid.Column,null,/*#__PURE__*/React.createElement(Segment,{className:\"px-0 analysis-map\"},/*#__PURE__*/React.createElement(Menu,{pointing:true,secondary:true,fluid:true},/*#__PURE__*/React.createElement(Menu.Item,{name:\"Recent Map\",color:\"green\",active:activeItem===\"Recent Map\",onClick:handleItemClick}),/*#__PURE__*/React.createElement(Menu.Item,{name:\"Timeline\",color:\"green\",active:activeItem===\"Timeline\",onClick:handleItemClick}),/*#__PURE__*/React.createElement(Menu.Menu,{position:\"right\"},/*#__PURE__*/React.createElement(Menu.Item,{name:\"Gis-app\",className:\"gis-app\"},/*#__PURE__*/React.createElement(Link,{to:{pathname:\"http://gisapp.sensegrass.com/\"},target:\"_blank\",rel:\"noopener noreferrer\"},/*#__PURE__*/React.createElement(Button,{className:\"gis-app-btn\"},\"Gis Analyzer\"))))),/*#__PURE__*/React.createElement(Grid,{columns:1},/*#__PURE__*/React.createElement(Grid.Row,{className:\"mx-0 py-0\"},/*#__PURE__*/React.createElement(Grid.Column,{className:\"segment-Gis\"},!heatmap?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"form-wrapper\"},/*#__PURE__*/React.createElement(Form,{onSubmit:handleHeatMap},/*#__PURE__*/React.createElement(Form.Field,null,/*#__PURE__*/React.createElement(\"label\",null,t(\"common:AreaSelected\")),/*#__PURE__*/React.createElement(Dropdown,{placeholder:\"Select Field\",defaultValue:field?field:selectedField,selection:true,fluid:true,options:fieldOptions// value={field}\n,onChange:function onChange(e,center){var dumm=center.options.filter(function(pers){return pers.id===e.target.id;}).map(function(filtered){return filtered.center;});setField(e.target.textContent);setFieldId(e.target.id);setLatLon(dumm);//console.log(\"setLAtLon---->\",dumm);\n}})),/*#__PURE__*/React.createElement(Form.Field,null,/*#__PURE__*/React.createElement(\"label\",null,t(\"common:SelectDate\")),/*#__PURE__*/React.createElement(Dropdown,{placeholder:\"Select Date\",fluid:true,selection:true// options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n,options:datt,onChange:function onChange(e,_ref5){var value=_ref5.value;setDate(e.target.textContent);//  handleDateClick(value);\nsetImage(value);}})),/*#__PURE__*/React.createElement(Form.Field,null,/*#__PURE__*/React.createElement(\"label\",null,t(\"common:SelectIndices\")),/*#__PURE__*/React.createElement(Dropdown,{placeholder:\"Select Indices\",fluid:true,selection:true,options:indicesOptions,onChange:function onChange(e,_ref6){var value=_ref6.value;return setIndices(value);}})),/*#__PURE__*/React.createElement(Button,{fluid:true,type:\"submit\",color:\"green\",className:\"form-button\"},\"Generate Heat Map\")))):null,heatmap?/*#__PURE__*/React.createElement(HeatMap,Object.assign({},props,{fieldId:fieldId?fieldId:currentFieldId,date:date,indices:indices,selectedField:selectedField,setHeatmap:setHeatmap,imageLink:imageLink})):null,props.userFarms.length>0&&fieldId&&!heatmap?props.userFarms.forEach(function(poly){if(poly._id===fieldId){polygon=poly.location;center=poly.address.location;}}):null,!heatmap?/*#__PURE__*/ // <div className=\"mapContainer\">\nReact.createElement(MapPolygon,{editable:true,polygon:polygon,center:center})/* </div>  */:null)))))))):setActiveItem(\"Recent Map\")))// <Container fluid>\n//     {props.userFarms.length>0 ? fillData(props.userFarms) : null}\n//     <Menu pointing secondary>\n//         <Menu.Item \n//             name = 'Recent Map'\n//             color = \"green\"\n//             active = {activeItem === 'Recent Map'}\n//             onClick = {handleItemClick}\n//         />\n//         <Menu.Item \n//             name = \"Timeline\"\n//             color = \"green\"\n//             active = {activeItem === 'Timeline'}\n//             onClick = {handleItemClick}\n//         />\n//     </Menu>\n//     <Container className=\"segment-Gis\">\n//   { !heatmap ? \n//   <div className='form-top'>\n//     <Form onSubmit={handleSubmit}>\n//         <Form.Field>\n//             <label>{t(\"common:AreaSelected\")}</label>\n//             <Dropdown \n//                 placeholder='Select Field'\n//                 defaultValue={field ? field : selectedField}\n//                 selection\n//                 fluid\n//                 options={fieldOptions}\n//                 // value={field}\n//                 onChange={(e, center) =>  {\n//                     const dumm = center.options.filter(pers => pers.id === e.target.id).map(filtered => (filtered.center));\n//                     setField(e.target.textContent);\n//                     setFieldId(e.target.id);\n//                     setLatLon(dumm);\n//                     //console.log(\"setLAtLon---->\",dumm);\n//                 }}\n//             />\n//         </Form.Field>\n//     </Form>\n// </div>\n// : null }\n// { !heatmap ?\n// <div className='form-wrapper'>\n//     <Form onSubmit={handleHeatMap}>\n//         <Form.Field>\n//             <label>{t(\"common:SelectDate\")}</label>\n//             <Dropdown \n//                 placeholder='Select Date'\n//                 fluid\n//                 selection\n//                 // options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n//                 options = {datt}\n//                 onChange={(e, {value}) => {\n//                      setDate(e.target.textContent);\n//                     //  handleDateClick(value);\n//                      setImage(value);\n//                     }}\n//             />\n//         </Form.Field>\n//         <Form.Field>\n//             <label>{t(\"common:SelectIndices\")}</label>\n//             <Dropdown \n//                 placeholder='Select Indices'\n//                 fluid\n//                 selection\n//                 options={indicesOptions}\n//                 onChange={(e, {value}) => setIndices(value)}\n//             />\n//         </Form.Field>\n//         <Button type='submit' color='green'>Generate Heat Map</Button>\n//     </Form>\n// </div>\n// : null }\n// {heatmap ? <HeatMap {...props} fieldId={fieldId ? fieldId : currentFieldId} date={date} indices={indices} selectedField={selectedField} setHeatmap={setHeatmap} imageLink={imageLink} /> : null}\n// { props.userFarms.length>0&&fieldId&&!heatmap ? props.userFarms.forEach(poly => { \n//     if(poly._id === fieldId){\n//         polygon = poly.location\n//         center = poly.address.location\n//         }\n//     }) : \n//     null\n// } \n// {!heatmap ? \n// <MapPolygon editable={false} polygon={polygon} center={center} /> \n// : null }\n//     </Container>\n// </Container>\n;};export default GisAnalysis;{/* --------Based on the below logic fillData function is working----- */}{/* {props.userFarms.length>0 ? props.userFarms.forEach(ele => fieldOptions.push({text: ele.fieldName, key: ele._id, value: ele.fieldName})) : null} */}{/* ---------Here the data is passed on to the dropdowns */}{/* {props.userFarms.length>0 ? filledData(props.userFarms) : null} */}{/* {console.log(props.userFarms.length>0 ? props.userFarms[0].farmName : \"nothing coming\")} */}{/* { props.heatMap.length>0 ? getHeatData() : null } */}{/* {heatmap ? <HeatMap {...props} date={date} indices={indices} selectedField={selectedField} setHeatmap={setHeatmap} /> : null} */}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/GisAnalysis/GisAnalysis.js"],"names":["React","useState","useEffect","Link","Grid","Menu","Container","Segment","Button","Dropdown","Form","Responsive","MapPolygon","useTranslation","HeatMap","GeneralAnalyzer","GisAnalysis","props","activeItem","setActiveItem","t","indices","setIndices","field","setField","fieldId","setFieldId","date","setDate","heatmap","setHeatmap","datt","setDatt","latlon","setLatLon","imageLink","setImageLink","image","setImage","polygon","center","fieldOptions","selectedField","currentFieldId","fillData","newData","userFarms","forEach","element","push","text","farmName","id","_id","value","location","address","indicesOptions","key","handleItemClick","e","name","handleSubmit","event","preventDefault","datee","aoi","getHeatData","fId","ele","handleHeatMap","res","getLinkForImage","document","title","length","getWeatherData","pathname","dumm","options","filter","pers","target","map","filtered","textContent","poly"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {Link} from \"react-router-dom\"\nimport { Grid, Menu, Container, Segment, Button, Dropdown, Form, Responsive } from 'semantic-ui-react';\n// import { } from 'semantic-ui-react';\nimport './GisAnalysis.scss';\nimport MapPolygon from '../MapPolygon/MapPolygon';\nimport { useTranslation } from \"react-i18next\";\nimport HeatMap from '../HeatMap/HeatMap';\nimport GeneralAnalyzer from './GisGeneralAnalyzer'\n// import { setRTLTextPlugin } from 'mapbox-gl';\n\nconst GisAnalysis = (props) => {\n    const [activeItem, setActiveItem] = useState('Recent Map');\n    const { t } = useTranslation();\n\n    const [indices, setIndices] = useState('');\n    const [field, setField] = useState('');\n    const [fieldId, setFieldId] = useState('');\n    const [date, setDate] = useState('');\n    const [heatmap, setHeatmap] = useState(false);\n    const [datt, setDatt] = useState([]);\n    const [latlon, setLatLon] = useState([]);\n    // const [imageId, setImageId] = useState('');\n    const [imageLink, setImageLink] = useState('');\n    const [image, setImage] = useState('');\n\n    let polygon = [[48.8566, 2.3522]] //=  props.userFarms.location\n    let center = [48.8566, 2.3522]//=  props.userFarms.address.location\n\n    let fieldOptions = [];\n    let selectedField = '';\n    let currentFieldId = '';\n    const fillData = (newData = props.userFarms) => {\n        newData.forEach(element => {\n            fieldOptions.push({\n                text: element.farmName,\n                id: element._id,\n                value: element.farmName,\n                polygon: element.location,\n                center: element.address.location\n            })\n        });\n        selectedField = newData[0].farmName;\n        polygon = newData[0].location;\n        center = newData[0].address.location;\n        currentFieldId = newData[0]._id;\n    }\n\n    var indicesOptions = [\n        {\n            key: 'NDVI',\n            text: 'NDVI',\n            value: 'NDVI'\n        }\n    ]\n\n\n\n    const handleItemClick = (e, { name }) => {\n        setActiveItem(name)\n        // setHeatmap(!heatmap)\n        \n    \n    };\n\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        // setHeatmap(true);\n    }\n\n    let datee = []\n    let aoi = [];\n    const getHeatData = async () => {\n        let fId = ''\n        fieldId ? fId = fieldId : fId = currentFieldId;\n\n        fieldOptions.forEach(element => {\n            if (element.id === fId) {\n                element.polygon.forEach(ele => {\n                    aoi.push([\n                        ele[1],\n                        ele[0]\n                    ]);\n                });\n            }\n        });\n        // const re = [];\n        // re =  getHeatData(aoi);\n        // //console.log(\"--%%--re--\",re);\n        // datee = aoi.map((element) => \n        //         ({\n        //             key: element.image,\n        //             value: element.image,\n        //             text: element.date.split('T')[0]\n        //         })\n        // );\n        // setDatt(datee);\n        // console.log(datee);\n        // console.log(\"---))))))----handleHeatMap----(((((((----\");\n    }\n\n\n    /* HeatMap Function */\n    const handleHeatMap = (event) => {\n        event.preventDefault();\n        if (indices === '') {\n            return;\n        }\n        // if(date === ''){\n        //     return;\n        // }\n        let fId = ''\n        fieldId ? fId = fieldId : fId = currentFieldId;\n        let res = props.getLinkForImage(image, indices, fId);\n        // console.log(\"response--> \", res);\n        setImageLink(res);\n        setHeatmap(!heatmap)\n        \n    }\n\n\n\n    useEffect(() => {\n        document.title = t(props.title);\n\n    }, [props.title]);\n\n\n    useEffect(() => {\n        //---- For Rerendering the component with new value\n        //----- This get heat data only called when changing the fields\n        getHeatData();\n        //console.log(\"latlon----> \",latlon);\n        if (latlon.length > 0) {\n            //console.log(\"getget---->> \",latlon[0][0],latlon[0][1]);\n            props.getWeatherData(latlon[0][0], latlon[0][1]);\n        }\n    }, [field]);\n\n    useEffect(() => {\n        //----- Rendering only on heatmap\n        getHeatData()\n    }, [heatmap]);\n\n    return (\n    <>\n        <Responsive minWidth = {1024}>\n            {activeItem == \"Recent Map\" ? \n            \n                <Grid columns={1} container>\n                    <Grid.Row className=\"ml-2\">\n                        <Grid.Column>\n                            {props.userFarms.length > 0 ? fillData(props.userFarms) : null}\n                            <Segment className=\"px-0 analysis-map\">\n                                <Menu pointing secondary fluid>\n                                    <Menu.Item\n                                        name=\"Recent Map\"\n                                        color=\"green\"\n                                        active={activeItem === \"Recent Map\"}\n                                        onClick={handleItemClick}\n                                    />\n                                    <Menu.Item\n                                        name=\"Timeline\"\n                                        color=\"green\"\n                                        active={activeItem === \"Timeline\"}\n                                        onClick={handleItemClick}\n                                    />\n                                    <Menu.Menu position = \"right\">\n                                        <Menu.Item name = \"Gis-app\" className = \"gis-app\">\n                                            <Link to = {{pathname: \"http://gisapp.sensegrass.com/\"}} target = \"_blank\" rel = \"noopener noreferrer\">\n                                                <Button className = \"gis-app-btn\">\n                                                    Gis Analyzer\n                                                </Button>\n                                            </Link>\n                                        </Menu.Item>\n                                    </Menu.Menu>\n                                    {/* {console.log(heatmap)} */}\n                                </Menu>\n                                <Grid columns={1}>\n                                    <Grid.Row className=\"mx-0 py-0\">\n                                        <Grid.Column className=\"segment-Gis\">\n                                            {!heatmap ?\n\n                                                <>\n                                                    {/* <div className=\"form-top\">\n                                                        <Form>\n                                                            \n                                                        </Form>\n\n                                                    </div> */}\n                                                    <div className='form-wrapper'>\n                                                        <Form onSubmit={handleHeatMap}>\n                                                            \n                                                            \n                                                            <Form.Field>\n                                                                <label>{t(\"common:AreaSelected\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Field'\n                                                                    defaultValue={field ? field : selectedField}\n                                                                    selection\n                                                                    fluid\n                                                                    options={fieldOptions}\n                                                                    // value={field}\n                                                                    onChange={(e, center) => {\n                                                                        const dumm = center.options.filter(pers => pers.id === e.target.id).map(filtered => (filtered.center));\n                                                                        setField(e.target.textContent);\n                                                                        setFieldId(e.target.id);\n                                                                        setLatLon(dumm);\n                                                                        //console.log(\"setLAtLon---->\",dumm);\n                                                                    }}\n                                                                />\n                                                            </Form.Field>\n                                                            \n                                                            <Form.Field>\n                                                                <label>{t(\"common:SelectDate\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Date'\n                                                                    fluid\n                                                                    selection\n                                                                    // options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n                                                                    options={datt}\n\n                                                                    onChange={(e, { value }) => {\n                                                                        setDate(e.target.textContent);\n                                                                        //  handleDateClick(value);\n                                                                        setImage(value);\n                                                                    }}\n                                                                />\n                                                            </Form.Field>\n\n                                                            <Form.Field>\n                                                                <label>{t(\"common:SelectIndices\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Indices'\n                                                                    fluid\n                                                                    selection\n                                                                    options={indicesOptions}\n                                                                    onChange={(e, { value }) => setIndices(value)}\n                                                                />\n                                                            </Form.Field>\n\n                                                            <Button fluid type='submit' color='green' className=\"form-button\">Generate Heat Map</Button>\n\n                                                        </Form>\n                                                    </div>\n                                                </>\n\n                                                : null\n                                            }\n\n                                            {heatmap ? <HeatMap {...props} fieldId={fieldId ? fieldId : currentFieldId} date={date} indices={indices} selectedField={selectedField}  setHeatmap = {setHeatmap} imageLink={imageLink} /> : null}\n                                            {props.userFarms.length > 0 && fieldId && !heatmap ? props.userFarms.forEach(poly => {\n                                                if (poly._id === fieldId) {\n                                                    polygon = poly.location\n                                                    center = poly.address.location\n                                                }\n                                            }) :\n                                                null\n                                            }\n\n                                            {!heatmap ? \n                                                // <div className=\"mapContainer\">\n                                                     <MapPolygon editable={true} polygon={polygon} center={center} />\n                                                /* </div>  */\n                                                : null \n                                            }\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                : setActiveItem(\"Recent Map\")\n            \n            }\n            \n        </Responsive>\n        <Responsive minWidth = {768} maxWidth = {1023.98}>\n            {activeItem == \"Recent Map\" ? \n            <Container>\n                <Grid columns={1} container>\n                    <Grid.Row className=\"ml-2\">\n                        <Grid.Column>\n                            <Segment className=\"px-0 analysis-map\">\n                                <Menu pointing secondary fluid>\n                                    <Menu.Item\n                                        name=\"Recent Map\"\n                                        color=\"green\"\n                                        active={activeItem === \"Recent Map\"}\n                                        onClick={handleItemClick}\n                                    />\n                                    <Menu.Item\n                                        name=\"Timeline\"\n                                        color=\"green\"\n                                        active={activeItem === \"Timeline\"}\n                                        onClick={handleItemClick}\n                                    />\n                                    <Menu.Menu position = \"right\">\n                                        <Menu.Item name = \"Gis-app\" className = \"gis-app\">\n                                            <Link to = {{pathname: \"http://gisapp.sensegrass.com/\"}} target = \"_blank\" rel = \"noopener noreferrer\">\n                                                <Button className = \"gis-app-btn\">\n                                                    Gis Analyzer\n                                                </Button>\n                                            </Link>\n                                        </Menu.Item>\n                                    </Menu.Menu>\n                                    {/* {console.log(heatmap)} */}\n                                </Menu>\n                                <Grid columns={1}>\n                                    <Grid.Row className=\"mx-0 py-0\">\n                                        <Grid.Column className=\"segment-Gis\">\n                                            {!heatmap ?\n\n                                                <>\n                                                    {/* <div className=\"form-top\">\n                                                        <Form>\n                                                            \n                                                        </Form>\n\n                                                    </div> */}\n                                                    <div className='form-wrapper'>\n                                                        <Form onSubmit={handleHeatMap}>\n                                                            \n                                                            \n                                                            <Form.Field>\n                                                                <label>{t(\"common:AreaSelected\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Field'\n                                                                    defaultValue={field ? field : selectedField}\n                                                                    selection\n                                                                    fluid\n                                                                    options={fieldOptions}\n                                                                    // value={field}\n                                                                    onChange={(e, center) => {\n                                                                        const dumm = center.options.filter(pers => pers.id === e.target.id).map(filtered => (filtered.center));\n                                                                        setField(e.target.textContent);\n                                                                        setFieldId(e.target.id);\n                                                                        setLatLon(dumm);\n                                                                        //console.log(\"setLAtLon---->\",dumm);\n                                                                    }}\n                                                                />\n                                                            </Form.Field>\n                                                            \n                                                            <Form.Field>\n                                                                <label>{t(\"common:SelectDate\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Date'\n                                                                    fluid\n                                                                    selection\n                                                                    // options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n                                                                    options={datt}\n\n                                                                    onChange={(e, { value }) => {\n                                                                        setDate(e.target.textContent);\n                                                                        //  handleDateClick(value);\n                                                                        setImage(value);\n                                                                    }}\n                                                                />\n                                                            </Form.Field>\n\n                                                            <Form.Field>\n                                                                <label>{t(\"common:SelectIndices\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Indices'\n                                                                    fluid\n                                                                    selection\n                                                                    options={indicesOptions}\n                                                                    onChange={(e, { value }) => setIndices(value)}\n                                                                />\n                                                            </Form.Field>\n\n                                                            <Button fluid type='submit' color='green' className=\"form-button\">Generate Heat Map</Button>\n\n                                                        </Form>\n                                                    </div>\n                                                </>\n\n                                                : null\n                                            }\n\n                                            {heatmap ? <HeatMap {...props} fieldId={fieldId ? fieldId : currentFieldId} date={date} indices={indices} selectedField={selectedField}  setHeatmap = {setHeatmap} imageLink={imageLink} /> : null}\n                                            {props.userFarms.length > 0 && fieldId && !heatmap ? props.userFarms.forEach(poly => {\n                                                if (poly._id === fieldId) {\n                                                    polygon = poly.location\n                                                    center = poly.address.location\n                                                }\n                                            }) :\n                                                null\n                                            }\n\n                                            {!heatmap ? \n                                                // <div className=\"mapContainer\">\n                                                    <MapPolygon editable={true} polygon={polygon} center={center} />\n                                                /* </div>  */\n                                                : null \n                                            }\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                </Container>\n                : setActiveItem(\"Recent Map\")\n            \n            }\n            \n        </Responsive>\n    </>\n        // <Container fluid>\n\n        //     {props.userFarms.length>0 ? fillData(props.userFarms) : null}\n\n        //     <Menu pointing secondary>\n        //         <Menu.Item \n        //             name = 'Recent Map'\n        //             color = \"green\"\n        //             active = {activeItem === 'Recent Map'}\n        //             onClick = {handleItemClick}\n        //         />\n        //         <Menu.Item \n        //             name = \"Timeline\"\n        //             color = \"green\"\n        //             active = {activeItem === 'Timeline'}\n        //             onClick = {handleItemClick}\n        //         />\n        //     </Menu>\n        //     <Container className=\"segment-Gis\">\n\n\n\n        //   { !heatmap ? \n        //   <div className='form-top'>\n        //     <Form onSubmit={handleSubmit}>\n        //         <Form.Field>\n        //             <label>{t(\"common:AreaSelected\")}</label>\n        //             <Dropdown \n        //                 placeholder='Select Field'\n        //                 defaultValue={field ? field : selectedField}\n        //                 selection\n        //                 fluid\n        //                 options={fieldOptions}\n        //                 // value={field}\n        //                 onChange={(e, center) =>  {\n        //                     const dumm = center.options.filter(pers => pers.id === e.target.id).map(filtered => (filtered.center));\n        //                     setField(e.target.textContent);\n        //                     setFieldId(e.target.id);\n        //                     setLatLon(dumm);\n        //                     //console.log(\"setLAtLon---->\",dumm);\n        //                 }}\n        //             />\n        //         </Form.Field>\n        //     </Form>\n        // </div>\n        // : null }\n\n        // { !heatmap ?\n        // <div className='form-wrapper'>\n        //     <Form onSubmit={handleHeatMap}>\n\n        //         <Form.Field>\n        //             <label>{t(\"common:SelectDate\")}</label>\n        //             <Dropdown \n        //                 placeholder='Select Date'\n        //                 fluid\n        //                 selection\n        //                 // options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n        //                 options = {datt}\n\n        //                 onChange={(e, {value}) => {\n        //                      setDate(e.target.textContent);\n        //                     //  handleDateClick(value);\n        //                      setImage(value);\n        //                     }}\n        //             />\n        //         </Form.Field>\n\n        //         <Form.Field>\n        //             <label>{t(\"common:SelectIndices\")}</label>\n        //             <Dropdown \n        //                 placeholder='Select Indices'\n        //                 fluid\n        //                 selection\n        //                 options={indicesOptions}\n        //                 onChange={(e, {value}) => setIndices(value)}\n        //             />\n        //         </Form.Field>\n\n        //         <Button type='submit' color='green'>Generate Heat Map</Button>\n\n        //     </Form>\n        // </div>\n        // : null }\n\n\n        // {heatmap ? <HeatMap {...props} fieldId={fieldId ? fieldId : currentFieldId} date={date} indices={indices} selectedField={selectedField} setHeatmap={setHeatmap} imageLink={imageLink} /> : null}\n\n        // { props.userFarms.length>0&&fieldId&&!heatmap ? props.userFarms.forEach(poly => { \n        //     if(poly._id === fieldId){\n        //         polygon = poly.location\n        //         center = poly.address.location\n        //         }\n        //     }) : \n        //     null\n        // } \n\n        // {!heatmap ? \n        // <MapPolygon editable={false} polygon={polygon} center={center} /> \n        // : null }\n\n        //     </Container>\n        // </Container>\n    );\n}\n\nexport default GisAnalysis;\n\n\n{/* --------Based on the below logic fillData function is working----- */ }\n{/* {props.userFarms.length>0 ? props.userFarms.forEach(ele => fieldOptions.push({text: ele.fieldName, key: ele._id, value: ele.fieldName})) : null} */ }\n{/* ---------Here the data is passed on to the dropdowns */ }\n\n{/* {props.userFarms.length>0 ? filledData(props.userFarms) : null} */ }\n{/* {console.log(props.userFarms.length>0 ? props.userFarms[0].farmName : \"nothing coming\")} */ }\n\n\n{/* { props.heatMap.length>0 ? getHeatData() : null } */ }\n{/* {heatmap ? <HeatMap {...props} date={date} indices={indices} selectedField={selectedField} setHeatmap={setHeatmap} /> : null} */ }"]},"metadata":{},"sourceType":"module"}