{"ast":null,"code":"import _defineProperty from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState}from'react';import{Input}from\"semantic-ui-react\";import{useTranslation}from\"react-i18next\";import{isNotValidNumber}from\"../../utils/utilsFunctions\";var extractDataFromPlace=function extractDataFromPlace(place){if(!place.geometry||!place.geometry.location){return undefined;}var lat=place.geometry.location.lat();var lng=place.geometry.location.lng();if(isNotValidNumber(lat)||isNotValidNumber(lng)){return undefined;}return{addressName:place.name||'',location:[lat,lng]};};/**\n * A react wrapper component to use Google places autocomplete api.\n * https://developers-dot-devsite-v2-prod.appspot.com/maps/documentation/javascript/examples/places-autocomplete\n * @param {Object} props Props for the route.\n * @returns {React.Component}\n */var AutoComplete=function AutoComplete(props){var _useTranslation=useTranslation('add-edit-farm'),t=_useTranslation.t;var placesInput=useRef();var placeChangeHandler=props.placeChangeHandler,fields=props.fields;var _useState=useState({address:props.address||''}),_useState2=_slicedToArray(_useState,2),values=_useState2[0],setValues=_useState2[1];var handleChange=function handleChange(name,value){setValues(_objectSpread(_objectSpread({},values),{},_defineProperty({},name,value)));};/**\n     * Method to configure and setup autocomplete input element after component load.\n     * @returns {void}\n     */var configureAutoComplete=function configureAutoComplete(){if(!window.google){throw new Error('Places API is not loaded.');}var autocomplete=new window.google.maps.places.Autocomplete(placesInput.current.inputRef.current);// Set the data fields to return when the user selects a place.\nautocomplete.setFields(fields);autocomplete.addListener('place_changed',function(){var place=autocomplete.getPlace();var data=extractDataFromPlace(place);if(data){handleChange('address',data.addressName);}placeChangeHandler(data);});};useEffect(function(){configureAutoComplete(placeChangeHandler);if(props.address!==values.address){handleChange('address',props.address);}},[props.address]);return/*#__PURE__*/React.createElement(Input,{fluid:true,ref:placesInput,placeholder:t('address-placeholder'),value:values.address||'',onChange:function onChange(e){return handleChange(e.target.name,e.target.value);},name:\"address\"});};// Specifies the default values for props\nAutoComplete.defaultProps={fields:['geometry','name']};export default AutoComplete;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/PlacesAutocomplete/Autocomplete.js"],"names":["React","useEffect","useRef","useState","Input","useTranslation","isNotValidNumber","extractDataFromPlace","place","geometry","location","undefined","lat","lng","addressName","name","AutoComplete","props","t","placesInput","placeChangeHandler","fields","address","values","setValues","handleChange","value","configureAutoComplete","window","google","Error","autocomplete","maps","places","Autocomplete","current","inputRef","setFields","addListener","getPlace","data","e","target","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Input } from \"semantic-ui-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { isNotValidNumber } from \"../../utils/utilsFunctions\";\n\nconst extractDataFromPlace = (place) => {\n    if (!place.geometry || !place.geometry.location) {\n        return undefined;\n    }\n    const lat = place.geometry.location.lat();\n    const lng = place.geometry.location.lng();\n    if (isNotValidNumber(lat) || isNotValidNumber(lng)) {\n        return undefined;\n    }\n    return {\n        addressName: place.name || '',\n        location: [lat, lng]\n    };\n}\n\n/**\n * A react wrapper component to use Google places autocomplete api.\n * https://developers-dot-devsite-v2-prod.appspot.com/maps/documentation/javascript/examples/places-autocomplete\n * @param {Object} props Props for the route.\n * @returns {React.Component}\n */\nconst AutoComplete = (props) => {\n    const { t } = useTranslation('add-edit-farm');\n    const placesInput = useRef();\n    const { placeChangeHandler, fields } = props;\n    const [values, setValues] = useState({\n        address: props.address || ''\n    });\n    const handleChange = (name, value) => {\n        setValues({ ...values, [name]: value });\n    };\n    /**\n     * Method to configure and setup autocomplete input element after component load.\n     * @returns {void}\n     */\n    const configureAutoComplete = () => {\n        if (!window.google) {\n            throw new Error('Places API is not loaded.');\n        }\n        const autocomplete = new window.google.maps.places.Autocomplete(placesInput.current.inputRef.current);\n        // Set the data fields to return when the user selects a place.\n        autocomplete.setFields(fields);\n        autocomplete.addListener('place_changed', function () {\n            const place = autocomplete.getPlace();\n            const data = extractDataFromPlace(place);\n            if (data) {\n                handleChange('address', data.addressName);\n            }\n            placeChangeHandler(data);\n        });\n    };\n    useEffect(() => {\n        configureAutoComplete(placeChangeHandler);\n        if (props.address !== values.address) {\n            handleChange('address', props.address);\n        }\n    }, [props.address]);\n    return (<Input fluid ref={placesInput}\n        placeholder={t('address-placeholder')}\n        value={values.address || ''}\n        onChange={(e) => handleChange(e.target.name, e.target.value)}\n        name=\"address\"></Input>);\n}\n// Specifies the default values for props\nAutoComplete.defaultProps = {\n    fields: ['geometry', 'name']\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}