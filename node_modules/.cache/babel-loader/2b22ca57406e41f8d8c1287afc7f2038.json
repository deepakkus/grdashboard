{"ast":null,"code":"import _regeneratorRuntime from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{Grid,GridRow,Button,Dropdown}from\"semantic-ui-react\";import MapPolygon from\"../../MapPolygon/MapPolygon\";import AutoComplete from\"../../PlacesAutocomplete/Autocomplete\";import{fillSelect,calculateArea}from\"../../../utils/utilsFunctions\";import{useTranslation}from\"react-i18next\";import\"./AddEditFarm.scss\";import sgLogo from\"../../../images/LOGO.svg\";import{updateUserFarmDevice}from\"../../../services/farm\";export default function AddEditFarm(props){var _useTranslation=useTranslation([\"add-edit-farm\",\"common\"]),t=_useTranslation.t;var farmId=props.farmId||\"\";console.log({farmId:farmId});var farmSelected=farmId?props.userFarms.find(function(f){return f._id===farmId;}):undefined;var defaultFarm=function defaultFarm(){return farmSelected?farmSelected:{location:[],soilTypeId:\"\",terrainTypeId:\"\",waterSourceId:\"\",address:{addressName:\"\",location:[]}};};var defaultMap={area:0,polygon:defaultFarm().location.length?defaultFarm().location:[],center:defaultFarm().address.location.length?defaultFarm().address.location:[]};var defaultAddress={addressName:defaultFarm().address.addressName,location:defaultFarm().address.location};var _useState=useState(defaultMap),_useState2=_slicedToArray(_useState,2),map=_useState2[0],setMap=_useState2[1];var _useState3=useState(defaultAddress),_useState4=_slicedToArray(_useState3,2),address=_useState4[0],setAddress=_useState4[1];var _useState5=useState(defaultFarm()),_useState6=_slicedToArray(_useState5,2),farm=_useState6[0],setFarm=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),soilTypeId=_useState8[0],setSoilTypeId=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),terrainTypeId=_useState10[0],setTerrainTypeId=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),waterSourceId=_useState12[0],setWaterSourceId=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),saving=_useState14[0],setSaving=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),userFarms=_useState16[0],setUserFarms=_useState16[1];var _useState17=useState([]),_useState18=_slicedToArray(_useState17,2),browserLoc=_useState18[0],setBrowserLoc=_useState18[1];var setCenter=function setCenter(position){var centerNew=[position.coords.latitude,position.coords.longitude];setBrowserLoc(centerNew);};var getBrowserLocation=function getBrowserLocation(){if(!map.center.length&&navigator.geolocation){navigator.geolocation.getCurrentPosition(setCenter);}};var setDefaults=function setDefaults(){var map=defaultMap;if(defaultMap.polygon&&defaultMap.polygon.length){map=_objectSpread(_objectSpread({},defaultMap),{},{area:calculateArea([defaultMap.polygon])*0.000247105});}setMap(map);setAddress(defaultAddress);setFarm(defaultFarm());setSoilTypeId(defaultFarm().soilTypeId);setTerrainTypeId(defaultFarm().terrainTypeId);setWaterSourceId(defaultFarm().waterSourceId);setUserFarms(props.userFarms);};useEffect(function(){document.title=t(props.title);getBrowserLocation();if(userFarms.length!==props.userFarms.length){setDefaults();}});var onChange=function onChange(polygon){var area=calculateArea(polygon&&polygon.length?[polygon]:[])*0.000247105;// area in sq meters converting to acres\nvar mapNew=_objectSpread({},map);mapNew.area=area;mapNew.polygon=polygon;setMap(mapNew);};var handleSave=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var farmName,addFarm,editFarm,_polygon;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();farmName=farm.farmName?farm.farmName:\"Field\"+(props.userFarms.length+1);// TODO add validation error messages\nif(!validateForm()){_context.next=31;break;}addFarm=props.addFarm,editFarm=props.editFarm;setSaving(true);_polygon=map.polygon;farm.location=_polygon;farm.farmName=farmName;farm.userId=props.userId;farm.address=address;farm.soilTypeId=soilTypeId;farm.terrainTypeId=terrainTypeId;farm.waterSourceId=waterSourceId;_context.prev=13;if(!farm._id){_context.next=21;break;}_context.next=17;return editFarm(farm,props.token);case 17:updateUserFarmDevice(props.userId);if(props.handleClose){props.handleClose();}_context.next=25;break;case 21:_context.next=23;return addFarm(farm,props.token);case 23:updateUserFarmDevice(props.userId);if(props.handleClose){props.handleClose();}case 25:props.history.push(\"/dashboard\");_context.next=31;break;case 28:_context.prev=28;_context.t0=_context[\"catch\"](13);console.log(_context.t0);case 31:case\"end\":return _context.stop();}}},_callee,null,[[13,28]]);}));return function handleSave(_x){return _ref.apply(this,arguments);};}();var validateForm=function validateForm(){var polygon=map.polygon;var polygonErr=false;var mandatoryFieldsErr=false;var addressErr=false;if(!polygon||polygon.length<4){polygonErr=true;}if(!soilTypeId||!terrainTypeId||!waterSourceId){mandatoryFieldsErr=true;}if(!address.addressName||!address.location.length){addressErr=true;}return!(polygonErr||mandatoryFieldsErr||addressErr);};var getMapCenter=function getMapCenter(){var centerProp=address.location;if(!centerProp.length){centerProp=map.center.length?map.center:[];}if(!centerProp.length){centerProp=browserLoc.length?browserLoc:[];}return!centerProp.length?undefined:centerProp;};var polygon=farm.location&&farm.location.length&&JSON.stringify(farm.address.location)===JSON.stringify(address.location)?farm.location:[];return/*#__PURE__*/React.createElement(\"div\",{className:\"complelet-profile\"},/*#__PURE__*/React.createElement(Grid,null,/*#__PURE__*/React.createElement(Grid.Row,null,/*#__PURE__*/React.createElement(Grid.Column,{width:5},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"top\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"/\",onClick:function onClick(){return props.history.push(\"/\");}},/*#__PURE__*/React.createElement(\"img\",{className:\"iclogo\",src:sgLogo,alt:\"logo\"}))),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h5\",{className:\"ml-3 pt-4 title\"},\"sensegrass\"))),/*#__PURE__*/React.createElement(Grid,{className:\"body\"},/*#__PURE__*/React.createElement(Grid.Row,{columns:1},/*#__PURE__*/React.createElement(Grid.Column,null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h6\",{className:\"mb-4  mt-4\"},\"enter farm details\"),/*#__PURE__*/React.createElement(AutoComplete,{placeChangeHandler:function placeChangeHandler(address){setAddress(address);},address:defaultFarm().address.addressName?defaultFarm().address.addressName:address.addressName}),/*#__PURE__*/React.createElement(\"h6\",{className:\"mb-4  mt-4\"},\"selected farm area is\"),/*#__PURE__*/React.createElement(\"h1\",{className:\"acres\"},Math.ceil(map.area*100)/100,\" acres\"),/*#__PURE__*/React.createElement(\"h6\",{className:\"mb-4\",style:{textTransform:\"lowercase\"}},\" free up to 5 acres\")))),/*#__PURE__*/React.createElement(GridRow,{columns:2},/*#__PURE__*/React.createElement(Grid.Column,null,/*#__PURE__*/React.createElement(\"h6\",null,\"select soil type \"),/*#__PURE__*/React.createElement(Dropdown,{className:\"mb-2 mt-2 select\",placeholder:t(\"common:select\"),options:fillSelect(\"soil\",props.soiltypes),onChange:function onChange(e,data){setSoilTypeId(data.value);},value:soilTypeId,search:true,selection:true})),/*#__PURE__*/React.createElement(Grid.Column,null,/*#__PURE__*/React.createElement(\"h6\",null,\"terrain type\"),/*#__PURE__*/React.createElement(Dropdown,{className:\"mb-2 mt-2 select\",placeholder:t(\"common:select\"),options:fillSelect(\"terrain\",props.terraintypes),onChange:function onChange(e,data){setTerrainTypeId(data.value);},value:terrainTypeId,search:true,selection:true}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h6\",{className:\"mt-2\"},\"water source\"),/*#__PURE__*/React.createElement(Dropdown,{className:\"mb-2 mt-2 select\",placeholder:t(\"common:select\"),options:fillSelect(\"watersource\",props.watersources),onChange:function onChange(e,data){setWaterSourceId(data.value);},value:waterSourceId,search:true,selection:true})),/*#__PURE__*/React.createElement(Button,{color:\"green\",className:\"bttn mt-4\",onClick:handleSave,disabled:saving},t(\"common:save\"))))))),/*#__PURE__*/React.createElement(Grid.Column,{width:11},/*#__PURE__*/React.createElement(MapPolygon,{onChange:onChange,editable:true,center:getMapCenter(),polygon:polygon,zoom:address.location&&address.location.length?20:16})))));}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/Page/AddEditFarm/AddEditFarm.js"],"names":["React","useState","useEffect","Grid","GridRow","Button","Dropdown","MapPolygon","AutoComplete","fillSelect","calculateArea","useTranslation","updateUserFarmDevice","AddEditFarm","props","t","farmId","console","log","farmSelected","userFarms","find","f","_id","undefined","defaultFarm","location","soilTypeId","terrainTypeId","waterSourceId","address","addressName","defaultMap","area","polygon","length","center","defaultAddress","map","setMap","setAddress","farm","setFarm","setSoilTypeId","setTerrainTypeId","setWaterSourceId","saving","setSaving","setUserFarms","browserLoc","setBrowserLoc","setCenter","position","centerNew","coords","latitude","longitude","getBrowserLocation","navigator","geolocation","getCurrentPosition","setDefaults","document","title","onChange","mapNew","handleSave","event","preventDefault","farmName","validateForm","addFarm","editFarm","userId","token","handleClose","history","push","polygonErr","mandatoryFieldsErr","addressErr","getMapCenter","centerProp","JSON","stringify","sgLogo","Math","ceil","textTransform","soiltypes","e","data","value","terraintypes","watersources"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Grid, GridRow, Button, Dropdown } from \"semantic-ui-react\";\nimport MapPolygon from \"../../MapPolygon/MapPolygon\";\nimport AutoComplete from \"../../PlacesAutocomplete/Autocomplete\";\nimport { fillSelect, calculateArea } from \"../../../utils/utilsFunctions\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./AddEditFarm.scss\";\nimport sgLogo from \"../../../images/LOGO.svg\";\nimport { updateUserFarmDevice } from \"../../../services/farm\";\n\nexport default function AddEditFarm(props) {\n  const { t } = useTranslation([\"add-edit-farm\", \"common\"]);\n  const farmId = props.farmId || \"\";\n  console.log({ farmId });\n  const farmSelected = farmId\n    ? props.userFarms.find((f) => f._id === farmId)\n    : undefined;\n  const defaultFarm = () => {\n    return farmSelected\n      ? farmSelected\n      : {\n        location: [],\n        soilTypeId: \"\",\n        terrainTypeId: \"\",\n        waterSourceId: \"\",\n        address: {\n          addressName: \"\",\n          location: [],\n        },\n      };\n  };\n  const defaultMap = {\n    area: 0,\n    polygon: defaultFarm().location.length ? defaultFarm().location : [],\n    center: defaultFarm().address.location.length\n      ? defaultFarm().address.location\n      : [],\n  };\n  const defaultAddress = {\n    addressName: defaultFarm().address.addressName,\n    location: defaultFarm().address.location,\n  };\n  const [map, setMap] = useState(defaultMap);\n  const [address, setAddress] = useState(defaultAddress);\n  const [farm, setFarm] = useState(defaultFarm());\n\n  const [soilTypeId, setSoilTypeId] = useState(\"\");\n  const [terrainTypeId, setTerrainTypeId] = useState(\"\");\n  const [waterSourceId, setWaterSourceId] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n  const [userFarms, setUserFarms] = useState([]);\n  const [browserLoc, setBrowserLoc] = useState([]);\n\n  const setCenter = (position) => {\n    const centerNew = [position.coords.latitude, position.coords.longitude];\n    setBrowserLoc(centerNew);\n  };\n\n  const getBrowserLocation = () => {\n    if (!map.center.length && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(setCenter);\n    }\n  };\n  const setDefaults = () => {\n    let map = defaultMap;\n    if (defaultMap.polygon && defaultMap.polygon.length) {\n      map = {\n        ...defaultMap,\n        area: calculateArea([defaultMap.polygon]) * 0.000247105,\n      };\n    }\n    setMap(map);\n    setAddress(defaultAddress);\n    setFarm(defaultFarm());\n    setSoilTypeId(defaultFarm().soilTypeId);\n    setTerrainTypeId(defaultFarm().terrainTypeId);\n    setWaterSourceId(defaultFarm().waterSourceId);\n    setUserFarms(props.userFarms);\n  };\n\n  useEffect(() => {\n    document.title = t(props.title);\n    getBrowserLocation();\n    if (userFarms.length !== props.userFarms.length) {\n      setDefaults();\n    }\n  });\n\n  const onChange = (polygon) => {\n    const area =\n      calculateArea(polygon && polygon.length ? [polygon] : []) * 0.000247105; // area in sq meters converting to acres\n    const mapNew = { ...map };\n    mapNew.area = area;\n    mapNew.polygon = polygon;\n    setMap(mapNew);\n  };\n\n  const handleSave = async (event) => {\n    event.preventDefault();\n    const farmName = farm.farmName\n      ? farm.farmName\n      : \"Field\" + (props.userFarms.length + 1);\n    // TODO add validation error messages\n    if (validateForm()) {\n      const { addFarm, editFarm } = props;\n      setSaving(true);\n      const { polygon } = map;\n      farm.location = polygon;\n      farm.farmName = farmName;\n      farm.userId = props.userId;\n      farm.address = address;\n      farm.soilTypeId = soilTypeId;\n      farm.terrainTypeId = terrainTypeId;\n      farm.waterSourceId = waterSourceId;\n      try {\n        if (farm._id) {\n          await editFarm(farm, props.token);\n          updateUserFarmDevice(props.userId);\n          if (props.handleClose) {\n            props.handleClose();\n          }\n        } else {\n          await addFarm(farm, props.token);\n          updateUserFarmDevice(props.userId);\n          if (props.handleClose) {\n            props.handleClose();\n          }\n        }\n        props.history.push(\"/dashboard\");\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const validateForm = () => {\n    const { polygon } = map;\n    let polygonErr = false;\n    let mandatoryFieldsErr = false;\n    let addressErr = false;\n\n    if (!polygon || polygon.length < 4) {\n      polygonErr = true;\n    }\n    if (!soilTypeId || !terrainTypeId || !waterSourceId) {\n      mandatoryFieldsErr = true;\n    }\n    if (!address.addressName || !address.location.length) {\n      addressErr = true;\n    }\n    return !(polygonErr || mandatoryFieldsErr || addressErr);\n  };\n\n  const getMapCenter = () => {\n    let centerProp = address.location;\n    if (!centerProp.length) {\n      centerProp = map.center.length ? map.center : [];\n    }\n    if (!centerProp.length) {\n      centerProp = browserLoc.length ? browserLoc : [];\n    }\n    return !centerProp.length ? undefined : centerProp;\n  };\n\n  const polygon =\n    farm.location &&\n      farm.location.length &&\n      JSON.stringify(farm.address.location) === JSON.stringify(address.location)\n      ? farm.location\n      : [];\n  return (\n    <div className=\"complelet-profile\">\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={5}>\n            <div>\n              <div className=\"top\">\n                <div>\n                  <a href=\"/\" onClick={() => props.history.push(\"/\")}>\n                    <img className=\"iclogo\" src={sgLogo} alt=\"logo\" />\n                  </a>\n                </div>\n                <div>\n                  <h5 className=\"ml-3 pt-4 title\">sensegrass</h5>\n                </div>\n              </div>\n              <Grid className=\"body\">\n                <Grid.Row columns={1}>\n                  <Grid.Column>\n                    <div>\n                      <h6 className=\"mb-4  mt-4\">enter farm details</h6>\n                      <AutoComplete\n                        placeChangeHandler={(address) => {\n                          setAddress(address);\n                        }}\n                        address={\n                          defaultFarm().address.addressName\n                            ? defaultFarm().address.addressName\n                            : address.addressName\n                        }\n                      ></AutoComplete>\n                      <h6 className=\"mb-4  mt-4\">selected farm area is</h6>\n                      <h1 className=\"acres\">\n                        {Math.ceil(map.area * 100) / 100} acres\n                      </h1>\n                      <h6 className=\"mb-4\" style={{ textTransform: \"lowercase\" }}> free up to 5 acres</h6>\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n                <GridRow columns={2}>\n                  <Grid.Column>\n                    <h6>select soil type </h6>\n                    <Dropdown\n                      className=\"mb-2 mt-2 select\"\n                      placeholder={t(\"common:select\")}\n                      options={fillSelect(\"soil\", props.soiltypes)}\n                      onChange={(e, data) => {\n                        setSoilTypeId(data.value);\n                      }}\n                      value={soilTypeId}\n                      search\n                      selection\n                    />\n                  </Grid.Column>\n                  <Grid.Column>\n                    <h6>terrain type</h6>\n                    <Dropdown\n                      className=\"mb-2 mt-2 select\"\n                      placeholder={t(\"common:select\")}\n                      options={fillSelect(\"terrain\", props.terraintypes)}\n                      onChange={(e, data) => {\n                        setTerrainTypeId(data.value);\n                      }}\n                      value={terrainTypeId}\n                      search\n                      selection\n                    />\n                    <div>\n                      <h6 className=\"mt-2\">water source</h6>\n                      <Dropdown\n                        className=\"mb-2 mt-2 select\"\n                        placeholder={t(\"common:select\")}\n                        options={fillSelect(\"watersource\", props.watersources)}\n                        onChange={(e, data) => {\n                          setWaterSourceId(data.value);\n                        }}\n                        value={waterSourceId}\n                        search\n                        selection\n                      />\n                    </div>\n                    <Button\n                      color=\"green\"\n                      className=\"bttn mt-4\"\n                      onClick={handleSave}\n                      disabled={saving}\n                    >\n                      {t(\"common:save\")}\n                    </Button>\n                  </Grid.Column>\n                </GridRow>\n              </Grid>\n            </div>\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <MapPolygon\n              onChange={onChange}\n              editable={true}\n              center={getMapCenter()}\n              polygon={polygon}\n              zoom={address.location && address.location.length ? 20 : 16}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}