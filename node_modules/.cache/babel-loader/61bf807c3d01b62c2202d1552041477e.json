{"ast":null,"code":"import{connect}from\"react-redux\";import Dashboard from\"../components/Page/Dashboard\";import{getSensorsData}from\"../actions/sensors\";import{getWeatherData}from\"../actions/weather\";import{getUserFarmCropCycles}from\"../actions/cropcycles\";import{addFarm,editFarm}from\"../actions/farms\";import{getIdealRange}from\"../actions/ranges\";import{addActivity}from\"../actions/activities\";var mapStateToProps=function mapStateToProps(state){return{title:\"dashboard\",// key of translation, not the translated text\nuserId:state.user.userId,token:state.user.token,userDevices:state.devices.userDevices,sensors:state.sensors.sensormeasures,userFarms:state.farms.userFarms,lookup:state.lookup,ranges:state.ranges,history_data:state.history_data,soiltypes:state.lookup.soiltypes,terraintypes:state.lookup.terraintypes,watersources:state.lookup.watersources,croptypes:state.lookup.croptypes,cultivationtypes:state.lookup.cultivationtypes,activitytypes:state.lookup.activities,currentcropcycles:state.cropCycles.userCurrentCropCycles,userFarmCropCycles:state.cropCycles.userFarmCropCycle};};export default connect(mapStateToProps,{getSensorsData:getSensorsData,getWeatherData:getWeatherData,getUserFarmCropCycles:getUserFarmCropCycles,addFarm:addFarm,editFarm:editFarm,getIdealRange:getIdealRange,addActivity:addActivity})(Dashboard);","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/containers/Dashboard.js"],"names":["connect","Dashboard","getSensorsData","getWeatherData","getUserFarmCropCycles","addFarm","editFarm","getIdealRange","addActivity","mapStateToProps","state","title","userId","user","token","userDevices","devices","sensors","sensormeasures","userFarms","farms","lookup","ranges","history_data","soiltypes","terraintypes","watersources","croptypes","cultivationtypes","activitytypes","activities","currentcropcycles","cropCycles","userCurrentCropCycles","userFarmCropCycles","userFarmCropCycle"],"mappings":"AAAA,OAASA,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,SAAP,KAAsB,8BAAtB,CACA,OAASC,cAAT,KAA+B,oBAA/B,CACA,OAASC,cAAT,KAA+B,oBAA/B,CACA,OAASC,qBAAT,KAAsC,uBAAtC,CACA,OAASC,OAAT,CAAkBC,QAAlB,KAAkC,kBAAlC,CACA,OAASC,aAAT,KAA8B,mBAA9B,CACA,OAASC,WAAT,KAA4B,uBAA5B,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CACjC,MAAO,CACLC,KAAK,CAAE,WADF,CACe;AACpBC,MAAM,CAAEF,KAAK,CAACG,IAAN,CAAWD,MAFd,CAGLE,KAAK,CAAEJ,KAAK,CAACG,IAAN,CAAWC,KAHb,CAILC,WAAW,CAAEL,KAAK,CAACM,OAAN,CAAcD,WAJtB,CAKLE,OAAO,CAAEP,KAAK,CAACO,OAAN,CAAcC,cALlB,CAMLC,SAAS,CAAET,KAAK,CAACU,KAAN,CAAYD,SANlB,CAOLE,MAAM,CAAEX,KAAK,CAACW,MAPT,CAQLC,MAAM,CAAEZ,KAAK,CAACY,MART,CASLC,YAAY,CAAEb,KAAK,CAACa,YATf,CAULC,SAAS,CAAEd,KAAK,CAACW,MAAN,CAAaG,SAVnB,CAWLC,YAAY,CAAEf,KAAK,CAACW,MAAN,CAAaI,YAXtB,CAYLC,YAAY,CAAEhB,KAAK,CAACW,MAAN,CAAaK,YAZtB,CAaLC,SAAS,CAAEjB,KAAK,CAACW,MAAN,CAAaM,SAbnB,CAcLC,gBAAgB,CAAElB,KAAK,CAACW,MAAN,CAAaO,gBAd1B,CAeLC,aAAa,CAAEnB,KAAK,CAACW,MAAN,CAAaS,UAfvB,CAgBLC,iBAAiB,CAAErB,KAAK,CAACsB,UAAN,CAAiBC,qBAhB/B,CAiBLC,kBAAkB,CAAExB,KAAK,CAACsB,UAAN,CAAiBG,iBAjBhC,CAAP,CAmBD,CApBD,CAsBA,cAAenC,CAAAA,OAAO,CAACS,eAAD,CAAkB,CACtCP,cAAc,CAAdA,cADsC,CAEtCC,cAAc,CAAdA,cAFsC,CAGtCC,qBAAqB,CAArBA,qBAHsC,CAItCC,OAAO,CAAPA,OAJsC,CAKtCC,QAAQ,CAARA,QALsC,CAMtCC,aAAa,CAAbA,aANsC,CAOtCC,WAAW,CAAXA,WAPsC,CAAlB,CAAP,CAQZP,SARY,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Dashboard from \"../components/Page/Dashboard\";\nimport { getSensorsData } from \"../actions/sensors\";\nimport { getWeatherData } from \"../actions/weather\";\nimport { getUserFarmCropCycles } from \"../actions/cropcycles\";\nimport { addFarm, editFarm } from \"../actions/farms\";\nimport { getIdealRange } from \"../actions/ranges\";\nimport { addActivity } from \"../actions/activities\";\n\nconst mapStateToProps = (state) => {\n  return {\n    title: \"dashboard\", // key of translation, not the translated text\n    userId: state.user.userId,\n    token: state.user.token,\n    userDevices: state.devices.userDevices,\n    sensors: state.sensors.sensormeasures,\n    userFarms: state.farms.userFarms,\n    lookup: state.lookup,\n    ranges: state.ranges,\n    history_data: state.history_data,\n    soiltypes: state.lookup.soiltypes,\n    terraintypes: state.lookup.terraintypes,\n    watersources: state.lookup.watersources,\n    croptypes: state.lookup.croptypes,\n    cultivationtypes: state.lookup.cultivationtypes,\n    activitytypes: state.lookup.activities,\n    currentcropcycles: state.cropCycles.userCurrentCropCycles,\n    userFarmCropCycles: state.cropCycles.userFarmCropCycle,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getSensorsData,\n  getWeatherData,\n  getUserFarmCropCycles,\n  addFarm,\n  editFarm,\n  getIdealRange,\n  addActivity,\n})(Dashboard);\n"]},"metadata":{},"sourceType":"module"}