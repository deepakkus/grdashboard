{"ast":null,"code":"import axios from \"axios\";\nimport { ADD_DEVICE, ADD_DEVICE_ERROR, SET_DEVICES, GET_DEVICES_ERROR, GET_DEVICES_DROPDOWN_OPTIONS, GET_DEVICES_DROPDOWN_OPTIONS_ERROR } from \"./types\";\nexport const saveDevice = (device, token) => async dispatch => {\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/device`, device, {\n      headers: {\n        Authorization: `Bearer ${token} ${device.userId}`\n      }\n    });\n    dispatch({\n      type: ADD_DEVICE,\n      payload: res.data\n    });\n    return res.data;\n  } catch (err) {\n    dispatch({\n      type: ADD_DEVICE_ERROR,\n      payload: err.response //   payload: { msg: err.response },\n      // payload: { msg: err.response.statusText, status: err.response.status },\n\n    });\n    return err.response;\n  }\n};\nexport const getUserDevices = (userId, token) => async dispatch => {\n  try {\n    const res = await axios.get(`${process.env.REACT_APP_API_URL}/device/all/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token} ${userId}`\n      }\n    });\n    dispatch({\n      type: SET_DEVICES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_DEVICES_ERROR,\n      payload: {\n        msg: err.response\n      }\n    });\n  }\n};\nexport const getUserDevicesOptions = (userDevices, deviceTypeId) => async dispatch => {\n  try {\n    const getUserDevices_Options = (userDevices, deviceTypeId) => {\n      return userDevices.filter(d => d.deviceTypeId === deviceTypeId);\n    };\n\n    const UserDevicesOptions = getUserDevices_Options(userDevices, deviceTypeId);\n    console.log(UserDevicesOptions);\n    dispatch({\n      type: GET_DEVICES_DROPDOWN_OPTIONS,\n      payload: UserDevicesOptions\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_DEVICES_DROPDOWN_OPTIONS_ERROR,\n      payload: {\n        msg: err.response\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/deepakkumarsingh/Downloads/banao_lg/sensegrass/src/actions/devices.js"],"names":["axios","ADD_DEVICE","ADD_DEVICE_ERROR","SET_DEVICES","GET_DEVICES_ERROR","GET_DEVICES_DROPDOWN_OPTIONS","GET_DEVICES_DROPDOWN_OPTIONS_ERROR","saveDevice","device","token","dispatch","res","post","process","env","REACT_APP_API_URL","headers","Authorization","userId","type","payload","data","err","response","getUserDevices","get","msg","getUserDevicesOptions","userDevices","deviceTypeId","getUserDevices_Options","filter","d","UserDevicesOptions","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,UADF,EAEEC,gBAFF,EAGEC,WAHF,EAIEC,iBAJF,EAKEC,4BALF,EAMEC,kCANF,QAOO,SAPP;AASA,OAAO,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB,MAAOC,QAAP,IAAoB;AAC/D,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAN,CACf,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,SADjB,EAEhBP,MAFgB,EAGhB;AACEQ,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASR,KAAM,IAAGD,MAAM,CAACU,MAAO;AADzC;AADX,KAHgB,CAAlB;AASAR,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAElB,UADC;AAEPmB,MAAAA,OAAO,EAAET,GAAG,CAACU;AAFN,KAAD,CAAR;AAIA,WAAOV,GAAG,CAACU,IAAX;AACD,GAfD,CAeE,OAAOC,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEjB,gBADC;AAEPkB,MAAAA,OAAO,EAAEE,GAAG,CAACC,QAFN,CAGP;AACA;;AAJO,KAAD,CAAR;AAMA,WAAOD,GAAG,CAACC,QAAX;AACD;AACF,CAzBM;AA2BP,OAAO,MAAMC,cAAc,GAAG,CAACN,MAAD,EAAST,KAAT,KAAmB,MAAOC,QAAP,IAAoB;AACnE,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMX,KAAK,CAACyB,GAAN,CACf,GAAEZ,OAAO,CAACC,GAAR,CAAYC,iBAAkB,eAAcG,MAAO,EADtC,EAEhB;AACEF,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASR,KAAM,IAAGS,MAAO;AADlC;AADX,KAFgB,CAAlB;AAQAR,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEhB,WADC;AAEPiB,MAAAA,OAAO,EAAET,GAAG,CAACU;AAFN,KAAD,CAAR;AAID,GAbD,CAaE,OAAOC,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEf,iBADC;AAEPgB,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAEJ,GAAG,CAACC;AAAX;AAFF,KAAD,CAAR;AAID;AACF,CApBM;AAsBP,OAAO,MAAMI,qBAAqB,GAAG,CAACC,WAAD,EAAcC,YAAd,KAA+B,MAClEnB,QADkE,IAE/D;AACH,MAAI;AACF,UAAMoB,sBAAsB,GAAG,CAACF,WAAD,EAAcC,YAAd,KAA+B;AAC5D,aAAOD,WAAW,CAACG,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACH,YAAF,KAAmBA,YAA7C,CAAP;AACD,KAFD;;AAGA,UAAMI,kBAAkB,GAAGH,sBAAsB,CAC/CF,WAD+C,EAE/CC,YAF+C,CAAjD;AAIAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AAEAvB,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEd,4BADC;AAEPe,MAAAA,OAAO,EAAEa;AAFF,KAAD,CAAR;AAID,GAdD,CAcE,OAAOX,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEb,kCADC;AAEPc,MAAAA,OAAO,EAAE;AAAEM,QAAAA,GAAG,EAAEJ,GAAG,CAACC;AAAX;AAFF,KAAD,CAAR;AAID;AACF,CAvBM","sourcesContent":["import axios from \"axios\";\n\nimport {\n  ADD_DEVICE,\n  ADD_DEVICE_ERROR,\n  SET_DEVICES,\n  GET_DEVICES_ERROR,\n  GET_DEVICES_DROPDOWN_OPTIONS,\n  GET_DEVICES_DROPDOWN_OPTIONS_ERROR,\n} from \"./types\";\n\nexport const saveDevice = (device, token) => async (dispatch) => {\n  try {\n    const res = await axios.post(\n      `${process.env.REACT_APP_API_URL}/device`,\n      device,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${device.userId}`,\n        },\n      }\n    );\n    dispatch({\n      type: ADD_DEVICE,\n      payload: res.data,\n    });\n    return res.data;\n  } catch (err) {\n    dispatch({\n      type: ADD_DEVICE_ERROR,\n      payload: err.response,\n      //   payload: { msg: err.response },\n      // payload: { msg: err.response.statusText, status: err.response.status },\n    });\n    return err.response;\n  }\n};\n\nexport const getUserDevices = (userId, token) => async (dispatch) => {\n  try {\n    const res = await axios.get(\n      `${process.env.REACT_APP_API_URL}/device/all/${userId}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`,\n        },\n      }\n    );\n    dispatch({\n      type: SET_DEVICES,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_DEVICES_ERROR,\n      payload: { msg: err.response },\n    });\n  }\n};\n\nexport const getUserDevicesOptions = (userDevices, deviceTypeId) => async (\n  dispatch\n) => {\n  try {\n    const getUserDevices_Options = (userDevices, deviceTypeId) => {\n      return userDevices.filter((d) => d.deviceTypeId === deviceTypeId);\n    };\n    const UserDevicesOptions = getUserDevices_Options(\n      userDevices,\n      deviceTypeId\n    );\n    console.log(UserDevicesOptions);\n\n    dispatch({\n      type: GET_DEVICES_DROPDOWN_OPTIONS,\n      payload: UserDevicesOptions,\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_DEVICES_DROPDOWN_OPTIONS_ERROR,\n      payload: { msg: err.response },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}