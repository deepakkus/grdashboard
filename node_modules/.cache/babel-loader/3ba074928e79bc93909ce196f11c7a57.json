{"ast":null,"code":"// const myarr = [\n//   1,\n//   2,\n//   3,\n//   4,\n//   5,\n//   6,\n//   7,\n//   8,\n//   9,\n//   10,\n//   11,\n//   12,\n//   13,\n//   14,\n//   15,\n//   16,\n//   17,\n//   18,\n//   19,\n//   20,\n//   21,\n//   22,\n//   23,\n// ];\n// const get_7d_data = (arr) => {\n//   return arr.slice();\n// };\n// const get_4weeks_data = (arr) => {\n//   let newArr = [];\n//   for (let step = 0; step < arr.length; step += 7) {\n//     newArr.push(arr[step]);\n//   }\n//   return newArr;\n// };\n// console.log(get_4weeks_data(myarr));\n// const get_12Months_data = (arr) => {\n//   let newArr = [];\n//   for (let step = 0; step < arr.length; step += 30) {\n//     newArr.push(arr[step]);\n//   }\n//   return newArr;\n// };\nexport const data = [{\n  id: 1,\n  name: \"Nitrogen\",\n  info: {\n    H: \"High nitrogen. Grow root/shoot/fruit intensive plants such as carrot, mustard, lettuce, spinach.\",\n    min: 280,\n    L: \"Low nitrogen. Apply nitrogen based fertilizer. Grow nitrogen fixating plants. fkjnfkjgndfgndkfgn\",\n    max: 560,\n    scientific_name: \"generic\"\n  },\n  data: [{\n    ranges: 350,\n    YAxis: 250\n  }, {\n    ranges: 300,\n    YAxis: 300\n  }, {\n    ranges: 500,\n    YAxis: 350\n  }, {\n    ranges: 300,\n    YAxis: 400\n  }, {\n    ranges: 500,\n    YAxis: 450\n  }, {\n    ranges: 350,\n    YAxis: 500\n  }, {\n    ranges: 450,\n    YAxis: 550\n  }, {\n    ranges: 450,\n    YAxis: 600\n  }]\n}, {\n  id: 2,\n  name: \"Phosphorus\",\n  info: {\n    H: \"High phosphorus. Avoid manures, check for Iron and Zinc requirements. Grow forage crop.\",\n    min: 120,\n    L: \"Low Phosphorus. Apply phosphorus based fertilizer.\",\n    max: 250\n  },\n  data: [{\n    ranges: 20,\n    YAxis: 0\n  }, {\n    ranges: 10,\n    YAxis: 10\n  }, {\n    ranges: 20,\n    YAxis: 20\n  }, {\n    ranges: 10,\n    YAxis: 30\n  }, {\n    ranges: 20,\n    YAxis: 40\n  }, {\n    ranges: 10,\n    YAxis: 50\n  }, {\n    ranges: 20,\n    YAxis: 60\n  }, {\n    ranges: 10,\n    YAxis: 70\n  }]\n}, {\n  id: 3,\n  name: \"Potassium\",\n  info: {\n    H: \"High potassium. Till the land, break hard soil and remove rocks and pebbles. Grow forage crop.\",\n    min: 20,\n    L: \"Low potassium. Apply potassium based fertilizer.\",\n    max: 75\n  },\n  data: [{\n    ranges: 20,\n    YAxis: 0\n  }, {\n    ranges: 10,\n    YAxis: 10\n  }, {\n    ranges: 20,\n    YAxis: 20\n  }, {\n    ranges: 10,\n    YAxis: 30\n  }, {\n    ranges: 20,\n    YAxis: 40\n  }, {\n    ranges: 10,\n    YAxis: 50\n  }, {\n    ranges: 20,\n    YAxis: 60\n  }, {\n    ranges: 10,\n    YAxis: 70\n  }]\n}, {\n  id: 4,\n  name: \"Salinity\",\n  info: {\n    H: \"High salinity. Apply leaching to the soil\",\n    min: 0,\n    L: \"Low salinity. Apply salt\",\n    max: 2.5\n  },\n  data: [{\n    ranges: 1.2\n  }, {\n    ranges: 2\n  }, {\n    ranges: 1.2\n  }, {\n    ranges: 1\n  }, {\n    ranges: 1\n  }, {\n    ranges: 2\n  }, {\n    ranges: 1.2\n  }, {\n    ranges: 1\n  }]\n}, {\n  id: 5,\n  name: \"SoilTemp\",\n  info: {\n    H: \"High soil temperature. Plant weeds and avoid sunlight.\",\n    min: 0,\n    L: \"Low soil temperature. Upturn top soil and enhance direct sunlight\",\n    max: 35\n  },\n  data: [{\n    ranges: 20,\n    YAxis: 0\n  }, {\n    ranges: 10,\n    YAxis: 5\n  }, {\n    ranges: 20,\n    YAxis: 10\n  }, {\n    ranges: 10,\n    YAxis: 15\n  }, {\n    ranges: 20,\n    YAxis: 20\n  }, {\n    ranges: 10,\n    YAxis: 25\n  }, {\n    ranges: 20,\n    YAxis: 30\n  }, {\n    ranges: 10,\n    YAxis: 35\n  }]\n}, {\n  id: 6,\n  name: \"Ph\",\n  info: {\n    H: \"High pH. Apply Sulphur or gypsum.\",\n    min: 5.5,\n    L: \"Low pH. Apply limestone, etc\",\n    max: 8.5\n  },\n  data: [{\n    ranges: 6.5,\n    YAxis: 5\n  }, {\n    ranges: 7.5,\n    YAxis: 5.5\n  }, {\n    ranges: 6.5,\n    YAxis: 6\n  }, {\n    ranges: 8,\n    YAxis: 6.5\n  }, {\n    ranges: 7.5,\n    YAxis: 7\n  }, {\n    ranges: 6.5,\n    YAxis: 7.5\n  }, {\n    ranges: 8,\n    YAxis: 8\n  }, {\n    ranges: 7.5,\n    YAxis: 8.5\n  }]\n}, {\n  id: 7,\n  name: \"Moisture\",\n  info: {\n    H: \"High moisture. Apply management practice such as drainage renovation and regulated irrigation, grow single crop and cut unnecessary trees\",\n    min: 0,\n    L: \"Low moisture. Apply management practice such as conservation tillage\",\n    max: 70\n  },\n  data: [{\n    ranges: 20,\n    YAxis: 0\n  }, {\n    ranges: 10,\n    YAxis: 10\n  }, {\n    ranges: 20,\n    YAxis: 20\n  }, {\n    ranges: 10,\n    YAxis: 30\n  }, {\n    ranges: 20,\n    YAxis: 40\n  }, {\n    ranges: 10,\n    YAxis: 50\n  }, {\n    ranges: 20,\n    YAxis: 60\n  }, {\n    ranges: 10,\n    YAxis: 70\n  }]\n}, {\n  id: 8,\n  name: \"Respiration\",\n  info: {\n    H: \"High respiraton. Increase plant density.\",\n    min: 0,\n    L: \"Low plant respiration. Decrease plant density, upturn top soil\",\n    max: 50\n  },\n  data: [{\n    ranges: 20,\n    YAxis: 0\n  }, {\n    ranges: 10,\n    YAxis: 5\n  }, {\n    ranges: 20,\n    YAxis: 10\n  }, {\n    ranges: 10,\n    YAxis: 15\n  }, {\n    ranges: 20,\n    YAxis: 20\n  }, {\n    ranges: 10,\n    YAxis: 25\n  }, {\n    ranges: 20,\n    YAxis: 30\n  }, {\n    ranges: 10,\n    YAxis: 35\n  }]\n}, {\n  id: 9,\n  name: \"Aeration\",\n  info: {\n    H: \"High aeration. Remove pebbles and stones\",\n    min: 0,\n    L: \"Low aeration. Upturn top soil. Apply pebbles and sand in soil\",\n    max: 50\n  },\n  data: [{\n    ranges: 20,\n    YAxis: 0\n  }, {\n    ranges: 10,\n    YAxis: 5\n  }, {\n    ranges: 20,\n    YAxis: 10\n  }, {\n    ranges: 10,\n    YAxis: 15\n  }, {\n    ranges: 20,\n    YAxis: 20\n  }, {\n    ranges: 10,\n    YAxis: 25\n  }, {\n    ranges: 20,\n    YAxis: 30\n  }, {\n    ranges: 10,\n    YAxis: 35\n  }]\n}]; // const formateddData = data.map((item, ranges) => {\n//   for (var key in ranges) {\n//     let val = item.name[key];\n//   }\n//   return console.log(val);\n// });\n\nexport const ranges = {\n  salinity: {\n    H: \"High salinity. Apply leaching to the soil\",\n    min: 0,\n    L: \"Low salinity. Apply salt\",\n    max: 2.5\n  },\n  solarRad: {\n    H: \"High solar radiation. Avoid sunlight or other light sources.\",\n    min: 0,\n    L: \"Low solar radiation. Expose to sunlight or other light sources.\",\n    max: 75000\n  },\n  airTemp: {\n    H: \"High air temperature. Avoid sunlight\",\n    min: 0,\n    L: \"Low air temperature. Increase direct sunlight \",\n    max: 40\n  },\n  other: {\n    recommendation: \"Look after each plant. Feed nutrient & water, watch for pests\"\n  },\n  aeration: {\n    H: \"High aeration. Remove pebbles and stones\",\n    min: 0,\n    L: \"Low aeration. Upturn top soil. Apply pebbles and sand in soil\",\n    max: 50\n  },\n  potassium: {\n    H: \"High potassium. Till the land, break hard soil and remove rocks and pebbles. Grow forage crop.\",\n    min: 20,\n    L: \"Low potassium. Apply potassium based fertilizer.\",\n    max: 75\n  },\n  moisture: {\n    H: \"High moisture. Apply management practice such as drainage renovation and regulated irrigation, grow single crop and cut unnecessary trees\",\n    min: 0,\n    L: \"Low moisture. Apply management practice such as conservation tillage\",\n    max: 70\n  },\n  soilTemp: {\n    H: \"High soil temperature. Plant weeds and avoid sunlight.\",\n    min: 0,\n    L: \"Low soil temperature. Upturn top soil and enhance direct sunlight\",\n    max: 35\n  },\n  respiration: {\n    H: \"High respiraton. Increase plant density.\",\n    min: 0,\n    L: \"Low plant respiration. Decrease plant density, upturn top soil\",\n    max: 50\n  },\n  phosphorus: {\n    H: \"High phosphorus. Avoid manures, check for Iron and Zinc requirements. Grow forage crop.\",\n    min: 120,\n    L: \"Low Phosphorus. Apply phosphorus based fertilizer.\",\n    max: 250\n  },\n  pH: {\n    H: \"High pH. Apply Sulphur or gypsum.\",\n    min: 5.5,\n    L: \"Low pH. Apply limestone, etc\",\n    max: 8.5\n  },\n  variety: \"unique\",\n  humidity: {\n    H: \"High humidity. Improve drainage, decrease plant density.\",\n    min: 0,\n    L: \"Low humidity. Apply water.\",\n    max: 85\n  },\n  nitrogen: {\n    H: \"High nitrogen. Grow root/shoot/fruit intensive plants such as carrot, mustard, lettuce, spinach.\",\n    min: 280,\n    L: \"Low nitrogen. Apply nitrogen based fertilizer. Grow nitrogen fixating plants. rohananamnan\",\n    max: 560,\n    scientific_name: \"generic\"\n  }\n}; // let arr = [\n//   { a: 1, b: 1, c: 1 },\n//   { a: 1, b: 1, c: 1, d: 2 },\n//   { a: 3, b: 3, c: 3 },\n// ];\n// const obj = { a: 1, b: 1, c: 1, d: 2 };\n// let newArr1 = [];\n// let newArr = arr.map((item, obj, newArr1) => {\n//   for (var key in obj) {\n//     let val = item[key];\n//     return newArr1.push({ val, name: \"name\" });\n//     // return newArr.push({ val, name: \"name\" });\n//   }\n// });\n// console.log({ newArr1 });\n// console.log({ newArr });\n\nlet data_7d = [{\n  salinity: \"2.07\",\n  solarRad: \"24711.09\",\n  devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n  airTemp: \"18.69\",\n  aeration: \"24.96\",\n  potassium: \"176.88666666666666\",\n  num_devices: \"1\",\n  moisture: \"56.56\",\n  soilTemp: \"20.603333333333335\",\n  farmId: \"demo_farm_1\",\n  date: \"2020-07-13\",\n  respiration: \"41.57\",\n  pressure: \"138.12333333333333\",\n  userId: \"demo_user_sensegrass\",\n  phosphorus: \"19.05666666666667\",\n  pH: \"7.56\",\n  humidity: \"45.08\",\n  nitrogen: \"513.03\",\n  \"evapotranspiration(ET)\": \"34.3\"\n}, {\n  salinity: \"1.4466666666666665\",\n  solarRad: \"23048.98\",\n  devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n  airTemp: \"23.09\",\n  aeration: \"32.04\",\n  potassium: \"167.97666666666666\",\n  num_devices: \"1\",\n  moisture: \"47.626666666666665\",\n  soilTemp: \"21.763333333333335\",\n  farmId: \"demo_farm_1\",\n  date: \"2020-07-12\",\n  respiration: \"29.3\",\n  pressure: \"131.32666666666668\",\n  userId: \"demo_user_sensegrass\",\n  phosphorus: \"22.123333333333335\",\n  pH: \"7.609999999999999\",\n  humidity: \"36.72\",\n  nitrogen: \"418.9766666666667\",\n  \"evapotranspiration(ET)\": \"35.74\"\n}, {\n  salinity: \"1.0899999999999999\",\n  solarRad: \"51037.4\",\n  devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n  airTemp: \"19.48\",\n  aeration: \"29.48\",\n  potassium: \"166.19333333333336\",\n  num_devices: \"1\",\n  moisture: \"37.21333333333333\",\n  soilTemp: \"19.78333333333333\",\n  farmId: \"demo_farm_1\",\n  date: \"2020-07-11\",\n  respiration: \"32.33\",\n  pressure: \"141.96333333333334\",\n  userId: \"demo_user_sensegrass\",\n  phosphorus: \"24.87\",\n  pH: \"7.47\",\n  humidity: \"53.82\",\n  nitrogen: \"407.04333333333335\",\n  \"evapotranspiration(ET)\": \"43.12\"\n}, {\n  salinity: \"1.7\",\n  solarRad: \"25375.79\",\n  devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n  airTemp: \"21.02\",\n  aeration: \"27.41\",\n  potassium: \"164.83333333333334\",\n  num_devices: \"1\",\n  moisture: \"43.843333333333334\",\n  soilTemp: \"19.493333333333336\",\n  farmId: \"demo_farm_1\",\n  date: \"2020-07-10\",\n  respiration: \"22.64\",\n  pressure: \"146.29666666666665\",\n  userId: \"demo_user_sensegrass\",\n  phosphorus: \"18.133333333333336\",\n  pH: \"6.416666666666667\",\n  humidity: \"61.64\",\n  nitrogen: \"380.14333333333326\",\n  \"evapotranspiration(ET)\": \"28.25\"\n}, {\n  salinity: \"1.9033333333333335\",\n  solarRad: \"39938.18\",\n  devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n  airTemp: \"22.54\",\n  aeration: \"26.26\",\n  potassium: \"161.11333333333334\",\n  num_devices: \"1\",\n  moisture: \"56.28\",\n  soilTemp: \"21.11\",\n  farmId: \"demo_farm_1\",\n  date: \"2020-07-09\",\n  respiration: \"22.44\",\n  pressure: \"133.84\",\n  userId: \"demo_user_sensegrass\",\n  phosphorus: \"17.343333333333334\",\n  pH: \"7.283333333333334\",\n  humidity: \"45.0\",\n  nitrogen: \"488.52666666666664\",\n  \"evapotranspiration(ET)\": \"29.32\"\n}];\nlet formated_data_7d = data_7d.map(item => {\n  let innerArr = [];\n\n  for (var key in item) {\n    let val = item[key];\n    innerArr.push({\n      ranges: val,\n      name: key\n    }); // return { ranges: val, name: key };\n  }\n\n  return innerArr;\n});\nconsole.log(formated_data_7d); // let formated_data_7d_2 = formated_data_7d.map(arr => {\n// })\n\nlet airTemp_val = data_7d.map(item => {\n  return {\n    value: item.nitrogen\n  };\n});\nconsole.log({\n  airTemp_val\n});\nexport const makeGraphData = (arr, ranges) => {\n  let nitrogen_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.nitrogen,\n      day: `day${indx + 1}`\n    };\n  }); // );\n\n  let phosphorus_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.phosphorus,\n      day: `day${indx + 1}`\n    };\n  }); // );\n\n  let potassium_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.potassium,\n      day: `day${indx + 1}`\n    };\n  }); // );\n\n  let salinity_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.salinity,\n      day: `day${indx + 1}`\n    };\n  }); // );\n\n  let soilTemp_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.soilTemp,\n      day: `day${indx + 1}`\n    };\n  }); // );\n\n  let pH_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.pH,\n      day: `day${indx + 1}`\n    };\n  }); // );\n\n  let moisture_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.moisture,\n      day: `day${indx + 1}`\n    };\n  }); // );\n\n  let respiration_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.respiration,\n      day: `day${indx + 1}`\n    };\n  }); // );\n\n  let aeration_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.aeration,\n      day: `day${indx + 1}`\n    };\n  });\n  let airTemp_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.airTemp,\n      day: `day${indx + 1}`\n    };\n  });\n  let humidity_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.humidity,\n      day: `day${indx + 1}`\n    };\n  });\n  let solarRad_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.solarRad,\n      day: `day${indx + 1}`\n    };\n  });\n  let pressure_val = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item.pressure,\n      day: `day${indx + 1}`\n    };\n  });\n  let evapotranspiration = // method(\n  arr.map((item, indx) => {\n    return {\n      value: item[\"evapotranspiration(ET)\"],\n      day: `day${indx + 1}`\n    };\n  });\n  console.log({\n    arr\n  }); // );\n\n  console.log(ranges && ranges.nitrogen);\n  return [{\n    id: 1,\n    name: \"Nitrogen\",\n    info: ranges && ranges.nitrogen,\n    data: nitrogen_val\n  }, {\n    id: 2,\n    name: \"Phosphorus\",\n    info: ranges && ranges.phosphorus,\n    data: phosphorus_val\n  }, {\n    id: 3,\n    name: \"Potassium\",\n    info: ranges && ranges.potassium,\n    data: potassium_val\n  }, {\n    id: 4,\n    name: \"Salinity\",\n    info: ranges && ranges.salinity,\n    data: salinity_val\n  }, {\n    id: 5,\n    name: \"SoilTemp\",\n    info: ranges && ranges.soilTemp,\n    data: soilTemp_val\n  }, {\n    id: 6,\n    name: \"Ph\",\n    info: ranges && ranges.pH,\n    data: pH_val\n  }, {\n    id: 7,\n    name: \"Moisture\",\n    info: ranges && ranges.moisture,\n    data: moisture_val\n  }, {\n    id: 8,\n    name: \"Respiration\",\n    info: ranges && ranges.respiration,\n    data: respiration_val\n  }, {\n    id: 9,\n    name: \"Aeration\",\n    info: ranges && ranges.aeration,\n    data: aeration_val\n  }, {\n    id: 10,\n    name: \"AirTemp\",\n    info: ranges && ranges.airTemp,\n    data: airTemp_val\n  }, {\n    id: 11,\n    name: \"Humidity\",\n    info: ranges && ranges.humidity,\n    data: humidity_val\n  }, {\n    id: 12,\n    name: \"SolarRad\",\n    info: ranges && ranges.solarRad,\n    data: solarRad_val\n  }, {\n    id: 13,\n    name: \"Pressure\",\n    info: ranges && ranges.pressure,\n    data: pressure_val\n  }, {\n    id: 14,\n    name: \"evapotranspiration\",\n    info: ranges && ranges[\"evapotranspiration(ET)\"],\n    data: evapotranspiration\n  }];\n}; // console.log(makeGraphData(data_7d));\n// export const graphData = makeGraphData(\n//   data_7d,\n//   get_4weeks_data,\n//   get_12Months_data,\n//   get_7d_data,\n//   \"\"\n// );\n// let type = \"\";\n// let method = () => {};\n// switch (type) {\n//   case \"data_1M\":\n//     method = get_4weeks_data;\n//     break;\n//   case \"data_1Y\":\n//     method = get_4weeks_data;\n//     break;\n//   default:\n//     method = get_7d_data;\n// }\n// console.log({ method });\n// export const mountGraphData = (data_7d, data_1M, data_1Y, type) => {\n//   switch (type) {\n//     case \"data_1M\":\n//       return makeGraphData(\n//         data_1M,\n//         get_4weeks_data,\n//         get_12Months_data,\n//         get_7d_data,\n//         \"data_1M\"\n//       );\n//       break;\n//     case \"data_1Y\":\n//       return makeGraphData(\n//         data_1Y,\n//         get_4weeks_data,\n//         get_12Months_data,\n//         get_7d_data,\n//         \"data_1Y\"\n//       );\n//       break;\n//     default:\n//       return makeGraphData(\n//         data_7d,\n//         get_4weeks_data,\n//         get_12Months_data,\n//         get_7d_data,\n//         \"\"\n//       );\n//   }\n// };\n\nexport const mountGraphData = (data_7D, data_1M, data_1Y, type, ranges) => {\n  switch (type) {\n    case \"data_1M\":\n      return makeGraphData(data_1M, ranges);\n    // break;\n\n    case \"data_1Y\":\n      return makeGraphData(data_1Y, ranges);\n    // break;\n\n    default:\n      return makeGraphData(data_7D, ranges);\n  }\n}; // let arr = [\n//   { name: \"dvsd\", age: 25 },\n//   { name: \"dvsd\", age: 22 },\n//   { name: \"dvsd\", age: 33 },\n//   { name: \"dvsd\", age: 44 },\n// ];\n// arr.map((item) => {\n//   return item.age;\n// });","map":{"version":3,"sources":["/Users/deepakkumarsingh/Downloads/banao_lg/sensegrass/src/components/ChartList/data.js"],"names":["data","id","name","info","H","min","L","max","scientific_name","ranges","YAxis","salinity","solarRad","airTemp","other","recommendation","aeration","potassium","moisture","soilTemp","respiration","phosphorus","pH","variety","humidity","nitrogen","data_7d","devices","num_devices","farmId","date","pressure","userId","formated_data_7d","map","item","innerArr","key","val","push","console","log","airTemp_val","value","makeGraphData","arr","nitrogen_val","indx","day","phosphorus_val","potassium_val","salinity_val","soilTemp_val","pH_val","moisture_val","respiration_val","aeration_val","humidity_val","solarRad_val","pressure_val","evapotranspiration","mountGraphData","data_7D","data_1M","data_1Y","type"],"mappings":"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","sourcesContent":["// const myarr = [\n//   1,\n//   2,\n//   3,\n//   4,\n//   5,\n//   6,\n//   7,\n//   8,\n//   9,\n//   10,\n//   11,\n//   12,\n//   13,\n//   14,\n//   15,\n//   16,\n//   17,\n//   18,\n//   19,\n//   20,\n//   21,\n//   22,\n//   23,\n// ];\n// const get_7d_data = (arr) => {\n//   return arr.slice();\n// };\n// const get_4weeks_data = (arr) => {\n//   let newArr = [];\n//   for (let step = 0; step < arr.length; step += 7) {\n//     newArr.push(arr[step]);\n//   }\n//   return newArr;\n// };\n\n// console.log(get_4weeks_data(myarr));\n\n// const get_12Months_data = (arr) => {\n//   let newArr = [];\n//   for (let step = 0; step < arr.length; step += 30) {\n//     newArr.push(arr[step]);\n//   }\n//   return newArr;\n// };\n\nexport const data = [\n  {\n    id: 1,\n    name: \"Nitrogen\",\n    info: {\n      H:\n        \"High nitrogen. Grow root/shoot/fruit intensive plants such as carrot, mustard, lettuce, spinach.\",\n      min: 280,\n      L:\n        \"Low nitrogen. Apply nitrogen based fertilizer. Grow nitrogen fixating plants. fkjnfkjgndfgndkfgn\",\n      max: 560,\n\n      scientific_name: \"generic\",\n    },\n    data: [\n      { ranges: 350, YAxis: 250 },\n      { ranges: 300, YAxis: 300 },\n      { ranges: 500, YAxis: 350 },\n      { ranges: 300, YAxis: 400 },\n      { ranges: 500, YAxis: 450 },\n      { ranges: 350, YAxis: 500 },\n      { ranges: 450, YAxis: 550 },\n      { ranges: 450, YAxis: 600 },\n    ],\n  },\n  {\n    id: 2,\n    name: \"Phosphorus\",\n    info: {\n      H:\n        \"High phosphorus. Avoid manures, check for Iron and Zinc requirements. Grow forage crop.\",\n      min: 120,\n      L: \"Low Phosphorus. Apply phosphorus based fertilizer.\",\n      max: 250,\n    },\n    data: [\n      { ranges: 20, YAxis: 0 },\n      { ranges: 10, YAxis: 10 },\n      { ranges: 20, YAxis: 20 },\n      { ranges: 10, YAxis: 30 },\n      { ranges: 20, YAxis: 40 },\n      { ranges: 10, YAxis: 50 },\n      { ranges: 20, YAxis: 60 },\n      { ranges: 10, YAxis: 70 },\n    ],\n  },\n  {\n    id: 3,\n    name: \"Potassium\",\n    info: {\n      H:\n        \"High potassium. Till the land, break hard soil and remove rocks and pebbles. Grow forage crop.\",\n      min: 20,\n      L: \"Low potassium. Apply potassium based fertilizer.\",\n      max: 75,\n    },\n    data: [\n      { ranges: 20, YAxis: 0 },\n      { ranges: 10, YAxis: 10 },\n      { ranges: 20, YAxis: 20 },\n      { ranges: 10, YAxis: 30 },\n      { ranges: 20, YAxis: 40 },\n      { ranges: 10, YAxis: 50 },\n      { ranges: 20, YAxis: 60 },\n      { ranges: 10, YAxis: 70 },\n    ],\n  },\n  {\n    id: 4,\n    name: \"Salinity\",\n    info: {\n      H: \"High salinity. Apply leaching to the soil\",\n      min: 0,\n      L: \"Low salinity. Apply salt\",\n      max: 2.5,\n    },\n    data: [\n      { ranges: 1.2 },\n      { ranges: 2 },\n      { ranges: 1.2 },\n      { ranges: 1 },\n      { ranges: 1 },\n      { ranges: 2 },\n      { ranges: 1.2 },\n      { ranges: 1 },\n    ],\n  },\n  {\n    id: 5,\n    name: \"SoilTemp\",\n    info: {\n      H: \"High soil temperature. Plant weeds and avoid sunlight.\",\n      min: 0,\n      L: \"Low soil temperature. Upturn top soil and enhance direct sunlight\",\n      max: 35,\n    },\n    data: [\n      { ranges: 20, YAxis: 0 },\n      { ranges: 10, YAxis: 5 },\n      { ranges: 20, YAxis: 10 },\n      { ranges: 10, YAxis: 15 },\n      { ranges: 20, YAxis: 20 },\n      { ranges: 10, YAxis: 25 },\n      { ranges: 20, YAxis: 30 },\n      { ranges: 10, YAxis: 35 },\n    ],\n  },\n  {\n    id: 6,\n    name: \"Ph\",\n    info: {\n      H: \"High pH. Apply Sulphur or gypsum.\",\n      min: 5.5,\n      L: \"Low pH. Apply limestone, etc\",\n      max: 8.5,\n    },\n    data: [\n      { ranges: 6.5, YAxis: 5 },\n      { ranges: 7.5, YAxis: 5.5 },\n      { ranges: 6.5, YAxis: 6 },\n      { ranges: 8, YAxis: 6.5 },\n      { ranges: 7.5, YAxis: 7 },\n      { ranges: 6.5, YAxis: 7.5 },\n      { ranges: 8, YAxis: 8 },\n      { ranges: 7.5, YAxis: 8.5 },\n    ],\n  },\n  {\n    id: 7,\n    name: \"Moisture\",\n    info: {\n      H:\n        \"High moisture. Apply management practice such as drainage renovation and regulated irrigation, grow single crop and cut unnecessary trees\",\n      min: 0,\n      L: \"Low moisture. Apply management practice such as conservation tillage\",\n      max: 70,\n    },\n    data: [\n      { ranges: 20, YAxis: 0 },\n      { ranges: 10, YAxis: 10 },\n      { ranges: 20, YAxis: 20 },\n      { ranges: 10, YAxis: 30 },\n      { ranges: 20, YAxis: 40 },\n      { ranges: 10, YAxis: 50 },\n      { ranges: 20, YAxis: 60 },\n      { ranges: 10, YAxis: 70 },\n    ],\n  },\n  {\n    id: 8,\n    name: \"Respiration\",\n    info: {\n      H: \"High respiraton. Increase plant density.\",\n      min: 0,\n      L: \"Low plant respiration. Decrease plant density, upturn top soil\",\n      max: 50,\n    },\n    data: [\n      { ranges: 20, YAxis: 0 },\n      { ranges: 10, YAxis: 5 },\n      { ranges: 20, YAxis: 10 },\n      { ranges: 10, YAxis: 15 },\n      { ranges: 20, YAxis: 20 },\n      { ranges: 10, YAxis: 25 },\n      { ranges: 20, YAxis: 30 },\n      { ranges: 10, YAxis: 35 },\n    ],\n  },\n\n  {\n    id: 9,\n    name: \"Aeration\",\n    info: {\n      H: \"High aeration. Remove pebbles and stones\",\n      min: 0,\n      L: \"Low aeration. Upturn top soil. Apply pebbles and sand in soil\",\n      max: 50,\n    },\n    data: [\n      { ranges: 20, YAxis: 0 },\n      { ranges: 10, YAxis: 5 },\n      { ranges: 20, YAxis: 10 },\n      { ranges: 10, YAxis: 15 },\n      { ranges: 20, YAxis: 20 },\n      { ranges: 10, YAxis: 25 },\n      { ranges: 20, YAxis: 30 },\n      { ranges: 10, YAxis: 35 },\n    ],\n  },\n];\n\n// const formateddData = data.map((item, ranges) => {\n//   for (var key in ranges) {\n//     let val = item.name[key];\n//   }\n//   return console.log(val);\n// });\nexport const ranges = {\n  salinity: {\n    H: \"High salinity. Apply leaching to the soil\",\n    min: 0,\n    L: \"Low salinity. Apply salt\",\n    max: 2.5,\n  },\n\n  solarRad: {\n    H: \"High solar radiation. Avoid sunlight or other light sources.\",\n    min: 0,\n    L: \"Low solar radiation. Expose to sunlight or other light sources.\",\n    max: 75000,\n  },\n\n  airTemp: {\n    H: \"High air temperature. Avoid sunlight\",\n    min: 0,\n    L: \"Low air temperature. Increase direct sunlight \",\n    max: 40,\n  },\n\n  other: {\n    recommendation:\n      \"Look after each plant. Feed nutrient & water, watch for pests\",\n  },\n\n  aeration: {\n    H: \"High aeration. Remove pebbles and stones\",\n    min: 0,\n    L: \"Low aeration. Upturn top soil. Apply pebbles and sand in soil\",\n    max: 50,\n  },\n\n  potassium: {\n    H:\n      \"High potassium. Till the land, break hard soil and remove rocks and pebbles. Grow forage crop.\",\n    min: 20,\n    L: \"Low potassium. Apply potassium based fertilizer.\",\n    max: 75,\n  },\n\n  moisture: {\n    H:\n      \"High moisture. Apply management practice such as drainage renovation and regulated irrigation, grow single crop and cut unnecessary trees\",\n    min: 0,\n    L: \"Low moisture. Apply management practice such as conservation tillage\",\n    max: 70,\n  },\n\n  soilTemp: {\n    H: \"High soil temperature. Plant weeds and avoid sunlight.\",\n    min: 0,\n    L: \"Low soil temperature. Upturn top soil and enhance direct sunlight\",\n    max: 35,\n  },\n\n  respiration: {\n    H: \"High respiraton. Increase plant density.\",\n    min: 0,\n    L: \"Low plant respiration. Decrease plant density, upturn top soil\",\n    max: 50,\n  },\n\n  phosphorus: {\n    H:\n      \"High phosphorus. Avoid manures, check for Iron and Zinc requirements. Grow forage crop.\",\n    min: 120,\n    L: \"Low Phosphorus. Apply phosphorus based fertilizer.\",\n    max: 250,\n  },\n\n  pH: {\n    H: \"High pH. Apply Sulphur or gypsum.\",\n    min: 5.5,\n    L: \"Low pH. Apply limestone, etc\",\n    max: 8.5,\n  },\n\n  variety: \"unique\",\n  humidity: {\n    H: \"High humidity. Improve drainage, decrease plant density.\",\n    min: 0,\n    L: \"Low humidity. Apply water.\",\n    max: 85,\n  },\n\n  nitrogen: {\n    H:\n      \"High nitrogen. Grow root/shoot/fruit intensive plants such as carrot, mustard, lettuce, spinach.\",\n    min: 280,\n    L:\n      \"Low nitrogen. Apply nitrogen based fertilizer. Grow nitrogen fixating plants. rohananamnan\",\n    max: 560,\n\n    scientific_name: \"generic\",\n  },\n};\n\n// let arr = [\n//   { a: 1, b: 1, c: 1 },\n//   { a: 1, b: 1, c: 1, d: 2 },\n//   { a: 3, b: 3, c: 3 },\n// ];\n// const obj = { a: 1, b: 1, c: 1, d: 2 };\n// let newArr1 = [];\n// let newArr = arr.map((item, obj, newArr1) => {\n//   for (var key in obj) {\n//     let val = item[key];\n//     return newArr1.push({ val, name: \"name\" });\n//     // return newArr.push({ val, name: \"name\" });\n//   }\n// });\n// console.log({ newArr1 });\n// console.log({ newArr });\n\nlet data_7d = [\n  {\n    salinity: \"2.07\",\n    solarRad: \"24711.09\",\n    devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n    airTemp: \"18.69\",\n    aeration: \"24.96\",\n    potassium: \"176.88666666666666\",\n    num_devices: \"1\",\n    moisture: \"56.56\",\n    soilTemp: \"20.603333333333335\",\n    farmId: \"demo_farm_1\",\n    date: \"2020-07-13\",\n    respiration: \"41.57\",\n    pressure: \"138.12333333333333\",\n    userId: \"demo_user_sensegrass\",\n    phosphorus: \"19.05666666666667\",\n    pH: \"7.56\",\n    humidity: \"45.08\",\n    nitrogen: \"513.03\",\n    \"evapotranspiration(ET)\": \"34.3\",\n  },\n  {\n    salinity: \"1.4466666666666665\",\n    solarRad: \"23048.98\",\n    devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n    airTemp: \"23.09\",\n    aeration: \"32.04\",\n    potassium: \"167.97666666666666\",\n    num_devices: \"1\",\n    moisture: \"47.626666666666665\",\n    soilTemp: \"21.763333333333335\",\n    farmId: \"demo_farm_1\",\n    date: \"2020-07-12\",\n    respiration: \"29.3\",\n    pressure: \"131.32666666666668\",\n    userId: \"demo_user_sensegrass\",\n    phosphorus: \"22.123333333333335\",\n    pH: \"7.609999999999999\",\n    humidity: \"36.72\",\n    nitrogen: \"418.9766666666667\",\n    \"evapotranspiration(ET)\": \"35.74\",\n  },\n  {\n    salinity: \"1.0899999999999999\",\n    solarRad: \"51037.4\",\n    devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n    airTemp: \"19.48\",\n    aeration: \"29.48\",\n    potassium: \"166.19333333333336\",\n    num_devices: \"1\",\n    moisture: \"37.21333333333333\",\n    soilTemp: \"19.78333333333333\",\n    farmId: \"demo_farm_1\",\n    date: \"2020-07-11\",\n    respiration: \"32.33\",\n    pressure: \"141.96333333333334\",\n    userId: \"demo_user_sensegrass\",\n    phosphorus: \"24.87\",\n    pH: \"7.47\",\n    humidity: \"53.82\",\n    nitrogen: \"407.04333333333335\",\n    \"evapotranspiration(ET)\": \"43.12\",\n  },\n  {\n    salinity: \"1.7\",\n    solarRad: \"25375.79\",\n    devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n    airTemp: \"21.02\",\n    aeration: \"27.41\",\n    potassium: \"164.83333333333334\",\n    num_devices: \"1\",\n    moisture: \"43.843333333333334\",\n    soilTemp: \"19.493333333333336\",\n    farmId: \"demo_farm_1\",\n    date: \"2020-07-10\",\n    respiration: \"22.64\",\n    pressure: \"146.29666666666665\",\n    userId: \"demo_user_sensegrass\",\n    phosphorus: \"18.133333333333336\",\n    pH: \"6.416666666666667\",\n    humidity: \"61.64\",\n    nitrogen: \"380.14333333333326\",\n    \"evapotranspiration(ET)\": \"28.25\",\n  },\n  {\n    salinity: \"1.9033333333333335\",\n    solarRad: \"39938.18\",\n    devices: [\"14fbedaf-1b14-49f3-93ab-f3e405ab3e0d\"],\n    airTemp: \"22.54\",\n    aeration: \"26.26\",\n    potassium: \"161.11333333333334\",\n    num_devices: \"1\",\n    moisture: \"56.28\",\n    soilTemp: \"21.11\",\n    farmId: \"demo_farm_1\",\n    date: \"2020-07-09\",\n    respiration: \"22.44\",\n    pressure: \"133.84\",\n    userId: \"demo_user_sensegrass\",\n    phosphorus: \"17.343333333333334\",\n    pH: \"7.283333333333334\",\n    humidity: \"45.0\",\n    nitrogen: \"488.52666666666664\",\n    \"evapotranspiration(ET)\": \"29.32\",\n  },\n];\n\nlet formated_data_7d = data_7d.map((item) => {\n  let innerArr = [];\n  for (var key in item) {\n    let val = item[key];\n    innerArr.push({ ranges: val, name: key });\n    // return { ranges: val, name: key };\n  }\n  return innerArr;\n});\nconsole.log(formated_data_7d);\n// let formated_data_7d_2 = formated_data_7d.map(arr => {\n\n// })\nlet airTemp_val = data_7d.map((item) => {\n  return { value: item.nitrogen };\n});\nconsole.log({ airTemp_val });\n\nexport const makeGraphData = (arr, ranges) => {\n  let nitrogen_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.nitrogen, day: `day${indx + 1}` };\n    });\n\n  // );\n  let phosphorus_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.phosphorus, day: `day${indx + 1}` };\n    });\n\n  // );\n  let potassium_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.potassium, day: `day${indx + 1}` };\n    });\n\n  // );\n  let salinity_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.salinity, day: `day${indx + 1}` };\n    });\n\n  // );\n  let soilTemp_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.soilTemp, day: `day${indx + 1}` };\n    });\n\n  // );\n  let pH_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.pH, day: `day${indx + 1}` };\n    });\n\n  // );\n  let moisture_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.moisture, day: `day${indx + 1}` };\n    });\n\n  // );\n  let respiration_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.respiration, day: `day${indx + 1}` };\n    });\n\n  // );\n  let aeration_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.aeration, day: `day${indx + 1}` };\n    });\n  let airTemp_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.airTemp, day: `day${indx + 1}` };\n    });\n  let humidity_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.humidity, day: `day${indx + 1}` };\n    });\n  let solarRad_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.solarRad, day: `day${indx + 1}` };\n    });\n  let pressure_val =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item.pressure, day: `day${indx + 1}` };\n    });\n\n  let evapotranspiration =\n    // method(\n    arr.map((item, indx) => {\n      return { value: item[\"evapotranspiration(ET)\"], day: `day${indx + 1}` };\n    });\n  console.log({ arr });\n  // );\n  console.log(ranges && ranges.nitrogen);\n  return [\n    {\n      id: 1,\n      name: \"Nitrogen\",\n      info: ranges && ranges.nitrogen,\n      data: nitrogen_val,\n    },\n    {\n      id: 2,\n      name: \"Phosphorus\",\n      info: ranges && ranges.phosphorus,\n      data: phosphorus_val,\n    },\n    {\n      id: 3,\n      name: \"Potassium\",\n      info: ranges && ranges.potassium,\n      data: potassium_val,\n    },\n    {\n      id: 4,\n      name: \"Salinity\",\n      info: ranges && ranges.salinity,\n      data: salinity_val,\n    },\n    {\n      id: 5,\n      name: \"SoilTemp\",\n      info: ranges && ranges.soilTemp,\n      data: soilTemp_val,\n    },\n    {\n      id: 6,\n      name: \"Ph\",\n      info: ranges && ranges.pH,\n      data: pH_val,\n    },\n    {\n      id: 7,\n      name: \"Moisture\",\n      info: ranges && ranges.moisture,\n      data: moisture_val,\n    },\n    {\n      id: 8,\n      name: \"Respiration\",\n      info: ranges && ranges.respiration,\n      data: respiration_val,\n    },\n\n    {\n      id: 9,\n      name: \"Aeration\",\n      info: ranges && ranges.aeration,\n      data: aeration_val,\n    },\n    {\n      id: 10,\n      name: \"AirTemp\",\n      info: ranges && ranges.airTemp,\n      data: airTemp_val,\n    },\n    {\n      id: 11,\n      name: \"Humidity\",\n      info: ranges && ranges.humidity,\n      data: humidity_val,\n    },\n    {\n      id: 12,\n      name: \"SolarRad\",\n      info: ranges && ranges.solarRad,\n      data: solarRad_val,\n    },\n    {\n      id: 13,\n      name: \"Pressure\",\n      info: ranges && ranges.pressure,\n      data: pressure_val,\n    },\n    {\n      id: 14,\n      name: \"evapotranspiration\",\n      info: ranges && ranges[\"evapotranspiration(ET)\"],\n      data: evapotranspiration,\n    },\n  ];\n};\n\n// console.log(makeGraphData(data_7d));\n// export const graphData = makeGraphData(\n//   data_7d,\n//   get_4weeks_data,\n//   get_12Months_data,\n//   get_7d_data,\n//   \"\"\n// );\n\n// let type = \"\";\n// let method = () => {};\n// switch (type) {\n//   case \"data_1M\":\n//     method = get_4weeks_data;\n//     break;\n//   case \"data_1Y\":\n//     method = get_4weeks_data;\n//     break;\n//   default:\n//     method = get_7d_data;\n// }\n// console.log({ method });\n\n// export const mountGraphData = (data_7d, data_1M, data_1Y, type) => {\n//   switch (type) {\n//     case \"data_1M\":\n//       return makeGraphData(\n//         data_1M,\n//         get_4weeks_data,\n//         get_12Months_data,\n//         get_7d_data,\n//         \"data_1M\"\n//       );\n//       break;\n//     case \"data_1Y\":\n//       return makeGraphData(\n//         data_1Y,\n//         get_4weeks_data,\n//         get_12Months_data,\n//         get_7d_data,\n//         \"data_1Y\"\n//       );\n//       break;\n//     default:\n//       return makeGraphData(\n//         data_7d,\n//         get_4weeks_data,\n//         get_12Months_data,\n//         get_7d_data,\n//         \"\"\n//       );\n//   }\n// };\n\nexport const mountGraphData = (data_7D, data_1M, data_1Y, type, ranges) => {\n  switch (type) {\n    case \"data_1M\":\n      return makeGraphData(data_1M, ranges);\n    // break;\n    case \"data_1Y\":\n      return makeGraphData(data_1Y, ranges);\n    // break;\n    default:\n      return makeGraphData(data_7D, ranges);\n  }\n};\n\n// let arr = [\n//   { name: \"dvsd\", age: 25 },\n//   { name: \"dvsd\", age: 22 },\n//   { name: \"dvsd\", age: 33 },\n//   { name: \"dvsd\", age: 44 },\n// ];\n// arr.map((item) => {\n//   return item.age;\n// });\n"]},"metadata":{},"sourceType":"module"}