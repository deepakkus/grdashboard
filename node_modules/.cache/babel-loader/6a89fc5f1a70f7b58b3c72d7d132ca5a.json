{"ast":null,"code":"import _regeneratorRuntime from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from\"axios\";import{GET_IDEAL_RANGES,GET_IDEAL_RANGES_ERROR}from\"./types\";export var getIdealRange=function getIdealRange(plant){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"https://api.sensegrass.com/plant-card/ranges?plant=\".concat(plant));case 3:res=_context.sent;dispatch({type:GET_IDEAL_RANGES,payload:res.data});_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);dispatch({type:GET_IDEAL_RANGES_ERROR,payload:{msg:_context.t0.response}});case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/actions/ranges.js"],"names":["axios","GET_IDEAL_RANGES","GET_IDEAL_RANGES_ERROR","getIdealRange","plant","dispatch","get","res","type","payload","data","msg","response"],"mappings":"mVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,gBAAT,CAA2BC,sBAA3B,KAAyD,SAAzD,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,iGAAW,iBAAOC,QAAP,gKAElBL,CAAAA,KAAK,CAACM,GAAN,8DACsCF,KADtC,EAFkB,QAE9BG,GAF8B,eAKpCF,QAAQ,CAAC,CACPG,IAAI,CAAEP,gBADC,CAEPQ,OAAO,CAAEF,GAAG,CAACG,IAFN,CAAD,CAAR,CALoC,+EAUpCL,QAAQ,CAAC,CACPG,IAAI,CAAEN,sBADC,CAEPO,OAAO,CAAE,CAAEE,GAAG,CAAE,YAAIC,QAAX,CAFF,CAAD,CAAR,CAVoC,oEAAX,gEAAtB","sourcesContent":["import axios from \"axios\";\n\nimport { GET_IDEAL_RANGES, GET_IDEAL_RANGES_ERROR } from \"./types\";\n\nexport const getIdealRange = (plant) => async (dispatch) => {\n  try {\n    const res = await axios.get(\n      `https://api.sensegrass.com/plant-card/ranges?plant=${plant}`\n    );\n    dispatch({\n      type: GET_IDEAL_RANGES,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_IDEAL_RANGES_ERROR,\n      payload: { msg: err.response },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}