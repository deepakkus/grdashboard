{"ast":null,"code":"import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import\"./SettingsListStyles.scss\";import{Segment,Grid}from\"semantic-ui-react\";import{calculateArea}from\"../../utils/utilsFunctions\";import MapPolygon from\"../MapPolygon/MapPolygon\";import fieldCorrectPic from\"../../images/xd/fieldCorrectPic.svg\";var SettingsList=function SettingsList(props){var userId=props.userId,token=props.token,userFarms=props.userFarms,getIdealRange=props.getIdealRange,lookup=props.lookup;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),fieldId=_useState2[0],setFieldId=_useState2[1];var fieldOptions=[];var firstFarm=userFarms[0];// const [farm] = userFarms.filter((farm) => farm._id === fieldId)\n// const fieldArea = calculateArea(farm ? [farm.location] : []) * 0.000247105;\n// const firstFieldArea =\n// calculateArea(firstFarm ? [firstFarm.location] : []) * 0.000247105;\n// console.log(fieldId)\nvar userFields=userFarms.length>0?userFarms.map(function(farm){console.log(farm);var polygon=farm.location;var center=farm.address.location;var soiltypes=lookup.soiltypes.filter(function(soiltype){return soiltype._id===farm.soilTypeId;});var watersources=lookup.watersources.filter(function(watersource){return watersource._id===farm.waterSourceId;});var terraintypes=lookup.terraintypes.filter(function(terrain){return terrain._id===farm.terrainTypeId;});console.log(soiltypes);// console.log(watersource)\nreturn/*#__PURE__*/React.createElement(Segment,{inverted:true,className:\"user-fields\",key:farm._id},/*#__PURE__*/React.createElement(Grid,null,/*#__PURE__*/React.createElement(Grid.Row,{columns:2,className:\"mx-0\"},/*#__PURE__*/React.createElement(Grid.Column,{width:3,className:\"fieldImg\"},/*#__PURE__*/React.createElement(\"img\",{src:fieldCorrectPic,className:\"Img\"})),/*#__PURE__*/React.createElement(Grid.Column,{width:13},/*#__PURE__*/React.createElement(\"div\",{className:\"fieldHeading\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h5\",null,farm.farmName)),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h5\",null,\"EDIT\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"fieldUpper\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",null,\"Location:\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",null,\"Size:\")),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",null,\"DELETE\"))))),/*#__PURE__*/React.createElement(Grid.Row,{columns:4,className:\"fieldBottom\"},/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Crop: \"),/*#__PURE__*/React.createElement(\"span\",null,\"Uncultivated\")),/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Water Source: \"),/*#__PURE__*/React.createElement(\"span\",null,watersources[0].name)),/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Soil Type: \"),/*#__PURE__*/React.createElement(\"span\",null,soiltypes[0].name)),/*#__PURE__*/React.createElement(Grid.Column,{className:\"fielDetails-bottom\"},/*#__PURE__*/React.createElement(\"span\",null,\"Terrain Type: \"),/*#__PURE__*/React.createElement(\"span\",null,terraintypes[0].name)))));}):null;return userFields;};export default SettingsList;// const fillData = (newData) =>\n//     {\n//         newData.forEach((element) =>\n//         {\n//             fieldOptions.push({\n//                 text: element.farmName,\n//                 id: element._id,\n//                 value: element._id\n//             });\n//         });\n//     }","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/SettingsList/SettingsList.js"],"names":["React","useState","useEffect","Segment","Grid","calculateArea","MapPolygon","SettingsList","props","userId","token","userFarms","getIdealRange","lookup","fieldId","setFieldId","fieldOptions","firstFarm","userFields","length","map","farm","console","log","polygon","location","center","address","soiltypes","filter","soiltype","_id","soilTypeId","watersources","watersource","waterSourceId","terraintypes","terrain","terrainTypeId","fieldCorrectPic","farmName","name"],"mappings":"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","sourcesContent":["import React , {useState, useEffect} from \"react\"\nimport \"./SettingsListStyles.scss\" \nimport {Segment, Grid} from \"semantic-ui-react\"\nimport {calculateArea} from \"../../utils/utilsFunctions\"\nimport MapPolygon from \"../MapPolygon/MapPolygon\"\nimport fieldCorrectPic from \"../../images/xd/fieldCorrectPic.svg\"\n\nconst SettingsList = (props) =>\n{\n    const {userId, token, userFarms, getIdealRange, lookup} = props;\n    const [fieldId, setFieldId] = useState(\"\");\n    let fieldOptions = [];\n    \n    const firstFarm = userFarms[0];\n    // const [farm] = userFarms.filter((farm) => farm._id === fieldId)\n    \n    // const fieldArea = calculateArea(farm ? [farm.location] : []) * 0.000247105;\n    // const firstFieldArea =\n    // calculateArea(firstFarm ? [firstFarm.location] : []) * 0.000247105;\n    // console.log(fieldId)\n    \n    const userFields = userFarms.length > 0 ? userFarms.map(farm => {\n        console.log(farm)\n        \n        let polygon =  farm.location\n        let center =  farm.address.location\n        let soiltypes = lookup.soiltypes.filter((soiltype) => soiltype._id === farm.soilTypeId)\n        let watersources = lookup.watersources.filter((watersource) => watersource._id === farm.waterSourceId)\n        let terraintypes = lookup.terraintypes.filter((terrain) => terrain._id === farm.terrainTypeId)\n        console.log(soiltypes)\n        // console.log(watersource)\n\n        return(\n            <Segment inverted className=\"user-fields\" key = {farm._id}>\n                <Grid>\n                    <Grid.Row columns = {2} className = \"mx-0\">\n                        {/* <MapPolygon editable = {false} polygon = {polygon} center = {center}/> */}\n                        <Grid.Column width = {3} className = \"fieldImg\"><img src = {fieldCorrectPic} className = \"Img\"/></Grid.Column>\n                        <Grid.Column width = {13}>\n                            <div className = \"fieldHeading\">\n                                <div>\n                                    <h5>\n                                        {farm.farmName}\n                                    </h5>\n                                </div>\n                                <div>\n                                    <h5>\n                                        EDIT\n                                    </h5>\n                                </div>\n                            </div>\n                            <div className = \"fieldUpper\">\n                                <div>\n                                    <span>\n                                        Location:\n                                    </span>\n                                </div>\n                                <div>\n                                    <span>\n                                        Size:\n                                    </span>\n                                </div>\n                                <div>\n                                    <span>\n                                        DELETE\n                                    </span>\n                                </div>\n                            </div>\n                            \n                            \n                            \n                            \n                            {/* <h5>\n                                Location: <span>{`${farm.address.location[0].toFixed(2)}`} Lat {`${farm.address.location[1].toFixed(2)}`} Long</span>\n                            </h5>                             */}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row columns = {4} className = \"fieldBottom\">\n                        <Grid.Column className = \"fielDetails-bottom\">\n                            <span>Crop: </span><span>Uncultivated</span>\n                        </Grid.Column>\n                        <Grid.Column className = \"fielDetails-bottom\">\n                            <span>Water Source: </span><span>{watersources[0].name}</span>\n                            {/* {watersources[0].name} */}\n                        </Grid.Column>\n                        <Grid.Column className = \"fielDetails-bottom\">\n                            <span>Soil Type: </span><span>{soiltypes[0].name}</span>\n                        </Grid.Column>\n                        <Grid.Column className = \"fielDetails-bottom\">\n                            <span>Terrain Type: </span><span>{terraintypes[0].name}</span>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n        )\n    })\n    :null\n    return(\n        userFields\n    )\n\n}\n    \n\n\n\nexport default SettingsList;\n\n\n\n// const fillData = (newData) =>\n//     {\n//         newData.forEach((element) =>\n//         {\n//             fieldOptions.push({\n//                 text: element.farmName,\n//                 id: element._id,\n//                 value: element._id\n//             });\n//         });\n//     }\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}