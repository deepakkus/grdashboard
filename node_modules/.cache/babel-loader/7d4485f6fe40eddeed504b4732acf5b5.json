{"ast":null,"code":"import axios from \"axios\";\nimport { ADD_CROPCYCLE, ADD_CROPCYCLE_ERROR // SET_CROPCYCLES,\n, SET_SORTEDCROPCYCLES, GET_CROPCYCLES_ERROR, SET_APP_LOADING, GET_USER_FARM_CROPCYCLES, GET_USER_FARM_CROPCYCLES_ERROR, UPDATE_CROPCYCLE, UPDATE_CROPCYCLE_ERROR } from \"./types\";\nimport { updateFarmCrop } from \"../services/farm\";\nexport const addCropCycle = (cropCycle, userId, token) => async dispatch => {\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/cropcycle`, // `http://localhost:4000/cropcycle/`,\n    cropCycle, {\n      headers: {\n        Authorization: `Bearer ${token} ${userId}`\n      }\n    });\n\n    if (res && res.data && res.data._id) {\n      updateFarmCrop(res.data._id);\n    }\n\n    dispatch({\n      type: ADD_CROPCYCLE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_CROPCYCLE_ERROR,\n      payload: err.response\n    });\n  }\n};\nexport const editCropCycle = (cropCycle, userId, token) => async dispatch => {\n  try {\n    const res = await axios.put(`${process.env.REACT_APP_API_URL}/cropcycle`, cropCycle, {\n      headers: {\n        Authorization: `Bearer ${token} ${userId}`\n      }\n    });\n\n    if (res && res.data && res.data._id) {\n      updateFarmCrop(res.data._id);\n    }\n\n    dispatch({\n      type: UPDATE_CROPCYCLE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: UPDATE_CROPCYCLE_ERROR,\n      payload: err.response\n    });\n  }\n}; // export const getUserCropCycles = (userFarms, token, userId) => async (dispatch) => {\n//     const farmsIds = [];\n//     userFarms.map(uFarm => {\n//      uFarm ? (farmsIds.find((farmId) => farmId === uFarm) ? (console.log(\"duplicate\")) : \n//      (uFarm._id ? (farmsIds.push(uFarm._id))\n//      : (console.log(\"_id not defined\", uFarm)))\n//      )\n//       : (console.log(\"fromaction\", uFarm))   \n//     })\n//     try {\n//     // const res = await axios.post(`${process.env.API_LOCAL_DB}/cropcycle/all`, farmsIds);\n//     const res = await axios.post(`http://localhost:4000/cropcycle/all`, farmsIds, \n//     {\n//       headers: {\n//         Authorization: `Bearer ${token} ${userId}`,\n//       }\n//     });\n//     dispatch({\n//       type: SET_CROPCYCLES,\n//       payload: res.data,\n//     });\n//     dispatch({\n//       type: SET_APP_LOADING,\n//       payload: false,\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: GET_CROPCYCLES_ERROR,\n//       payload: { msg: err.response },\n//     });\n//   }\n// };\n\nexport const getUserSortedCropCycles = (userFarms, userId, token) => async dispatch => {\n  const farmsIds = [];\n  userFarms.map(uFarm => {\n    uFarm ? farmsIds.find(farmId => farmId === uFarm) ? console.log(\"duplicate\") : uFarm._id ? farmsIds.push(uFarm._id) : console.log(\"_id not defined\", uFarm) : console.log(\"fromaction\", uFarm);\n  });\n\n  try {\n    if (farmsIds.length) {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/cropcycle/all`, // const res = await axios.post(`http://localhost:4000/cropcycle/all`,\n      farmsIds, {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`\n        }\n      });\n      dispatch({\n        type: SET_SORTEDCROPCYCLES,\n        // payload: res,\n        payload: res.data\n      });\n      dispatch({\n        type: SET_APP_LOADING,\n        payload: false\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: GET_CROPCYCLES_ERROR,\n      payload: {\n        msg: err.response\n      }\n    });\n  }\n};\nexport const getUserFarmCropCycles = (farmID, userId, token) => async dispatch => {\n  try {\n    const res = await axios.get(`https://7exe1aor1a.execute-api.us-east-1.amazonaws.com/dev/cropcycle/${farmID}`, {\n      headers: {\n        Authorization: `Bearer ${token} ${userId}`\n      }\n    });\n    dispatch({\n      type: GET_USER_FARM_CROPCYCLES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_USER_FARM_CROPCYCLES_ERROR,\n      payload: {\n        msg: err.response\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/actions/cropcycles.js"],"names":["axios","ADD_CROPCYCLE","ADD_CROPCYCLE_ERROR","SET_SORTEDCROPCYCLES","GET_CROPCYCLES_ERROR","SET_APP_LOADING","GET_USER_FARM_CROPCYCLES","GET_USER_FARM_CROPCYCLES_ERROR","UPDATE_CROPCYCLE","UPDATE_CROPCYCLE_ERROR","updateFarmCrop","addCropCycle","cropCycle","userId","token","dispatch","res","post","process","env","REACT_APP_API_URL","headers","Authorization","data","_id","type","payload","err","response","editCropCycle","put","getUserSortedCropCycles","userFarms","farmsIds","map","uFarm","find","farmId","console","log","push","length","msg","getUserFarmCropCycles","farmID","get"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport {\n  ADD_CROPCYCLE,\n  ADD_CROPCYCLE_ERROR,\n  // SET_CROPCYCLES,\n  SET_SORTEDCROPCYCLES,\n  GET_CROPCYCLES_ERROR,\n  SET_APP_LOADING,\n  GET_USER_FARM_CROPCYCLES,\n  GET_USER_FARM_CROPCYCLES_ERROR,\n  UPDATE_CROPCYCLE, UPDATE_CROPCYCLE_ERROR,\n} from \"./types\";\nimport { updateFarmCrop } from \"../services/farm\";\n\nexport const addCropCycle = (cropCycle, userId, token) => async (dispatch) => {\n  try {\n    const res = await axios.post(\n      `${process.env.REACT_APP_API_URL}/cropcycle`,\n      // `http://localhost:4000/cropcycle/`,\n      cropCycle,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`,\n        },\n      }\n    );\n    if (res && res.data && res.data._id){\n      updateFarmCrop(res.data._id);\n    }\n    dispatch({\n      type: ADD_CROPCYCLE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_CROPCYCLE_ERROR,\n      payload: err.response,\n    });\n  }\n};\n\nexport const editCropCycle = (cropCycle, userId, token) => async (dispatch) => {\n  try {\n    const res = await axios.put(\n      `${process.env.REACT_APP_API_URL}/cropcycle`,\n      cropCycle,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`,\n        },\n      }\n    );\n    if (res && res.data && res.data._id){\n      updateFarmCrop(res.data._id);\n    }\n    dispatch({\n      type: UPDATE_CROPCYCLE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: UPDATE_CROPCYCLE_ERROR,\n      payload: err.response,\n    });\n  }\n};\n\n// export const getUserCropCycles = (userFarms, token, userId) => async (dispatch) => {\n//     const farmsIds = [];\n//     userFarms.map(uFarm => {\n//      uFarm ? (farmsIds.find((farmId) => farmId === uFarm) ? (console.log(\"duplicate\")) : \n//      (uFarm._id ? (farmsIds.push(uFarm._id))\n//      : (console.log(\"_id not defined\", uFarm)))\n//      )\n//       : (console.log(\"fromaction\", uFarm))   \n//     })\n//     try {\n//     // const res = await axios.post(`${process.env.API_LOCAL_DB}/cropcycle/all`, farmsIds);\n//     const res = await axios.post(`http://localhost:4000/cropcycle/all`, farmsIds, \n//     {\n//       headers: {\n//         Authorization: `Bearer ${token} ${userId}`,\n//       }\n//     });\n//     dispatch({\n//       type: SET_CROPCYCLES,\n//       payload: res.data,\n//     });\n//     dispatch({\n//       type: SET_APP_LOADING,\n//       payload: false,\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: GET_CROPCYCLES_ERROR,\n//       payload: { msg: err.response },\n//     });\n//   }\n// };\n\nexport const getUserSortedCropCycles = (userFarms, userId, token) => async (dispatch) => {\n  const farmsIds = [];\n    userFarms.map(uFarm => {\n     uFarm ? (farmsIds.find((farmId) => farmId === uFarm) ? (console.log(\"duplicate\")) : \n     (uFarm._id ? (farmsIds.push(uFarm._id))\n     : (console.log(\"_id not defined\", uFarm)))\n     )\n      : (console.log(\"fromaction\", uFarm))   \n    })    \n    try {\n      if (farmsIds.length) {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/cropcycle/all`,\n        // const res = await axios.post(`http://localhost:4000/cropcycle/all`,\n        farmsIds,\n        {\n          headers: {\n            Authorization: `Bearer ${token} ${userId}`,\n          }\n        });\n        dispatch({\n          type: SET_SORTEDCROPCYCLES,\n          // payload: res,\n          payload: res.data,\n        });\n        dispatch({\n          type: SET_APP_LOADING,\n          payload: false,\n        });\n      }    \n  } catch (err) {\n    dispatch({\n      type: GET_CROPCYCLES_ERROR,\n      payload: { msg: err.response },\n    });\n  }\n};\nexport const getUserFarmCropCycles = (farmID, userId, token) => async (\n  dispatch\n) => {\n  try {\n    const res = await axios.get(\n      `https://7exe1aor1a.execute-api.us-east-1.amazonaws.com/dev/cropcycle/${farmID}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token} ${userId}`,\n        },\n      }\n    );\n    dispatch({\n      type: GET_USER_FARM_CROPCYCLES,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_USER_FARM_CROPCYCLES_ERROR,\n      payload: { msg: err.response },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}