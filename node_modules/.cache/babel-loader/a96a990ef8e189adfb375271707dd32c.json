{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/PublicData/PublicData.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getWeatherData } from \"../../actions/weather\";\nimport { useTranslation } from \"react-i18next\";\nimport { Loader, Grid, Container } from \"semantic-ui-react\";\nimport \"../../utils/css/weather-icons.css\";\nimport \"./PublicData.scss\";\nimport WeatherDisplay from \"react-weather-display\";\nimport MainButton from \"../MainButton/MainButton\"; // import { useTranslation } from \"react-i18next\";\n// const weatherIcons = {\n//   Thunderstorm: \"wi-thunderstorm\",\n//   Drizzle: \"wi-sleet\",\n//   Rain: \"wi-storm-showers\",\n//   Snow: \"wi-snow\",\n//   Atmosphere: \"wi-fog\",\n//   Clear: \"wi-day-sunny\",\n//   Clouds: \"wi-day-fog\",\n// };\n\nconst PublicData = props => {\n  // weatherData = null;\n  // TODO get latlng from browser location if not found\n  // transltion i18next\n  const {\n    t\n  } = useTranslation(\"public-data\");\n  const {\n    weatherData,\n    getWeatherData,\n    latlng,\n    match\n  } = props; // weather Icon function\n  // const [iconState, setIconState] = useState({ icon: \"wi-day-sunny\" });\n  // console.log(\"routeID\", match.params.id);\n  // console.log(\"top\", weatherData);\n  // get the right weather Icon depnds on the randeId\n  // const get_WeatherIcon = (icons, rangeId) => {\n  //   switch (true) {\n  //     case rangeId >= 200 && rangeId < 232:\n  //       setIconState({ icon: icons.Thunderstorm });\n  //       break;\n  //     case rangeId >= 300 && rangeId <= 321:\n  //       setIconState({ icon: icons.Drizzle });\n  //       break;\n  //     case rangeId >= 500 && rangeId <= 521:\n  //       setIconState({ icon: icons.Rain });\n  //       break;\n  //     case rangeId >= 600 && rangeId <= 622:\n  //       setIconState({ icon: icons.Snow });\n  //       break;\n  //     case rangeId >= 701 && rangeId <= 781:\n  //       setIconState({ icon: icons.Atmosphere });\n  //       break;\n  //     case rangeId === 800:\n  //       setIconState({ icon: icons.Clear });\n  //       break;\n  //     case rangeId >= 801 && rangeId <= 804:\n  //       setIconState({ icon: icons.Clouds });\n  //       break;\n  //     default:\n  //       setIconState({ icon: icons.Clouds });\n  //   }\n  // };\n\n  const changeLogo = image => {\n    switch (image) {\n      case \"cloudy\":\n        return \"cloudy\";\n        break;\n\n      case \"partly_cloudy\":\n        return \"cloudy\";\n        break;\n\n      case \"mostly_cloudy\":\n        return \"cloudy\";\n        break;\n\n      case \"mostly_clear\":\n        return \"sunny\";\n        break;\n\n      case \"clear\":\n        return \"sunny\";\n        break;\n\n      case \"fog\":\n        return \"cloudy\";\n        break;\n\n      case \"fog_light\":\n        return \"sunny\";\n        break;\n\n      case \"drizzle\":\n        return \"cloudy\";\n        break;\n\n      case \"rain_light\":\n        return \"rainy\";\n        break;\n\n      case \"rain\":\n        return \"rainy\";\n        break;\n\n      case \"rain_heavy\":\n        return \"rainy\";\n        break;\n\n      case \"tstorm\":\n        return \"rainy\";\n        break;\n\n      case \"flurries\":\n        return \"rainy\";\n        break;\n\n      case \"snow_light\":\n        return \"snowy\";\n        break;\n\n      case \"snow\":\n        return \"snowy\";\n        break;\n\n      case \"snow_heavy\":\n        return \"snowy\";\n        break;\n\n      case \"ice_pallets_light\":\n        return \"rainy\";\n        break;\n\n      case \"ice_pallets_heavy\":\n        return \"rainy\";\n        break;\n\n      case \"ice_pallets\":\n        return \"rainy\";\n        break;\n\n      case \"freezing_drizzle\":\n        return \"snowy\";\n        break;\n\n      case \"freezing_rain_light\":\n        return \"rainy\";\n        break;\n\n      case \"freezing_rain\":\n        return \"rainy\";\n        break;\n\n      case \"freezing_rain_heavy\":\n        return \"rainy\";\n        break;\n\n      default:\n        return \"cloudy\";\n    }\n  };\n\n  useEffect(() => {\n    // console.log(\"weatherData\", weatherData);\n    getWeatherData(latlng.lat, latlng.lon); // get_WeatherIcon(weatherIcons, weatherData && weatherData.weatherId);\n  }, [latlng.lat, latlng.lon]); // convert to celsius func\n\n  const calCelsius = temp => {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }; // const { icon } = iconState;\n\n\n  if (!weatherData) {\n    return null;\n  }\n\n  const precipIntensity = weatherData.precipitation ? weatherData.precipitation.value : weatherData.precipitation;\n  const humidity = weatherData.humidity ? weatherData.precipitation.value : weatherData.humidity;\n  const visibility = weatherData.visibility ? weatherData.visibility.value : weatherData.visibility;\n  const temp = weatherData.temp ? weatherData.temp.value : weatherData.temp;\n  const wind_direction = weatherData.wind_direction ? weatherData.wind_direction.value : weatherData.wind_direction;\n  const wind_speed = weatherData.wind_speed ? weatherData.wind_speed.value : weatherData.wind_speed;\n  const weatherDesc = weatherData.weather_code ? weatherData.weather_code.value : weatherData.weather_code;\n  const main = weatherData.weather_code ? weatherData.weather_code.value : weatherData.weather_code; // if (!weatherData) {\n  //   return <p>no data found</p>;\n  //   // return <Loader active inline=\"centered\" className=\"mt-4\" />;\n  // }\n  //weather icon func\n  // get_WeatherIcon(weatherIcons, weatherId);\n  // const UrlID = match.params.id;\n\n  return latlng.lat !== 0 && latlng.lng !== 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    columns: 1,\n    className: \"mx-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"ml-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    className: \"ml-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    textAlign: \"center\",\n    className: \"ml-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PublicData\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, t(\"public-data\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 21\n    }\n  }, weatherDesc), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, t(\"temp\"), ` ${temp}`, \"\\xB0C\")), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"weatherIcon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(WeatherDisplay, {\n    height: 140,\n    width: 140,\n    currentCondition: changeLogo(main),\n    currentTemperature: temp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, t(\"precipitation-intensity\"), \" \", precipIntensity), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  }, t(\"humidity\"), \"  \", humidity, \" %\"), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }\n  }, t(\"visibility\"), \" \", visibility, \" km\"), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, t(\"wind-speed\"), \" \", wind_speed, \" Kmph\"), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }, t(\"wind-direction\"), \" \", wind_direction, \"\\xB0 N\"))), /*#__PURE__*/React.createElement(MainButton, Object.assign({\n    className: \"gis\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }), t(\"ADD ACTIVITY\")))))) :\n  /*#__PURE__*/\n  // \"\"\n  React.createElement(Loader, {\n    active: true,\n    inline: \"centered\",\n    className: \"mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapStateToProps = state => ({\n  weatherData: state.weather.weatherData_sensor,\n  sensors: state.sensors.sensormeasures\n});\n\nexport default connect(mapStateToProps, {\n  getWeatherData\n})(PublicData);","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/PublicData/PublicData.js"],"names":["React","useEffect","connect","getWeatherData","useTranslation","Loader","Grid","Container","WeatherDisplay","MainButton","PublicData","props","t","weatherData","latlng","match","changeLogo","image","lat","lon","calCelsius","temp","cell","Math","floor","precipIntensity","precipitation","value","humidity","visibility","wind_direction","wind_speed","weatherDesc","weather_code","main","lng","mapStateToProps","state","weather","weatherData_sensor","sensors","sensormeasures"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getWeatherData } from \"../../actions/weather\";\nimport { useTranslation } from \"react-i18next\";\nimport { Loader , Grid, Container} from \"semantic-ui-react\";\nimport \"../../utils/css/weather-icons.css\";\nimport \"./PublicData.scss\";\nimport WeatherDisplay from \"react-weather-display\";\nimport MainButton from \"../MainButton/MainButton\";\n// import { useTranslation } from \"react-i18next\";\n\n// const weatherIcons = {\n//   Thunderstorm: \"wi-thunderstorm\",\n//   Drizzle: \"wi-sleet\",\n//   Rain: \"wi-storm-showers\",\n//   Snow: \"wi-snow\",\n//   Atmosphere: \"wi-fog\",\n//   Clear: \"wi-day-sunny\",\n//   Clouds: \"wi-day-fog\",\n// };\n\nconst  PublicData = (props) =>{\n  // weatherData = null;\n  // TODO get latlng from browser location if not found\n  // transltion i18next\n  const { t } = useTranslation(\"public-data\");\n  const { weatherData, getWeatherData, latlng, match } = props\n  // weather Icon function\n  // const [iconState, setIconState] = useState({ icon: \"wi-day-sunny\" });\n  // console.log(\"routeID\", match.params.id);\n  // console.log(\"top\", weatherData);\n\n  // get the right weather Icon depnds on the randeId\n  // const get_WeatherIcon = (icons, rangeId) => {\n  //   switch (true) {\n  //     case rangeId >= 200 && rangeId < 232:\n  //       setIconState({ icon: icons.Thunderstorm });\n  //       break;\n  //     case rangeId >= 300 && rangeId <= 321:\n  //       setIconState({ icon: icons.Drizzle });\n  //       break;\n  //     case rangeId >= 500 && rangeId <= 521:\n  //       setIconState({ icon: icons.Rain });\n  //       break;\n  //     case rangeId >= 600 && rangeId <= 622:\n  //       setIconState({ icon: icons.Snow });\n  //       break;\n  //     case rangeId >= 701 && rangeId <= 781:\n  //       setIconState({ icon: icons.Atmosphere });\n  //       break;\n  //     case rangeId === 800:\n  //       setIconState({ icon: icons.Clear });\n  //       break;\n  //     case rangeId >= 801 && rangeId <= 804:\n  //       setIconState({ icon: icons.Clouds });\n  //       break;\n  //     default:\n  //       setIconState({ icon: icons.Clouds });\n  //   }\n  // };\n\n  const changeLogo = (image) => {\n    switch(image){\n      case \"cloudy\":\n        return \"cloudy\";\n        break;\n      case \"partly_cloudy\":\n        return \"cloudy\";\n        break;\n      case \"mostly_cloudy\":\n        return \"cloudy\";\n        break;\n      case \"mostly_clear\":\n        return \"sunny\";\n        break;\n      case \"clear\":\n        return \"sunny\";\n        break;\n      case \"fog\":\n        return \"cloudy\";\n        break;\n      case \"fog_light\":\n        return \"sunny\";\n        break;\n      case \"drizzle\":\n        return \"cloudy\";\n        break;\n      case \"rain_light\":\n        return \"rainy\";\n        break;\n      case \"rain\":\n        return \"rainy\";\n        break;\n      case \"rain_heavy\":\n        return \"rainy\";\n        break;\n      case \"tstorm\":\n        return \"rainy\";\n        break;\n      case \"flurries\":\n        return \"rainy\";\n        break;\n      case \"snow_light\":\n        return \"snowy\";\n        break;\n      case \"snow\":\n        return \"snowy\";\n        break;\n      case \"snow_heavy\":\n        return \"snowy\";\n        break;\n      case \"ice_pallets_light\":\n        return \"rainy\";\n        break;\n      case \"ice_pallets_heavy\":\n        return \"rainy\";\n        break;\n      case \"ice_pallets\":\n        return \"rainy\";\n        break;\n      case \"freezing_drizzle\":\n        return \"snowy\";\n        break;\n      case \"freezing_rain_light\":\n        return \"rainy\";\n        break;\n      case \"freezing_rain\":\n        return \"rainy\";\n        break;\n      case \"freezing_rain_heavy\":\n        return \"rainy\";\n        break;\n      default:\n        return \"cloudy\";\n    }\n  }\n\n  useEffect(() => {\n    // console.log(\"weatherData\", weatherData);\n\n    getWeatherData(latlng.lat, latlng.lon);\n\n    // get_WeatherIcon(weatherIcons, weatherData && weatherData.weatherId);\n  }, [latlng.lat, latlng.lon]);\n\n  // convert to celsius func\n  const calCelsius = (temp) => {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  };\n\n  // const { icon } = iconState;\n  if (!weatherData) {\n    return null;\n  }\n  const precipIntensity = weatherData.precipitation ? weatherData.precipitation.value : weatherData.precipitation;\n  const humidity = weatherData.humidity ? weatherData.precipitation.value : weatherData.humidity;\n  const visibility = weatherData.visibility ? weatherData.visibility.value : weatherData.visibility;\n  const temp = weatherData.temp ? weatherData.temp.value : weatherData.temp;\n  const wind_direction = weatherData.wind_direction ? weatherData.wind_direction.value : weatherData.wind_direction;\n  const wind_speed = weatherData.wind_speed ? weatherData.wind_speed.value : weatherData.wind_speed;\n  const weatherDesc = weatherData.weather_code ? weatherData.weather_code.value : weatherData.weather_code;\n  const main = weatherData.weather_code ? weatherData.weather_code.value : weatherData.weather_code;\n  // if (!weatherData) {\n  //   return <p>no data found</p>;\n  //   // return <Loader active inline=\"centered\" className=\"mt-4\" />;\n  // }\n  //weather icon func\n  // get_WeatherIcon(weatherIcons, weatherId);\n  // const UrlID = match.params.id;\n\n  return latlng.lat !== 0 && latlng.lng !==0  ? (\n    <>\n\n      <Grid columns={1} className=\"mx-0\">\n        <Grid.Row className=\"ml-0\">\n          <Grid.Column className=\"ml-0\">\n            <Container textAlign=\"center\" className=\"ml-5\">\n              <div className=\"PublicData\">\n                <h5>{t(\"public-data\")}</h5>  \n                <div className=\"weather\">\n                  <div className=\"weather-details\">\n                    <h6>\n                      {weatherDesc}\n                    </h6>\n                    <h6>\n                      {t(\"temp\")}{` ${temp}`}&deg;C\n                    </h6>\n                  </div>\n                  <i className=\"weatherIcon\"  >\n                    <WeatherDisplay \n                      height={140}\n                      width={140}\n                      currentCondition={changeLogo(main)}\n                      currentTemperature={temp}\n                    />\n                  </i>\n                </div>\n\n                <h6>\n                  {t(\"precipitation-intensity\")} {precipIntensity}\n                </h6>\n                <h6>\n                  {t(\"humidity\")}  {humidity} %\n                </h6>\n                <h6>\n                  {t(\"visibility\")} {visibility} km\n                </h6>\n                <h6>\n                  {t(\"wind-speed\")} {wind_speed} Kmph\n                </h6>\n                <h6>\n                  {t(\"wind-direction\")} {wind_direction}&deg; N\n                </h6>\n\n              </div>\n            </Container>\n            \n            <MainButton className=\"gis\" {...props}>\n              {t(\"ADD ACTIVITY\")}\n            </MainButton>\n          </Grid.Column>\n          \n        </Grid.Row>\n      </Grid>\n                                {/* <div className=\"PublicData\"> */}\n                                  {/* <hr /> */}\n                                  {/* <h5>{t(\"public-data\")}</h5> */}\n\n                                  {/* <div className=\"weather \"> */}\n                                    {/* <div className=\"weather-detials\">\n                                      <h6>{weatherDesc}</h6>\n                                      <h6>\n                                        {t(\"temp\")}\n                                        {temp}&deg;c\n                                      </h6>\n                                    </div> */}\n                                    {/* <i className={`wi ${icon} display-1 weatherIcon`} /> */}\n                                    {/* <i className=\"weatherIcon\"  >\n                                        <WeatherDisplay \n                                            height={140}\n                                            width={140}\n                                            currentCondition={changeLogo(main)}\n                                            currentTemperature={temp}\n                                          />\n                                      </i> */}\n                                  {/* </div>\n\n                                  <h6>\n                                    {t(\"precipitation-intensity\")} {precipIntensity}\n                                  </h6>\n                                  <h6>\n                                    {t(\"humidity\")}  {humidity} %\n                                  </h6>\n                                  <h6>\n                                    {t(\"visibility\")} {visibility} km\n                                  </h6>\n                                  <h6>\n                                    {t(\"wind-speed\")} {wind_speed} Kmph\n                                  </h6>\n                                  <h6>\n                                    {t(\"wind-direction\")} {wind_direction}&deg; N\n                                  </h6>\n                                </div> */}\n                                  {/* <MainButton className=\"gis\" {...props}>\n                                    {t(\"ADD ACTIVITY\")}\n                                  </MainButton> */}\n    </>\n  ) : (\n    // \"\"\n    <Loader active inline=\"centered\" className=\"mt-3\" />\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  weatherData: state.weather.weatherData_sensor,\n  sensors: state.sensors.sensormeasures,\n});\n\nexport default connect(mapStateToProps, { getWeatherData })(PublicData);\n"]},"metadata":{},"sourceType":"module"}