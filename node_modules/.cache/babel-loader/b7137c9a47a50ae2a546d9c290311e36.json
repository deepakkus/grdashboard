{"ast":null,"code":"var _jsxFileName = \"/Users/deepakkumarsingh/Downloads/banao_lg/sensegrass/src/components/SensorTable/sensortable.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Grid, GridColumn, Segment, Divider, Responsive, Container } from \"semantic-ui-react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { withTranslation } from \"react-i18next\"; // import depthSensor from \"../../images/ssensorIMG.png\";\n\nimport depthSensor from \"../../images/sensorsImage.png\";\nimport \"./sensortable.scss\";\nimport SensorUpper from \"../../components/SensorUpper/sensorupper\";\nimport MainButton from \"../../components/MainButton/MainButton\";\nimport { getIdealRanges } from \"../../services/plantCard\";\n\nclass SensorTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      /**\n       * ProgressBar from Bootstrap coloring values\n       */\n      progressVariants: [\"success\", \"warning\", \"danger\"],\n\n      /**\n       * Progress from Semantic coloring values\n       * Not Used\n       */\n      progressSemantic: [\"success\", \"warning\", \"error\"],\n\n      /**\n       * Not checked yet\n       */\n      progressMaxVal: [100, 100, 100, 100, 40, 14, 100, 100]\n    };\n\n    this.checkVariant = (key, val, ranges) => {\n      if (val >= ranges[key].min && val <= ranges[key].max) {\n        return this.state.progressVariants[0];\n      } else if (Math.round(val / ranges[key].min) === 1 || Math.floor(val / ranges[key].max) === 1) {\n        return this.state.progressVariants[1];\n      } else {\n        return this.state.progressVariants[2];\n      }\n    };\n\n    this.checkProgress = (key, val, ranges) => {\n      if (val >= ranges[key].min && val <= ranges[key].max) {\n        return this.state.progressSemantic[0];\n      } else if (Math.round(val / ranges[key].min) === 1 || Math.floor(val / ranges[key].max) === 1) {\n        return this.state.progressSemantic[1];\n      } else {\n        return this.state.progressSemantic[2];\n      }\n    };\n\n    this.testTable = () => {\n      let table = []; // Outer loop to create parent\n\n      for (let i = 0; i < 3; i++) {\n        let children = []; //Inner loop to create children\n\n        for (let j = 0; j < 5; j++) {\n          children.push( /*#__PURE__*/React.createElement(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 23\n            }\n          }, `Column ${j + 1}`));\n        } //Create the parent and add the children\n\n\n        table.push( /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 18\n          }\n        }, children));\n      }\n\n      return table;\n    };\n\n    this.createTable = () => {\n      let table = [];\n      let {\n        t,\n        ranges\n      } = this.props; // ranges = undefined;\n\n      if (Object.keys(ranges).length) {\n        let depths = [this.props.sensor.level1, this.props.sensor.level2, this.props.sensor.level3]; // console.log(\"test\", depths);\n        // console.log(\"test2\", this.state.depths);\n        // Outer loop to create parent\n        // const { t } = this.props;\n\n        depths.map((depth, index) => {\n          let rangesFromState = ranges;\n          const {\n            nitrogen,\n            phosphorus,\n            potassium,\n            salinity,\n            soilTemp,\n            pH,\n            moisture,\n            respiration,\n            aeration\n          } = rangesFromState; // console.log(\"rangesFromState\", rangesFromState);\n\n          let children = [];\n          rangesFromState = {\n            N: nitrogen,\n            P: phosphorus,\n            K: potassium,\n            salinity,\n            soilTemp,\n            pH,\n            moisture,\n            // respiration,\n            // aeration,\n            // \"evapotranspiration(ET)\": {\n            //   min: 80,\n            //   max: 100,\n            // },\n            item: {\n              respiration,\n              aeration\n            }\n          }; // console.log(\"rangesFromState1\", rangesFromState);\n          //Inner loop to create children\n\n          for (var key in rangesFromState) {\n            let val = Math.round(depth[key]);\n            children.push( /*#__PURE__*/React.createElement(GridColumn, {\n              className: \"sensor-column\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 13\n              }\n            }, val == undefined || NaN || null ? /*#__PURE__*/React.createElement(\"p\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }\n            }) : /*#__PURE__*/React.createElement(\"div\", {\n              className: \"p-0\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              style: {\n                fontSize: 40,\n                textAlign: \"center\",\n                color: \"#8D8C8C\",\n                fontWeight: \"normal\",\n                marginLeft: \"10px\"\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 19\n              }\n            }, (() => {\n              if (key === \"item\" && depth[\"respiration\"]) {\n                return val = depth[\"respiration\"];\n              } else if (key === \"item\" && depth[\"aeration\"]) {\n                return val = depth[\"aeration\"];\n              } else if (depth[key] == undefined || NaN || null) {\n                return \"\";\n              } else {\n                return val = Math.round(depth[key]);\n              }\n            })()), val == undefined || isNaN(val) || null ? /*#__PURE__*/React.createElement(\"p\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 21\n              }\n            }) : /*#__PURE__*/React.createElement(ProgressBar, {\n              style: {\n                height: \".5rem\",\n                textAlign: \"center\"\n              },\n              striped: true,\n              variant: this.checkVariant(key, val, rangesFromState),\n              now: val,\n              className: \"progress-Bar\" // max={rangesFromState[key].max}\n              ,\n              max: (() => {\n                if (key === \"item\" && depth[\"respiration\"]) {\n                  return rangesFromState[\"item\"].respiration.max;\n                } else if (key === \"item\" && depth[\"aeration\"]) {\n                  return rangesFromState[\"item\"].aeration.max;\n                } else {\n                  return rangesFromState[key].max;\n                }\n              })(),\n              key: `$key+$index`,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 21\n              }\n            }), depth[key] == undefined || NaN || null ? \"\" : /*#__PURE__*/React.createElement(\"p\", {\n              style: {\n                margin: 0,\n                textAlign: \"center\"\n              },\n              className: \"sensor-Status\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 21\n              }\n            }, \" \", t(\"common:Ideal\"), \" \"), /*#__PURE__*/React.createElement(\"p\", {\n              style: {\n                fontSize: 10,\n                textAlign: \"center\"\n              },\n              className: \"sensor-Status\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 19\n              }\n            }, (() => {\n              if (key === \"item\" && depth[\"respiration\"]) {\n                return ` ${rangesFromState[\"item\"].respiration.min} -\n                        ${rangesFromState[\"item\"].respiration.max}`;\n              } else if (key === \"item\" && depth[\"aeration\"]) {\n                return ` ${rangesFromState[\"item\"].aeration.min} -\n                        ${rangesFromState[\"item\"].aeration.max}`;\n              } else if (key === \"item\" && !depth[\"aeration\"] && !depth[\"aeration\"]) {\n                return ``;\n              } else {\n                return `${rangesFromState[key].min} - ${rangesFromState[key].max}`;\n              }\n            })()), (() => {\n              if (key === \"item\" && depth[\"respiration\"]) {\n                return /*#__PURE__*/React.createElement(GridColumn, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 238,\n                    columnNumber: 25\n                  }\n                }, /*#__PURE__*/React.createElement(\"p\", {\n                  style: {\n                    fontWeight: \"bold\",\n                    margin: 0\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 27\n                  }\n                }, \"Respiration\"), /*#__PURE__*/React.createElement(\"p\", {\n                  style: {\n                    fontSize: 11,\n                    padding: \"0 30%\"\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 27\n                  }\n                }, \"(PPM)\"));\n              } else if (key === \"item\" && depth[\"aeration\"]) {\n                return /*#__PURE__*/React.createElement(GridColumn, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 25\n                  }\n                }, /*#__PURE__*/React.createElement(\"p\", {\n                  style: {\n                    fontWeight: \"bold\",\n                    margin: 0\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 27\n                  }\n                }, \"Aeration\"), /*#__PURE__*/React.createElement(\"p\", {\n                  style: {\n                    fontSize: 11,\n                    padding: \"0 30%\",\n                    margin: 0\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 253,\n                    columnNumber: 27\n                  }\n                }, \"(%)\"));\n              }\n            })())));\n          }\n\n          table.push( /*#__PURE__*/React.createElement(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Grid.Row, {\n            className: \"sensor-row\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 13\n            }\n          }, children), /*#__PURE__*/React.createElement(Divider, {\n            style: {\n              minWidth: \"60vw\"\n            },\n            className: \"p-0 m-0\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 13\n            }\n          })));\n        });\n      }\n\n      return table;\n    };\n  }\n\n  async componentDidMount() {\n    getIdealRanges();\n  }\n  /**\n   * Progress from SemanticUI\n   * @param key table header in this.state.depths list\n   * @param val value for column from this.state.depths list\n   * if it is in the ideal range specified in the state {ranges}\n   * success -> in ideal range\n   * warning -> round(value/minIdeal) = 1 or floor(value/maxIdeal) = 1\n   * error -> otherwise\n   */\n\n\n  render() {\n    const {\n      t,\n      sensor,\n      ranges\n    } = this.props;\n    return ranges ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Responsive, {\n      minWidth: 1024,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      style: {\n        overflowX: \"hidden\",\n        maxHeight: \"85vh\",\n        marginTop: \"20px\"\n      },\n      className: \"table\",\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"my-4 mx-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SensorUpper, {\n      match: this.props.match,\n      sensor: this.props.sensor,\n      userDevices: this.props.devices.UserDevicesOptions,\n      className: \"m-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Divider, {\n      style: {\n        width: \"100vw\"\n      },\n      className: \"p-0 m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }\n    }), sensor ? /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"table m-4 ml-0 pl-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 8,\n      rows: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"header-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 25\n      }\n    }, t(\"common:Nitrogen\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 50\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 57\n      }\n    }, \"(mg/L)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 25\n      }\n    }, t(\"common:Phosphorus\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 52\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 59\n      }\n    }, \"(mg/L)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 25\n      }\n    }, t(\"common:Potassium\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 51\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 58\n      }\n    }, \"(mg/L)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 25\n      }\n    }, t(\"common:Salinity\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 50\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 57\n      }\n    }, \"(ds/M)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }\n    }, t(\"common:SoilTemp\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 50\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 57\n      }\n    }, \"(\\u2103)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold ph-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 25\n      }\n    }, t(\"common:pH\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 44\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 51\n      }\n    }, \"(pH)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 25\n      }\n    }, t(\"common:Moisture\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 50\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 57\n      }\n    }, \"(%)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold additional-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 25\n      }\n    }, \" \", t(\"common:Additional\"))), this.createTable())) : \"\"), sensor && /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: depthSensor,\n      alt: \"depthSensor\",\n      className: \"depthSensorImg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(Responsive, {\n      minWidth: 768,\n      maxWidth: 1024,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      style: {\n        overflowX: \"scroll\",\n        maxHeight: \"75vh\",\n        marginTop: \"20px\"\n      },\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"my-4 mx-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SensorUpper, {\n      match: this.props.match,\n      sensor: this.props.sensor,\n      userDevices: this.props.devices.UserDevicesOptions,\n      className: \"m-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Divider, {\n      style: {\n        width: \"100vw\"\n      },\n      className: \"p-0 m-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 17\n      }\n    }), sensor ? /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"table m-4 ml-0 pl-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 8,\n      rows: 4,\n      className: \"table-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"header-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 25\n      }\n    }, t(\"common:Nitrogen\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 50\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 57\n      }\n    }, \"(mg/L)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 25\n      }\n    }, t(\"common:Phosphorus\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 52\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 59\n      }\n    }, \"(mg/L)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 25\n      }\n    }, t(\"common:Potassium\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 51\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 58\n      }\n    }, \"(mg/L)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 25\n      }\n    }, t(\"common:Salinity\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 50\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 57\n      }\n    }, \"(ds/M)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 25\n      }\n    }, t(\"common:SoilTemp\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 50\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 57\n      }\n    }, \"(\\u2103)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold ph-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 25\n      }\n    }, t(\"common:pH\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 44\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 51\n      }\n    }, \"(pH)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 25\n      }\n    }, t(\"common:Moisture\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 50\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"unit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 57\n      }\n    }, \"(%)\")), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"bold additional-value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 25\n      }\n    }, \" \", t(\"common:Additional\"))), this.createTable())) : \"\"), sensor && /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: depthSensor,\n      alt: \"depthSensor\",\n      className: \"depthSensorImg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 19\n      }\n    }))))))) : /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\",\n        margin: \"1rem 0\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"p-0 m-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }\n    }, \"No sensors data found\"), /*#__PURE__*/React.createElement(Link, {\n      className: \"p-0 m-0\",\n      to: \"/addDevice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MainButton, {\n      style: {\n        textAlign: \"center\",\n        width: \"15vw\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }\n    }, \"ADD A NEW DEVICE\")));\n  }\n\n}\n\nconst SensorTableComponent = withTranslation()(SensorTable);\nexport default SensorTableComponent;","map":{"version":3,"sources":["/Users/deepakkumarsingh/Downloads/banao_lg/sensegrass/src/components/SensorTable/sensortable.js"],"names":["React","Component","Link","Grid","GridColumn","Segment","Divider","Responsive","Container","ProgressBar","withTranslation","depthSensor","SensorUpper","MainButton","getIdealRanges","SensorTable","state","progressVariants","progressSemantic","progressMaxVal","checkVariant","key","val","ranges","min","max","Math","round","floor","checkProgress","testTable","table","i","children","j","push","createTable","t","props","Object","keys","length","depths","sensor","level1","level2","level3","map","depth","index","rangesFromState","nitrogen","phosphorus","potassium","salinity","soilTemp","pH","moisture","respiration","aeration","N","P","K","item","undefined","NaN","fontSize","textAlign","color","fontWeight","marginLeft","isNaN","height","margin","padding","minWidth","componentDidMount","render","overflowX","maxHeight","marginTop","match","devices","UserDevicesOptions","width","SensorTableComponent"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Grid, GridColumn, Segment, Divider, Responsive, Container} from \"semantic-ui-react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { withTranslation } from \"react-i18next\";\n\n// import depthSensor from \"../../images/ssensorIMG.png\";\nimport depthSensor from \"../../images/sensorsImage.png\";\nimport \"./sensortable.scss\";\nimport SensorUpper from \"../../components/SensorUpper/sensorupper\";\nimport MainButton from \"../../components/MainButton/MainButton\";\nimport { getIdealRanges } from \"../../services/plantCard\";\n\nclass SensorTable extends Component {\n  state = {\n    /**\n     * ProgressBar from Bootstrap coloring values\n     */\n    progressVariants: [\"success\", \"warning\", \"danger\"],\n\n    /**\n     * Progress from Semantic coloring values\n     * Not Used\n     */\n    progressSemantic: [\"success\", \"warning\", \"error\"],\n\n    /**\n     * Not checked yet\n     */\n    progressMaxVal: [100, 100, 100, 100, 40, 14, 100, 100],\n  };\n\n  /**\n   * ProgressBar from Bootstrap\n   * @param key table header in this.state.depths list\n   * @param val value for column from this.state.depths list\n   * if it is in the ideal range specified in the state {ranges}\n   */\n\n  checkVariant = (key, val, ranges) => {\n    if (val >= ranges[key].min && val <= ranges[key].max) {\n      return this.state.progressVariants[0];\n    } else if (\n      Math.round(val / ranges[key].min) === 1 ||\n      Math.floor(val / ranges[key].max) === 1\n    ) {\n      return this.state.progressVariants[1];\n    } else {\n      return this.state.progressVariants[2];\n    }\n  };\n  async componentDidMount() {\n    getIdealRanges();\n  }\n\n  /**\n   * Progress from SemanticUI\n   * @param key table header in this.state.depths list\n   * @param val value for column from this.state.depths list\n   * if it is in the ideal range specified in the state {ranges}\n   * success -> in ideal range\n   * warning -> round(value/minIdeal) = 1 or floor(value/maxIdeal) = 1\n   * error -> otherwise\n   */\n  checkProgress = (key, val, ranges) => {\n    if (val >= ranges[key].min && val <= ranges[key].max) {\n      return this.state.progressSemantic[0];\n    } else if (\n      Math.round(val / ranges[key].min) === 1 ||\n      Math.floor(val / ranges[key].max) === 1\n    ) {\n      return this.state.progressSemantic[1];\n    } else {\n      return this.state.progressSemantic[2];\n    }\n  };\n\n  /** Random Table For Testing */\n  testTable = () => {\n    let table = [];\n    // Outer loop to create parent\n    for (let i = 0; i < 3; i++) {\n      let children = [];\n      //Inner loop to create children\n      for (let j = 0; j < 5; j++) {\n        children.push(<td>{`Column ${j + 1}`}</td>);\n      }\n      //Create the parent and add the children\n      table.push(<tr>{children}</tr>);\n    }\n\n    return table;\n  };\n\n  /**\n   * Creating the table from state depths values\n   * @param ranges ideal range from state\n   * In react while rendering you can't render the parent then render child by loop\n   * Implement loop for parent then loop for children to add into children list\n   * exit children loop then add parent to list with children embedded in it\n   * return list of parents to be rendered\n   */\n\n  createTable = () => {\n    let table = [];\n\n    let { t, ranges } = this.props;\n\n    // ranges = undefined;\n\n    if (Object.keys(ranges).length) {\n      let depths = [\n        this.props.sensor.level1,\n        this.props.sensor.level2,\n        this.props.sensor.level3,\n      ];\n\n      // console.log(\"test\", depths);\n      // console.log(\"test2\", this.state.depths);\n      // Outer loop to create parent\n\n      // const { t } = this.props;\n      depths.map((depth, index) => {\n        let rangesFromState = ranges;\n        const {\n          nitrogen,\n          phosphorus,\n          potassium,\n          salinity,\n          soilTemp,\n          pH,\n          moisture,\n          respiration,\n          aeration,\n        } = rangesFromState;\n        // console.log(\"rangesFromState\", rangesFromState);\n        let children = [];\n\n        rangesFromState = {\n          N: nitrogen,\n          P: phosphorus,\n          K: potassium,\n          salinity,\n          soilTemp,\n          pH,\n          moisture,\n          // respiration,\n          // aeration,\n          // \"evapotranspiration(ET)\": {\n          //   min: 80,\n          //   max: 100,\n          // },\n          item: {\n            respiration,\n            aeration,\n          },\n        };\n        // console.log(\"rangesFromState1\", rangesFromState);\n\n        //Inner loop to create children\n        for (var key in rangesFromState) {\n          let val = Math.round(depth[key]);\n\n          children.push(\n            <GridColumn className = \"sensor-column\">\n              {val == undefined || NaN || null ? (\n                <p></p>\n              ) : (\n                <div className=\"p-0\">\n                  <p style={{ fontSize: 40, textAlign: \"center\", color: \"#8D8C8C\", fontWeight: \"normal\", marginLeft: \"10px\"}}>\n                    {(() => {\n                      if (key === \"item\" && depth[\"respiration\"]) {\n                        return (val = depth[\"respiration\"]);\n                      } else if (key === \"item\" && depth[\"aeration\"]) {\n                        return (val = depth[\"aeration\"]);\n                      } else if (depth[key] == undefined || NaN || null) {\n                        return \"\";\n                      } else {\n                        return (val = Math.round(depth[key]));\n                      }\n                    })()}\n                  </p>\n                  {val == undefined || isNaN(val) || null ? (\n                    <p></p>\n                  ) : (\n                    <ProgressBar\n                      style={{ height: \".5rem\", textAlign: \"center\" }}\n                      striped\n                      variant={this.checkVariant(key, val, rangesFromState)}\n                      now={val}\n                      className = \"progress-Bar\"\n                      // max={rangesFromState[key].max}\n                      max={(() => {\n                        if (key === \"item\" && depth[\"respiration\"]) {\n                          return rangesFromState[\"item\"].respiration.max;\n                        } else if (key === \"item\" && depth[\"aeration\"]) {\n                          return rangesFromState[\"item\"].aeration.max;\n                        } else {\n                          return rangesFromState[key].max;\n                        }\n                      })()}\n                      key={`$key+$index`}\n                    />\n                  )}\n\n                  {depth[key] == undefined || NaN || null ? (\n                    \"\"\n                  ) : (\n                    <p style={{ margin: 0, textAlign: \"center\" }} className = \"sensor-Status\">\n                      {\" \"}\n                      {t(\"common:Ideal\")}{\" \"}\n                    </p>\n                  )}\n                  <p style={{ fontSize: 10, textAlign: \"center\" }} className = \"sensor-Status\">\n                    {(() => {\n                      if (key === \"item\" && depth[\"respiration\"]) {\n                        return ` ${rangesFromState[\"item\"].respiration.min} -\n                        ${rangesFromState[\"item\"].respiration.max}`;\n                      } else if (key === \"item\" && depth[\"aeration\"]) {\n                        return ` ${rangesFromState[\"item\"].aeration.min} -\n                        ${rangesFromState[\"item\"].aeration.max}`;\n                      } else if (\n                        key === \"item\" &&\n                        !depth[\"aeration\"] &&\n                        !depth[\"aeration\"]\n                      ) {\n                        return ``;\n                      } else {\n                        return `${rangesFromState[key].min} - ${rangesFromState[key].max}`;\n                      }\n                    })()}\n                  </p>\n                  {/* <br /> */}\n\n                  {(() => {\n                    if (key === \"item\" && depth[\"respiration\"]) {\n                      return (\n                        <GridColumn>\n                          <p style={{ fontWeight: \"bold\", margin: 0 }}>\n                            Respiration\n                          </p>\n                          <p style={{ fontSize: 11, padding: \"0 30%\" }}>\n                            (PPM)\n                          </p>\n                        </GridColumn>\n                      );\n                    } else if (key === \"item\" && depth[\"aeration\"]) {\n                      return (\n                        <GridColumn>\n                          <p style={{ fontWeight: \"bold\", margin: 0 }}>\n                            Aeration\n                          </p>\n                          <p\n                            style={{\n                              fontSize: 11,\n                              padding: \"0 30%\",\n                              margin: 0,\n                            }}\n                          >\n                            (%)\n                          </p>\n                        </GridColumn>\n                      );\n                    }\n                  })()}\n                  {/* <Divider style={{ width: \"100%\" }} className=\"p-0 m-0\" /> */}\n                </div>\n              )}\n            </GridColumn>\n          );\n        }\n        table.push(\n          <React.Fragment>\n            <Grid.Row className=\"sensor-row\">{children}</Grid.Row>\n            <Divider style={{ minWidth: \"60vw\" }} className=\"p-0 m-0\" />\n          </React.Fragment>\n        );\n      });\n    }\n\n    return table;\n  };\n\n  render() {\n    const { t, sensor, ranges } = this.props;\n\n    return ranges ? (\n      <>\n        <Responsive minWidth = {1024}>\n          {/* <Container> */}\n          <Segment\n            style={{ overflowX: \"hidden\", maxHeight: \"85vh\", marginTop: \"20px\"}}\n            className=\"table\"\n            raised\n          >\n            <Grid columns={2}>\n              <Grid.Column width={13}>\n                <Grid.Row className=\"my-4 mx-2\">\n                  <SensorUpper\n                    match={this.props.match}\n                    sensor={this.props.sensor}\n                    userDevices={this.props.devices.UserDevicesOptions}\n                    className=\"m-5\"\n                  />\n                </Grid.Row>\n                <Divider style={{ width: \"100vw\" }} className=\"p-0 m-0\" />\n                {sensor ? (\n                  <Grid.Row className=\"table m-4 ml-0 pl-0\">\n                    <Grid columns={8} rows={4}>\n                      <Grid.Row className=\"header-row\">\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Nitrogen\")} <br /> <span className = \"unit\">(mg/L)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Phosphorus\")} <br /> <span className = \"unit\">(mg/L)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Potassium\")} <br /> <span className = \"unit\">(mg/L)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Salinity\")} <br /> <span className = \"unit\">(ds/M)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:SoilTemp\")} <br /> <span className = \"unit\">(&#8451;)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold ph-value\">\n                          {t(\"common:pH\")} <br /> <span className = \"unit\">(pH)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Moisture\")} <br /> <span className = \"unit\">(%)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold additional-value\">\n                          {\" \"}\n                          {t(\"common:Additional\")}\n                        </Grid.Column>\n                      </Grid.Row>\n                      {this.createTable()}\n                    </Grid>\n                  </Grid.Row>\n                ) : (\n                  \"\"\n                )}\n              </Grid.Column>\n              {sensor && (\n                <Grid.Column width={3}>\n                  <img\n                    src={depthSensor}\n                    alt=\"depthSensor\"\n                    className=\"depthSensorImg\"\n                  />\n                </Grid.Column>\n              )}\n            </Grid>\n          </Segment>\n          {/* </Container> */}\n        </Responsive>\n        {/* RESPONSIVENESS FOR TABLETS */}\n        <Responsive minWidth = {768} maxWidth = {1024}>\n          <Container>\n          <Segment\n            style={{ overflowX: \"scroll\", maxHeight: \"75vh\", marginTop: \"20px\"}}\n            className=\"table\"\n            \n          >\n            <Grid columns={2}>\n              <Grid.Column width={13}>\n                <Grid.Row className=\"my-4 mx-2\">\n                  <SensorUpper\n                    match={this.props.match}\n                    sensor={this.props.sensor}\n                    userDevices={this.props.devices.UserDevicesOptions}\n                    className=\"m-5\"\n                  />\n                </Grid.Row>\n                <Divider style={{ width: \"100vw\" }} className=\"p-0 m-0\" />\n                {sensor ? (\n                  <Grid.Row className=\"table m-4 ml-0 pl-0\">\n                    <Grid columns={8} rows={4} className = \"table-data\">\n                      <Grid.Row className=\"header-row\">\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Nitrogen\")} <br /> <span className = \"unit\">(mg/L)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Phosphorus\")} <br /> <span className = \"unit\">(mg/L)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Potassium\")} <br /> <span className = \"unit\">(mg/L)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Salinity\")} <br /> <span className = \"unit\">(ds/M)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:SoilTemp\")} <br /> <span className = \"unit\">(&#8451;)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold ph-value\">\n                          {t(\"common:pH\")} <br /> <span className = \"unit\">(pH)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold\">\n                          {t(\"common:Moisture\")} <br /> <span className = \"unit\">(%)</span>\n                        </Grid.Column>\n                        <Grid.Column className=\"bold additional-value\">\n                          {\" \"}\n                          {t(\"common:Additional\")}\n                        </Grid.Column>\n                      </Grid.Row>\n                      {this.createTable()}\n                    </Grid>\n                  </Grid.Row>\n                ) : (\n                  \"\"\n                )}\n              </Grid.Column>\n              {sensor && (\n                <Grid.Column width={3}>\n                  <img\n                    src={depthSensor}\n                    alt=\"depthSensor\"\n                    className=\"depthSensorImg\"\n                  />\n                </Grid.Column>\n              )}\n            </Grid>\n          </Segment>\n          </Container>\n        </Responsive>\n      </>\n    ) : (\n      <div style={{ textAlign: \"center\", margin: \"1rem 0\" }}>\n        <p className=\"p-0 m-2\">No sensors data found</p>\n        <Link className=\"p-0 m-0\" to=\"/addDevice\">\n          <MainButton style={{ textAlign: \"center\", width: \"15vw\" }}>\n            ADD A NEW DEVICE\n          </MainButton>\n        </Link>\n      </div>\n    );\n  }\n}\n\nconst SensorTableComponent = withTranslation()(SensorTable);\n\nexport default SensorTableComponent;\n"]},"metadata":{},"sourceType":"module"}