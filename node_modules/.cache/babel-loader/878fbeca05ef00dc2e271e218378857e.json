{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/Page/AddEditFarm/AddEditFarm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, GridRow, Button, Dropdown } from \"semantic-ui-react\";\nimport MapPolygon from \"../../MapPolygon/MapPolygon\";\nimport AutoComplete from \"../../PlacesAutocomplete/Autocomplete\";\nimport { fillSelect, calculateArea } from \"../../../utils/utilsFunctions\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./AddEditFarm.scss\";\nimport sgLogo from \"../../../images/LOGO.svg\";\nimport { updateUserFarmDevice } from \"../../../services/farm\";\nexport default function AddEditFarm(props) {\n  const {\n    t\n  } = useTranslation([\"add-edit-farm\", \"common\"]);\n  const farmId = props.farmId || \"\";\n  console.log({\n    farmId\n  });\n  const farmSelected = farmId ? props.userFarms.find(f => f._id === farmId) : undefined;\n\n  const defaultFarm = () => {\n    return farmSelected ? farmSelected : {\n      location: [],\n      soilTypeId: \"\",\n      terrainTypeId: \"\",\n      waterSourceId: \"\",\n      address: {\n        addressName: \"\",\n        location: []\n      }\n    };\n  };\n\n  const defaultMap = {\n    area: 0,\n    polygon: defaultFarm().location.length ? defaultFarm().location : [],\n    center: defaultFarm().address.location.length ? defaultFarm().address.location : []\n  };\n  const defaultAddress = {\n    addressName: defaultFarm().address.addressName,\n    location: defaultFarm().address.location\n  };\n  const [map, setMap] = useState(defaultMap);\n  const [address, setAddress] = useState(defaultAddress);\n  const [farm, setFarm] = useState(defaultFarm());\n  const [soilTypeId, setSoilTypeId] = useState(\"\");\n  const [terrainTypeId, setTerrainTypeId] = useState(\"\");\n  const [waterSourceId, setWaterSourceId] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n  const [userFarms, setUserFarms] = useState([]);\n  const [browserLoc, setBrowserLoc] = useState([]);\n\n  const setCenter = position => {\n    const centerNew = [position.coords.latitude, position.coords.longitude];\n    setBrowserLoc(centerNew);\n  };\n\n  const getBrowserLocation = () => {\n    if (!map.center.length && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(setCenter);\n    }\n  };\n\n  const setDefaults = () => {\n    let map = defaultMap;\n\n    if (defaultMap.polygon && defaultMap.polygon.length) {\n      map = { ...defaultMap,\n        area: calculateArea([defaultMap.polygon]) * 0.000247105\n      };\n    }\n\n    setMap(map);\n    setAddress(defaultAddress);\n    setFarm(defaultFarm());\n    setSoilTypeId(defaultFarm().soilTypeId);\n    setTerrainTypeId(defaultFarm().terrainTypeId);\n    setWaterSourceId(defaultFarm().waterSourceId);\n    setUserFarms(props.userFarms);\n  };\n\n  useEffect(() => {\n    document.title = t(props.title);\n    getBrowserLocation();\n\n    if (userFarms.length !== props.userFarms.length) {\n      setDefaults();\n    }\n  });\n\n  const onChange = polygon => {\n    const area = calculateArea(polygon && polygon.length ? [polygon] : []) * 0.000247105; // area in sq meters converting to acres\n\n    const mapNew = { ...map\n    };\n    mapNew.area = area;\n    mapNew.polygon = polygon;\n    setMap(mapNew);\n  };\n\n  const handleSave = async event => {\n    event.preventDefault();\n    const farmName = farm.farmName ? farm.farmName : \"Field\" + (props.userFarms.length + 1); // TODO add validation error messages\n\n    if (validateForm()) {\n      const {\n        addFarm,\n        editFarm\n      } = props;\n      setSaving(true);\n      const {\n        polygon\n      } = map;\n      farm.location = polygon;\n      farm.farmName = farmName;\n      farm.userId = props.userId;\n      farm.address = address;\n      farm.soilTypeId = soilTypeId;\n      farm.terrainTypeId = terrainTypeId;\n      farm.waterSourceId = waterSourceId;\n\n      try {\n        if (farm._id) {\n          await editFarm(farm, props.token);\n          updateUserFarmDevice(props.userId);\n\n          if (props.handleClose) {\n            props.handleClose();\n          }\n        } else {\n          await addFarm(farm, props.token);\n          updateUserFarmDevice(props.userId);\n\n          if (props.handleClose) {\n            props.handleClose();\n          }\n        }\n\n        props.history.push(\"/dashboard\");\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const validateForm = () => {\n    const {\n      polygon\n    } = map;\n    let polygonErr = false;\n    let mandatoryFieldsErr = false;\n    let addressErr = false;\n\n    if (!polygon || polygon.length < 4) {\n      polygonErr = true;\n    }\n\n    if (!soilTypeId || !terrainTypeId || !waterSourceId) {\n      mandatoryFieldsErr = true;\n    }\n\n    if (!address.addressName || !address.location.length) {\n      addressErr = true;\n    }\n\n    return !(polygonErr || mandatoryFieldsErr || addressErr);\n  };\n\n  const getMapCenter = () => {\n    let centerProp = address.location;\n\n    if (!centerProp.length) {\n      centerProp = map.center.length ? map.center : [];\n    }\n\n    if (!centerProp.length) {\n      centerProp = browserLoc.length ? browserLoc : [];\n    }\n\n    return !centerProp.length ? undefined : centerProp;\n  };\n\n  const polygon = farm.location && farm.location.length && JSON.stringify(farm.address.location) === JSON.stringify(address.location) ? farm.location : [];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"complelet-profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/\",\n    onClick: () => props.history.push(\"/\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"iclogo\",\n    src: sgLogo,\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"ml-3 pt-4 title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 19\n    }\n  }, \"sensegrass\"))), /*#__PURE__*/React.createElement(Grid, {\n    className: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    columns: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-4  mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 23\n    }\n  }, \"enter farm details\"), /*#__PURE__*/React.createElement(AutoComplete, {\n    placeChangeHandler: address => {\n      setAddress(address);\n    },\n    address: defaultFarm().address.addressName ? defaultFarm().address.addressName : address.addressName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-4  mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 23\n    }\n  }, \"selected farm area is\"), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"acres\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 23\n    }\n  }, Math.ceil(map.area * 100) / 100, \" acres\"), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mb-4\",\n    style: {\n      textTransform: \"lowercase\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 23\n    }\n  }, \" free up to 5 acres\")))), /*#__PURE__*/React.createElement(GridRow, {\n    columns: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, \"select soil type \"), /*#__PURE__*/React.createElement(Dropdown, {\n    className: \"mb-2 mt-2 select\",\n    placeholder: t(\"common:select\"),\n    options: fillSelect(\"soil\", props.soiltypes),\n    onChange: (e, data) => {\n      setSoilTypeId(data.value);\n    },\n    value: soilTypeId,\n    search: true,\n    selection: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 21\n    }\n  }, \"terrain type\"), /*#__PURE__*/React.createElement(Dropdown, {\n    className: \"mb-2 mt-2 select\",\n    placeholder: t(\"common:select\"),\n    options: fillSelect(\"terrain\", props.terraintypes),\n    onChange: (e, data) => {\n      setTerrainTypeId(data.value);\n    },\n    value: terrainTypeId,\n    search: true,\n    selection: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 23\n    }\n  }, \"water source\"), /*#__PURE__*/React.createElement(Dropdown, {\n    className: \"mb-2 mt-2 select\",\n    placeholder: t(\"common:select\"),\n    options: fillSelect(\"watersource\", props.watersources),\n    onChange: (e, data) => {\n      setWaterSourceId(data.value);\n    },\n    value: waterSourceId,\n    search: true,\n    selection: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    color: \"green\",\n    className: \"bttn mt-4\",\n    onClick: handleSave,\n    disabled: saving,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 21\n    }\n  }, t(\"common:save\"))))))), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 11,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MapPolygon, {\n    onChange: onChange,\n    editable: true,\n    center: getMapCenter(),\n    polygon: polygon,\n    zoom: address.location && address.location.length ? 20 : 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/Page/AddEditFarm/AddEditFarm.js"],"names":["React","useState","useEffect","Grid","GridRow","Button","Dropdown","MapPolygon","AutoComplete","fillSelect","calculateArea","useTranslation","updateUserFarmDevice","AddEditFarm","props","t","farmId","console","log","farmSelected","userFarms","find","f","_id","undefined","defaultFarm","location","soilTypeId","terrainTypeId","waterSourceId","address","addressName","defaultMap","area","polygon","length","center","defaultAddress","map","setMap","setAddress","farm","setFarm","setSoilTypeId","setTerrainTypeId","setWaterSourceId","saving","setSaving","setUserFarms","browserLoc","setBrowserLoc","setCenter","position","centerNew","coords","latitude","longitude","getBrowserLocation","navigator","geolocation","getCurrentPosition","setDefaults","document","title","onChange","mapNew","handleSave","event","preventDefault","farmName","validateForm","addFarm","editFarm","userId","token","handleClose","history","push","err","polygonErr","mandatoryFieldsErr","addressErr","getMapCenter","centerProp","JSON","stringify","sgLogo","Math","ceil","textTransform","soiltypes","e","data","value","terraintypes","watersources"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Grid, GridRow, Button, Dropdown } from \"semantic-ui-react\";\nimport MapPolygon from \"../../MapPolygon/MapPolygon\";\nimport AutoComplete from \"../../PlacesAutocomplete/Autocomplete\";\nimport { fillSelect, calculateArea } from \"../../../utils/utilsFunctions\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./AddEditFarm.scss\";\nimport sgLogo from \"../../../images/LOGO.svg\";\nimport { updateUserFarmDevice } from \"../../../services/farm\";\n\nexport default function AddEditFarm(props) {\n  const { t } = useTranslation([\"add-edit-farm\", \"common\"]);\n  const farmId = props.farmId || \"\";\n  console.log({ farmId });\n  const farmSelected = farmId\n    ? props.userFarms.find((f) => f._id === farmId)\n    : undefined;\n  const defaultFarm = () => {\n    return farmSelected\n      ? farmSelected\n      : {\n        location: [],\n        soilTypeId: \"\",\n        terrainTypeId: \"\",\n        waterSourceId: \"\",\n        address: {\n          addressName: \"\",\n          location: [],\n        },\n      };\n  };\n  const defaultMap = {\n    area: 0,\n    polygon: defaultFarm().location.length ? defaultFarm().location : [],\n    center: defaultFarm().address.location.length\n      ? defaultFarm().address.location\n      : [],\n  };\n  const defaultAddress = {\n    addressName: defaultFarm().address.addressName,\n    location: defaultFarm().address.location,\n  };\n  const [map, setMap] = useState(defaultMap);\n  const [address, setAddress] = useState(defaultAddress);\n  const [farm, setFarm] = useState(defaultFarm());\n\n  const [soilTypeId, setSoilTypeId] = useState(\"\");\n  const [terrainTypeId, setTerrainTypeId] = useState(\"\");\n  const [waterSourceId, setWaterSourceId] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n  const [userFarms, setUserFarms] = useState([]);\n  const [browserLoc, setBrowserLoc] = useState([]);\n\n  const setCenter = (position) => {\n    const centerNew = [position.coords.latitude, position.coords.longitude];\n    setBrowserLoc(centerNew);\n  };\n\n  const getBrowserLocation = () => {\n    if (!map.center.length && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(setCenter);\n    }\n  };\n  const setDefaults = () => {\n    let map = defaultMap;\n    if (defaultMap.polygon && defaultMap.polygon.length) {\n      map = {\n        ...defaultMap,\n        area: calculateArea([defaultMap.polygon]) * 0.000247105,\n      };\n    }\n    setMap(map);\n    setAddress(defaultAddress);\n    setFarm(defaultFarm());\n    setSoilTypeId(defaultFarm().soilTypeId);\n    setTerrainTypeId(defaultFarm().terrainTypeId);\n    setWaterSourceId(defaultFarm().waterSourceId);\n    setUserFarms(props.userFarms);\n  };\n\n  useEffect(() => {\n    document.title = t(props.title);\n    getBrowserLocation();\n    if (userFarms.length !== props.userFarms.length) {\n      setDefaults();\n    }\n  });\n\n  const onChange = (polygon) => {\n    const area =\n      calculateArea(polygon && polygon.length ? [polygon] : []) * 0.000247105; // area in sq meters converting to acres\n    const mapNew = { ...map };\n    mapNew.area = area;\n    mapNew.polygon = polygon;\n    setMap(mapNew);\n  };\n\n  const handleSave = async (event) => {\n    event.preventDefault();\n    const farmName = farm.farmName\n      ? farm.farmName\n      : \"Field\" + (props.userFarms.length + 1);\n    // TODO add validation error messages\n    if (validateForm()) {\n      const { addFarm, editFarm } = props;\n      setSaving(true);\n      const { polygon } = map;\n      farm.location = polygon;\n      farm.farmName = farmName;\n      farm.userId = props.userId;\n      farm.address = address;\n      farm.soilTypeId = soilTypeId;\n      farm.terrainTypeId = terrainTypeId;\n      farm.waterSourceId = waterSourceId;\n      try {\n        if (farm._id) {\n          await editFarm(farm, props.token);\n          updateUserFarmDevice(props.userId);\n          if (props.handleClose) {\n            props.handleClose();\n          }\n        } else {\n          await addFarm(farm, props.token);\n          updateUserFarmDevice(props.userId);\n          if (props.handleClose) {\n            props.handleClose();\n          }\n        }\n        props.history.push(\"/dashboard\");\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const validateForm = () => {\n    const { polygon } = map;\n    let polygonErr = false;\n    let mandatoryFieldsErr = false;\n    let addressErr = false;\n\n    if (!polygon || polygon.length < 4) {\n      polygonErr = true;\n    }\n    if (!soilTypeId || !terrainTypeId || !waterSourceId) {\n      mandatoryFieldsErr = true;\n    }\n    if (!address.addressName || !address.location.length) {\n      addressErr = true;\n    }\n    return !(polygonErr || mandatoryFieldsErr || addressErr);\n  };\n\n  const getMapCenter = () => {\n    let centerProp = address.location;\n    if (!centerProp.length) {\n      centerProp = map.center.length ? map.center : [];\n    }\n    if (!centerProp.length) {\n      centerProp = browserLoc.length ? browserLoc : [];\n    }\n    return !centerProp.length ? undefined : centerProp;\n  };\n\n  const polygon =\n    farm.location &&\n      farm.location.length &&\n      JSON.stringify(farm.address.location) === JSON.stringify(address.location)\n      ? farm.location\n      : [];\n  return (\n    <div className=\"complelet-profile\">\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={5}>\n            <div>\n              <div className=\"top\">\n                <div>\n                  <a href=\"/\" onClick={() => props.history.push(\"/\")}>\n                    <img className=\"iclogo\" src={sgLogo} alt=\"logo\" />\n                  </a>\n                </div>\n                <div>\n                  <h5 className=\"ml-3 pt-4 title\">sensegrass</h5>\n                </div>\n              </div>\n              <Grid className=\"body\">\n                <Grid.Row columns={1}>\n                  <Grid.Column>\n                    <div>\n                      <h6 className=\"mb-4  mt-4\">enter farm details</h6>\n                      <AutoComplete\n                        placeChangeHandler={(address) => {\n                          setAddress(address);\n                        }}\n                        address={\n                          defaultFarm().address.addressName\n                            ? defaultFarm().address.addressName\n                            : address.addressName\n                        }\n                      ></AutoComplete>\n                      <h6 className=\"mb-4  mt-4\">selected farm area is</h6>\n                      <h1 className=\"acres\">\n                        {Math.ceil(map.area * 100) / 100} acres\n                      </h1>\n                      <h6 className=\"mb-4\" style={{ textTransform: \"lowercase\" }}> free up to 5 acres</h6>\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n                <GridRow columns={2}>\n                  <Grid.Column>\n                    <h6>select soil type </h6>\n                    <Dropdown\n                      className=\"mb-2 mt-2 select\"\n                      placeholder={t(\"common:select\")}\n                      options={fillSelect(\"soil\", props.soiltypes)}\n                      onChange={(e, data) => {\n                        setSoilTypeId(data.value);\n                      }}\n                      value={soilTypeId}\n                      search\n                      selection\n                    />\n                  </Grid.Column>\n                  <Grid.Column>\n                    <h6>terrain type</h6>\n                    <Dropdown\n                      className=\"mb-2 mt-2 select\"\n                      placeholder={t(\"common:select\")}\n                      options={fillSelect(\"terrain\", props.terraintypes)}\n                      onChange={(e, data) => {\n                        setTerrainTypeId(data.value);\n                      }}\n                      value={terrainTypeId}\n                      search\n                      selection\n                    />\n                    <div>\n                      <h6 className=\"mt-2\">water source</h6>\n                      <Dropdown\n                        className=\"mb-2 mt-2 select\"\n                        placeholder={t(\"common:select\")}\n                        options={fillSelect(\"watersource\", props.watersources)}\n                        onChange={(e, data) => {\n                          setWaterSourceId(data.value);\n                        }}\n                        value={waterSourceId}\n                        search\n                        selection\n                      />\n                    </div>\n                    <Button\n                      color=\"green\"\n                      className=\"bttn mt-4\"\n                      onClick={handleSave}\n                      disabled={saving}\n                    >\n                      {t(\"common:save\")}\n                    </Button>\n                  </Grid.Column>\n                </GridRow>\n              </Grid>\n            </div>\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <MapPolygon\n              onChange={onChange}\n              editable={true}\n              center={getMapCenter()}\n              polygon={polygon}\n              zoom={address.location && address.location.length ? 20 : 16}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}