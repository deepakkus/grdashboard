{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/CropManagement/croplist.js\";\nimport React from 'react';\nimport { List, Segment, Grid, Dropdown } from 'semantic-ui-react';\nimport { useTranslation } from 'react-i18next';\n\nconst CropList = ({\n  cropList,\n  moveCrop,\n  source,\n  userFarms,\n  cropTypes\n}) => {\n  const {\n    t\n  } = useTranslation(\"crop-management\");\n\n  const onClicked = cropCycleId => {\n    moveCrop(source, cropCycleId);\n  };\n\n  console.log(cropList);\n  const list = cropList.length ? cropList.map(cropItem => {\n    let cropDate = new Date(cropItem.startDate);\n    return /*#__PURE__*/React.createElement(Segment, {\n      inverted: true,\n      color: \"green\",\n      key: cropItem._id,\n      className: \"crop-indv-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(List.Item, {\n      className: \"crop-indv-listttt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(List.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"mx-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      floated: \"left\",\n      width: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(List.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 37\n      }\n    }, cropDate.toLocaleString('en-us', {\n      month: 'short'\n    }) + \" \", cropDate.getFullYear() + \" \", userFarms.find(farm => cropItem.farmId === farm._id).farmName + \" \", cropItem.cropSeeds.map((cropSeed, index) => {\n      if (index === 0) {\n        return `${cropTypes.find(type => type._id === cropSeed.cropId).name}`;\n      } else {\n        return ` & ${cropTypes.find(type => type._id === cropSeed.cropId).name}`;\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"mx-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(List.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 41\n      }\n    }, `${t(source)} ${t(\"stage\")}: `, t(\"irrigation\")))), source === \"current\" ? /*#__PURE__*/React.createElement(Grid.Column, {\n      floated: \"right\",\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"ellipsis-dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Dropdown, {\n      icon: \"ellipsis vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Dropdown.Menu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Dropdown.Item, {\n      text: t('toPast'),\n      onClick: () => onClicked(cropItem._id),\n      style: {\n        zindex: '9'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 49\n      }\n    }))))) : /*#__PURE__*/React.createElement(Grid.Column, {\n      floated: \"right\",\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 34\n      }\n    }))))));\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, t('empty-list'));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cropList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      overflow: 'auto',\n      maxHeight: '100vh',\n      position: \"relative\",\n      top: \"-40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Segment.Group, {\n    horizontal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    inverted: true,\n    relaxed: true,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, list))));\n};\n\nexport default CropList;\n{\n  /* <Grid.Column floated=\"left\" width={14}>\n                                 <Grid.Row>\n                                     <List.Header>\n                                         {\n                                             cropDate.toLocaleString('en-us', { month: 'short' }) + \" \"\n                                         }\n                                          {\n                                             cropDate.getFullYear() + \" \"\n                                         }\n                                          {\n                                             userFarms.find(farm =>\n                                                 cropItem.farmId === farm._id\n                                             ).farmName + \" \"\n                                         }\n                                          {\n                                             cropItem.cropSeeds.map((cropSeed, index) => {\n                                                 if (index === 0) {\n                                                     return `${cropTypes.find(type => type._id === cropSeed.cropId).name}`\n                                                 }\n                                                 else {\n                                                     return ` & ${cropTypes.find(type => type._id === cropSeed.cropId).name}`\n                                                 }\n                                             })\n                                         }\n                                      </List.Header>\n                                 </Grid.Row>\n                                 <Grid.Row>\n                                     <List.Description>\n                                         {`${t(source)} ${t(\"stage\")}: `}\n                                         {t(\"irrigation\")}\n                                     </List.Description>\n                                 </Grid.Row>\n                             </Grid.Column> */\n}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/CropManagement/croplist.js"],"names":["React","List","Segment","Grid","Dropdown","useTranslation","CropList","cropList","moveCrop","source","userFarms","cropTypes","t","onClicked","cropCycleId","console","log","list","length","map","cropItem","cropDate","Date","startDate","_id","toLocaleString","month","getFullYear","find","farm","farmId","farmName","cropSeeds","cropSeed","index","type","cropId","name","zindex","overflow","maxHeight","position","top","width"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { List, Segment, Grid, Dropdown } from 'semantic-ui-react'\nimport { useTranslation } from 'react-i18next';\n\nconst CropList = ({ cropList, moveCrop, source, userFarms, cropTypes }) => {\n    const { t } = useTranslation(\"crop-management\")\n    const onClicked = (cropCycleId) => {\n        moveCrop(source, cropCycleId)\n    }\n    console.log(cropList)\n\n    const list = cropList.length ? (cropList.map(cropItem => {\n        let cropDate = new Date(cropItem.startDate)\n        return (\n            <Segment inverted color='green' key={cropItem._id} className = \"crop-indv-list\">\n                <List.Item className = \"crop-indv-listttt\">\n                    <List.Content>\n                        <Grid columns={2}>\n                            {/* <Grid.Column width={1}>\n                            </Grid.Column> */}\n                            <Grid.Row className = \"mx-0\">\n                                <Grid.Column floated = \"left\" width = {14}>\n                                    <List.Header>\n                                        {\n                                            cropDate.toLocaleString('en-us', { month: 'short' }) + \" \"\n                                        }\n\n                                        {\n                                            cropDate.getFullYear() + \" \"\n                                        }\n\n                                        {\n                                            userFarms.find(farm =>\n                                                cropItem.farmId === farm._id\n                                            ).farmName + \" \"\n                                        }\n\n                                        {\n                                            cropItem.cropSeeds.map((cropSeed, index) => {\n                                                if (index === 0) {\n                                                    return `${cropTypes.find(type => type._id === cropSeed.cropId).name}`\n                                                }\n                                                else {\n                                                    return ` & ${cropTypes.find(type => type._id === cropSeed.cropId).name}`\n                                                }\n                                            })\n                                        }\n\n                                    </List.Header>\n                                    <Grid.Row className = \"mx-0\">\n                                        <List.Description>\n                                            {`${t(source)} ${t(\"stage\")}: `}\n                                            {t(\"irrigation\")}\n                                        </List.Description>\n                                    </Grid.Row>\n                                </Grid.Column>\n                                {source === \"current\" ? (\n                                <Grid.Column floated=\"right\" width={2}>\n                                    <Grid.Row className = \"ellipsis-dropdown\">\n                                        <Dropdown icon=\"ellipsis vertical\">\n                                            <Dropdown.Menu >\n                                                <Dropdown.Item text={t('toPast')} onClick={() => onClicked(cropItem._id)}  style={{ zindex: '9' }} />\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </Grid.Row>\n                                </Grid.Column>\n                            ) : (<Grid.Column floated=\"right\" width={2} />)}\n                            </Grid.Row>\n                        </Grid>\n                    </List.Content>\n                </List.Item>\n            </Segment>\n\n        )\n    }\n    )) : (<p>\n        {t('empty-list')}\n    </p>);\n    return (\n        <div className=\"cropList\">\n            <div style={{ overflow: 'auto', maxHeight: '100vh', position: \"relative\", top: \"-40px\" }}>\n                <Segment.Group horizontal>\n                    <List inverted relaxed style={{ width: '100%' }}>\n                        {list}\n                    </List>\n                </Segment.Group>\n            </div>\n        </div>\n    );\n}\nexport default CropList;\n\n\n\n{/* <Grid.Column floated=\"left\" width={14}>\n                                <Grid.Row>\n                                    <List.Header>\n                                        {\n                                            cropDate.toLocaleString('en-us', { month: 'short' }) + \" \"\n                                        }\n\n                                        {\n                                            cropDate.getFullYear() + \" \"\n                                        }\n\n                                        {\n                                            userFarms.find(farm =>\n                                                cropItem.farmId === farm._id\n                                            ).farmName + \" \"\n                                        }\n\n                                        {\n                                            cropItem.cropSeeds.map((cropSeed, index) => {\n                                                if (index === 0) {\n                                                    return `${cropTypes.find(type => type._id === cropSeed.cropId).name}`\n                                                }\n                                                else {\n                                                    return ` & ${cropTypes.find(type => type._id === cropSeed.cropId).name}`\n                                                }\n                                            })\n                                        }\n\n                                    </List.Header>\n                                </Grid.Row>\n                                <Grid.Row>\n                                    <List.Description>\n                                        {`${t(source)} ${t(\"stage\")}: `}\n                                        {t(\"irrigation\")}\n                                    </List.Description>\n                                </Grid.Row>\n                            </Grid.Column> */}"]},"metadata":{},"sourceType":"module"}