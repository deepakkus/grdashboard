{"ast":null,"code":"import _regeneratorRuntime from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{Grid,GridRow,Button,Dropdown}from\"semantic-ui-react\";import MapPolygon from\"../../MapPolygon/MapPolygon\";import AutoComplete from\"../../PlacesAutocomplete/Autocomplete\";import{fillSelect,calculateArea}from\"../../../utils/utilsFunctions\";import{useTranslation}from\"react-i18next\";import\"./AddEditFarmModal.scss\";import sgLogo from\"../../../images/LOGO.svg\";import{updateUserFarmDevice}from\"../../../services/farm\";export default function AddEditFarm(props){var _useTranslation=useTranslation([\"add-edit-farm\",\"common\"]),t=_useTranslation.t;var farmId=props.farmId||\"\";console.log({farmId:farmId});var farmSelected=farmId?props.userFarms.find(function(f){return f._id===farmId;}):undefined;var defaultFarm=function defaultFarm(){return farmSelected?farmSelected:{location:[],soilTypeId:\"\",terrainTypeId:\"\",waterSourceId:\"\",address:{addressName:\"\",location:[]}};};var defaultMap={area:0,polygon:defaultFarm().location.length?defaultFarm().location:[],center:defaultFarm().address.location.length?defaultFarm().address.location:[]};var defaultAddress={addressName:defaultFarm().address.addressName,location:defaultFarm().address.location};var _useState=useState(defaultMap),_useState2=_slicedToArray(_useState,2),map=_useState2[0],setMap=_useState2[1];var _useState3=useState(defaultAddress),_useState4=_slicedToArray(_useState3,2),address=_useState4[0],setAddress=_useState4[1];var _useState5=useState(defaultFarm()),_useState6=_slicedToArray(_useState5,2),farm=_useState6[0],setFarm=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),soilTypeId=_useState8[0],setSoilTypeId=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),terrainTypeId=_useState10[0],setTerrainTypeId=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),waterSourceId=_useState12[0],setWaterSourceId=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),saving=_useState14[0],setSaving=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),userFarms=_useState16[0],setUserFarms=_useState16[1];var _useState17=useState([]),_useState18=_slicedToArray(_useState17,2),browserLoc=_useState18[0],setBrowserLoc=_useState18[1];var setCenter=function setCenter(position){var centerNew=[position.coords.latitude,position.coords.longitude];setBrowserLoc(centerNew);};var getBrowserLocation=function getBrowserLocation(){if(!map.center.length&&navigator.geolocation){navigator.geolocation.getCurrentPosition(setCenter);}};var setDefaults=function setDefaults(){var map=defaultMap;if(defaultMap.polygon&&defaultMap.polygon.length){map=_objectSpread(_objectSpread({},defaultMap),{},{area:calculateArea([defaultMap.polygon])*0.000247105});}setMap(map);setAddress(defaultAddress);setFarm(defaultFarm());setSoilTypeId(defaultFarm().soilTypeId);setTerrainTypeId(defaultFarm().terrainTypeId);setWaterSourceId(defaultFarm().waterSourceId);setUserFarms(props.userFarms);};useEffect(function(){document.title=t(props.title);getBrowserLocation();if(userFarms.length!==props.userFarms.length){setDefaults();}});var onChange=function onChange(polygon){var area=calculateArea(polygon&&polygon.length?[polygon]:[])*0.000247105;// area in sq meters converting to acres\nvar mapNew=_objectSpread({},map);mapNew.area=area;mapNew.polygon=polygon;setMap(mapNew);};var handleSave=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var farmName,addFarm,editFarm,_polygon;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();farmName=farm.farmName?farm.farmName:\"Field\"+(props.userFarms.length+1);// TODO add validation error messages\nif(!validateForm()){_context.next=31;break;}addFarm=props.addFarm,editFarm=props.editFarm;setSaving(true);_polygon=map.polygon;farm.location=_polygon;farm.farmName=farmName;farm.userId=props.userId;farm.address=address;farm.soilTypeId=soilTypeId;farm.terrainTypeId=terrainTypeId;farm.waterSourceId=waterSourceId;_context.prev=13;if(!farm._id){_context.next=21;break;}_context.next=17;return editFarm(farm,props.token);case 17:updateUserFarmDevice(props.userId);if(props.handleClose){props.handleClose();}_context.next=25;break;case 21:_context.next=23;return addFarm(farm,props.token);case 23:updateUserFarmDevice(props.userId);if(props.handleClose){props.handleClose();}case 25:props.history.push(\"/dashboard\");_context.next=31;break;case 28:_context.prev=28;_context.t0=_context[\"catch\"](13);console.log(_context.t0);case 31:case\"end\":return _context.stop();}}},_callee,null,[[13,28]]);}));return function handleSave(_x){return _ref.apply(this,arguments);};}();var validateForm=function validateForm(){var polygon=map.polygon;var polygonErr=false;var mandatoryFieldsErr=false;var addressErr=false;if(!polygon||polygon.length<4){polygonErr=true;}if(!soilTypeId||!terrainTypeId||!waterSourceId){mandatoryFieldsErr=true;}if(!address.addressName||!address.location.length){addressErr=true;}return!(polygonErr||mandatoryFieldsErr||addressErr);};var getMapCenter=function getMapCenter(){var centerProp=address.location;if(!centerProp.length){centerProp=map.center.length?map.center:[];}if(!centerProp.length){centerProp=browserLoc.length?browserLoc:[];}return!centerProp.length?undefined:centerProp;};var polygon=farm.location&&farm.location.length&&JSON.stringify(farm.address.location)===JSON.stringify(address.location)?farm.location:[];return/*#__PURE__*/React.createElement(\"div\",{className:\"complelet-profile\"},/*#__PURE__*/React.createElement(Grid,null,/*#__PURE__*/React.createElement(Grid.Row,null,/*#__PURE__*/React.createElement(Grid.Column,{width:6},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"top\"},/*#__PURE__*/React.createElement(\"a\",{href:\"/\",onClick:function onClick(){return props.history.push(\"/\");}},/*#__PURE__*/React.createElement(\"img\",{className:\"iclogo\",src:sgLogo,alt:\"logo\"})),/*#__PURE__*/React.createElement(\"h5\",{className:\"ml-3 pt-2\"},\"sensegrass\")),/*#__PURE__*/React.createElement(Grid,{className:\"body\"},/*#__PURE__*/React.createElement(Grid.Row,{columns:1},/*#__PURE__*/React.createElement(Grid.Column,null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h6\",{className:\"mb-4  mt-4\"},\"enter farm details\"),/*#__PURE__*/React.createElement(AutoComplete,{placeChangeHandler:function placeChangeHandler(address){setAddress(address);},address:defaultFarm().address.addressName?defaultFarm().address.addressName:address.addressName}),/*#__PURE__*/React.createElement(\"h6\",{className:\"mb-4  mt-4\"},\"selected farm area is\"),/*#__PURE__*/React.createElement(\"h1\",{className:\"green\"},Math.ceil(map.area*100)/100,\" acres\"),/*#__PURE__*/React.createElement(\"h6\",{className:\"mb-4\"},\" free up to 5 acres\")))),/*#__PURE__*/React.createElement(GridRow,{columns:2},/*#__PURE__*/React.createElement(Grid.Column,null,/*#__PURE__*/React.createElement(\"h6\",null,\"select soil type \"),/*#__PURE__*/React.createElement(Dropdown,{className:\"mb-2 mt-2 select\",placeholder:t(\"common:select\"),options:fillSelect(\"soil\",props.soiltypes),onChange:function onChange(e,data){setSoilTypeId(data.value);},value:soilTypeId,search:true,selection:true})),/*#__PURE__*/React.createElement(Grid.Column,null,/*#__PURE__*/React.createElement(\"h6\",null,\"terrain type\"),/*#__PURE__*/React.createElement(Dropdown,{className:\"mb-2 mt-2 select\",placeholder:t(\"common:select\"),options:fillSelect(\"terrain\",props.terraintypes),onChange:function onChange(e,data){setTerrainTypeId(data.value);},value:terrainTypeId,search:true,selection:true}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h6\",{className:\"mt-2\"},\"water source\"),/*#__PURE__*/React.createElement(Dropdown,{className:\"mb-2 mt-2 select\",placeholder:t(\"common:select\"),options:fillSelect(\"watersource\",props.watersources),onChange:function onChange(e,data){setWaterSourceId(data.value);},value:waterSourceId,search:true,selection:true})),/*#__PURE__*/React.createElement(Button,{color:\"green\",className:\"bttn mt-4\",onClick:handleSave,disabled:saving},t(\"common:save\"))))))),/*#__PURE__*/React.createElement(Grid.Column,{width:10},/*#__PURE__*/React.createElement(MapPolygon,{onChange:onChange,editable:true,center:getMapCenter(),polygon:polygon,zoom:address.location&&address.location.length?20:16})))));}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/Page/AddEditFarmModal/AddEditFarmModal.js"],"names":["React","useState","useEffect","Grid","GridRow","Button","Dropdown","MapPolygon","AutoComplete","fillSelect","calculateArea","useTranslation","updateUserFarmDevice","AddEditFarm","props","t","farmId","console","log","farmSelected","userFarms","find","f","_id","undefined","defaultFarm","location","soilTypeId","terrainTypeId","waterSourceId","address","addressName","defaultMap","area","polygon","length","center","defaultAddress","map","setMap","setAddress","farm","setFarm","setSoilTypeId","setTerrainTypeId","setWaterSourceId","saving","setSaving","setUserFarms","browserLoc","setBrowserLoc","setCenter","position","centerNew","coords","latitude","longitude","getBrowserLocation","navigator","geolocation","getCurrentPosition","setDefaults","document","title","onChange","mapNew","handleSave","event","preventDefault","farmName","validateForm","addFarm","editFarm","userId","token","handleClose","history","push","polygonErr","mandatoryFieldsErr","addressErr","getMapCenter","centerProp","JSON","stringify","sgLogo","Math","ceil","soiltypes","e","data","value","terraintypes","watersources"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Grid, GridRow, Button, Dropdown } from \"semantic-ui-react\";\nimport MapPolygon from \"../../MapPolygon/MapPolygon\";\nimport AutoComplete from \"../../PlacesAutocomplete/Autocomplete\";\nimport { fillSelect, calculateArea } from \"../../../utils/utilsFunctions\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./AddEditFarmModal.scss\";\nimport sgLogo from \"../../../images/LOGO.svg\";\nimport { updateUserFarmDevice } from \"../../../services/farm\";\n\nexport default function AddEditFarm(props) {\n    const { t } = useTranslation([\"add-edit-farm\", \"common\"]);\n    const farmId = props.farmId || \"\";\n    console.log({ farmId });\n    const farmSelected = farmId\n        ? props.userFarms.find((f) => f._id === farmId)\n        : undefined;\n    const defaultFarm = () => {\n        return farmSelected\n            ? farmSelected\n            : {\n                location: [],\n                soilTypeId: \"\",\n                terrainTypeId: \"\",\n                waterSourceId: \"\",\n                address: {\n                    addressName: \"\",\n                    location: [],\n                },\n            };\n    };\n    const defaultMap = {\n        area: 0,\n        polygon: defaultFarm().location.length ? defaultFarm().location : [],\n        center: defaultFarm().address.location.length\n            ? defaultFarm().address.location\n            : [],\n    };\n    const defaultAddress = {\n        addressName: defaultFarm().address.addressName,\n        location: defaultFarm().address.location,\n    };\n    const [map, setMap] = useState(defaultMap);\n    const [address, setAddress] = useState(defaultAddress);\n    const [farm, setFarm] = useState(defaultFarm());\n\n    const [soilTypeId, setSoilTypeId] = useState(\"\");\n    const [terrainTypeId, setTerrainTypeId] = useState(\"\");\n    const [waterSourceId, setWaterSourceId] = useState(\"\");\n    const [saving, setSaving] = useState(false);\n    const [userFarms, setUserFarms] = useState([]);\n    const [browserLoc, setBrowserLoc] = useState([]);\n\n    const setCenter = (position) => {\n        const centerNew = [position.coords.latitude, position.coords.longitude];\n        setBrowserLoc(centerNew);\n    };\n\n    const getBrowserLocation = () => {\n        if (!map.center.length && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(setCenter);\n        }\n    };\n    const setDefaults = () => {\n        let map = defaultMap;\n        if (defaultMap.polygon && defaultMap.polygon.length) {\n            map = {\n                ...defaultMap,\n                area: calculateArea([defaultMap.polygon]) * 0.000247105,\n            };\n        }\n        setMap(map);\n        setAddress(defaultAddress);\n        setFarm(defaultFarm());\n        setSoilTypeId(defaultFarm().soilTypeId);\n        setTerrainTypeId(defaultFarm().terrainTypeId);\n        setWaterSourceId(defaultFarm().waterSourceId);\n        setUserFarms(props.userFarms);\n    };\n\n    useEffect(() => {\n        document.title = t(props.title);\n        getBrowserLocation();\n        if (userFarms.length !== props.userFarms.length) {\n            setDefaults();\n        }\n    });\n\n    const onChange = (polygon) => {\n        const area =\n            calculateArea(polygon && polygon.length ? [polygon] : []) * 0.000247105; // area in sq meters converting to acres\n        const mapNew = { ...map };\n        mapNew.area = area;\n        mapNew.polygon = polygon;\n        setMap(mapNew);\n    };\n\n    const handleSave = async (event) => {\n        event.preventDefault();\n        const farmName = farm.farmName\n            ? farm.farmName\n            : \"Field\" + (props.userFarms.length + 1);\n        // TODO add validation error messages\n        if (validateForm()) {\n            const { addFarm, editFarm } = props;\n            setSaving(true);\n            const { polygon } = map;\n            farm.location = polygon;\n            farm.farmName = farmName;\n            farm.userId = props.userId;\n            farm.address = address;\n            farm.soilTypeId = soilTypeId;\n            farm.terrainTypeId = terrainTypeId;\n            farm.waterSourceId = waterSourceId;\n            try {\n                if (farm._id) {\n                    await editFarm(farm, props.token);\n                    updateUserFarmDevice(props.userId);\n                    if (props.handleClose) {\n                        props.handleClose();\n                    }\n                } else {\n                    await addFarm(farm, props.token);\n                    updateUserFarmDevice(props.userId);\n                    if (props.handleClose) {\n                        props.handleClose();\n                    }\n                }\n                props.history.push(\"/dashboard\");\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    };\n\n    const validateForm = () => {\n        const { polygon } = map;\n        let polygonErr = false;\n        let mandatoryFieldsErr = false;\n        let addressErr = false;\n\n        if (!polygon || polygon.length < 4) {\n            polygonErr = true;\n        }\n        if (!soilTypeId || !terrainTypeId || !waterSourceId) {\n            mandatoryFieldsErr = true;\n        }\n        if (!address.addressName || !address.location.length) {\n            addressErr = true;\n        }\n        return !(polygonErr || mandatoryFieldsErr || addressErr);\n    };\n\n    const getMapCenter = () => {\n        let centerProp = address.location;\n        if (!centerProp.length) {\n            centerProp = map.center.length ? map.center : [];\n        }\n        if (!centerProp.length) {\n            centerProp = browserLoc.length ? browserLoc : [];\n        }\n        return !centerProp.length ? undefined : centerProp;\n    };\n\n    const polygon =\n        farm.location &&\n            farm.location.length &&\n            JSON.stringify(farm.address.location) === JSON.stringify(address.location)\n            ? farm.location\n            : [];\n    return (\n        <div className=\"complelet-profile\">\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={6}>\n                        <div>\n                            <div className=\"top\">\n                                <a href=\"/\" onClick={() => props.history.push(\"/\")}>\n                                    <img className=\"iclogo\" src={sgLogo} alt=\"logo\" />\n                                </a>\n                                <h5 className=\"ml-3 pt-2\">sensegrass</h5>\n                            </div>\n                            <Grid className=\"body\">\n                                <Grid.Row columns={1}>\n                                    <Grid.Column>\n                                        <div>\n                                            <h6 className=\"mb-4  mt-4\">enter farm details</h6>\n                                            <AutoComplete\n                                                placeChangeHandler={(address) => {\n                                                    setAddress(address);\n                                                }}\n                                                address={\n                                                    defaultFarm().address.addressName\n                                                        ? defaultFarm().address.addressName\n                                                        : address.addressName\n                                                }\n                                            ></AutoComplete>\n                                            <h6 className=\"mb-4  mt-4\">selected farm area is</h6>\n                                            <h1 className=\"green\">\n                                                {Math.ceil(map.area * 100) / 100} acres\n                      </h1>\n                                            <h6 className=\"mb-4\"> free up to 5 acres</h6>\n                                        </div>\n                                    </Grid.Column>\n                                </Grid.Row>\n                                <GridRow columns={2}>\n                                    <Grid.Column>\n                                        <h6>select soil type </h6>\n                                        <Dropdown\n                                            className=\"mb-2 mt-2 select\"\n                                            placeholder={t(\"common:select\")}\n                                            options={fillSelect(\"soil\", props.soiltypes)}\n                                            onChange={(e, data) => {\n                                                setSoilTypeId(data.value);\n                                            }}\n                                            value={soilTypeId}\n                                            search\n                                            selection\n                                        />\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <h6>terrain type</h6>\n                                        <Dropdown\n                                            className=\"mb-2 mt-2 select\"\n                                            placeholder={t(\"common:select\")}\n                                            options={fillSelect(\"terrain\", props.terraintypes)}\n                                            onChange={(e, data) => {\n                                                setTerrainTypeId(data.value);\n                                            }}\n                                            value={terrainTypeId}\n                                            search\n                                            selection\n                                        />\n                                        <div>\n                                            <h6 className=\"mt-2\">water source</h6>\n                                            <Dropdown\n                                                className=\"mb-2 mt-2 select\"\n                                                placeholder={t(\"common:select\")}\n                                                options={fillSelect(\"watersource\", props.watersources)}\n                                                onChange={(e, data) => {\n                                                    setWaterSourceId(data.value);\n                                                }}\n                                                value={waterSourceId}\n                                                search\n                                                selection\n                                            />\n                                        </div>\n                                        <Button\n                                            color=\"green\"\n                                            className=\"bttn mt-4\"\n                                            onClick={handleSave}\n                                            disabled={saving}\n                                        >\n                                            {t(\"common:save\")}\n                                        </Button>\n                                    </Grid.Column>\n                                </GridRow>\n                            </Grid>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <MapPolygon\n                            onChange={onChange}\n                            editable={true}\n                            center={getMapCenter()}\n                            polygon={polygon}\n                            zoom={address.location && address.location.length ? 20 : 16}\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}