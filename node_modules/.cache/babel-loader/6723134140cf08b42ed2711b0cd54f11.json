{"ast":null,"code":"const turf = require(\"@turf/turf\");\n\nconst axios = require(\"axios\");\n\nexport const fillSelect = (optionsType, optionsData) => {\n  if (optionsType && optionsData && optionsData.length) {\n    const options = [];\n\n    for (const index in optionsData) {\n      const selectOption = {\n        key: optionsData[index]._id,\n        value: optionsData[index]._id,\n        text: optionsData[index].name\n      };\n      options.push(selectOption);\n    }\n\n    return options;\n  } else {\n    return [{\n      key: 0,\n      value: \"No Options\",\n      text: \"No Options\"\n    }];\n  }\n};\nexport const calculateArea = polygonLatLng => {\n  // eg: polygon is of format : [[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]\n  const polygon = turf.polygon(polygonLatLng);\n  return turf.area(polygon);\n};\nexport const isNotValidNumber = number => {\n  if (number === null || number === \"\" || isNaN(parseFloat(number))) {\n    return true;\n  }\n\n  return false;\n};\n\nconst getUrlVars = () => {\n  const vars = {};\n  const parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {\n    vars[key] = value;\n  });\n  return vars;\n};\n\nexport const getUrlParam = (parameter, defaultvalue) => {\n  let urlparameter = defaultvalue || \"\";\n\n  if (window.location.href.indexOf(parameter) > -1) {\n    urlparameter = getUrlVars()[parameter];\n  }\n\n  return urlparameter;\n};\nexport const isInsideFarm = (farmLoc, deviceLoc) => {\n  const pt = turf.point(deviceLoc);\n  const poly = turf.polygon([farmLoc]);\n  return turf.booleanPointInPolygon(pt, poly);\n};\nexport const getPlantName = async (userFarms, markerLoc, cropTypes) => {\n  const farm = userFarms.find(farm => isInsideFarm(farm.location, markerLoc));\n\n  if (farm) {\n    const farmId = farm._id;\n    const cropCyles = await axios.get(`${process.env.REACT_APP_API_URL}/cropcycle/${farmId}`);\n    const data = cropCyles.data;\n\n    if (data[0] && data[0].cropSeeds && data[0].cropSeeds[0]) {\n      const cropId = cropCyles.data[0].cropSeeds[0].cropId;\n      const cropType = cropTypes.filter(cropType => cropType._id === cropId);\n      const scientificPlantName = cropType[0].scientificName;\n      return scientificPlantName;\n    } else {\n      return 'generic';\n    }\n  }\n\n  return \"\";\n};","map":{"version":3,"sources":["/Users/deepakkumarsingh/Downloads/banao_lg/sensegrass/src/utils/utilsFunctions.js"],"names":["turf","require","axios","fillSelect","optionsType","optionsData","length","options","index","selectOption","key","_id","value","text","name","push","calculateArea","polygonLatLng","polygon","area","isNotValidNumber","number","isNaN","parseFloat","getUrlVars","vars","parts","window","location","href","replace","m","getUrlParam","parameter","defaultvalue","urlparameter","indexOf","isInsideFarm","farmLoc","deviceLoc","pt","point","poly","booleanPointInPolygon","getPlantName","userFarms","markerLoc","cropTypes","farm","find","farmId","cropCyles","get","process","env","REACT_APP_API_URL","data","cropSeeds","cropId","cropType","filter","scientificPlantName","scientificName"],"mappings":"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","sourcesContent":["const turf = require(\"@turf/turf\");\nconst axios = require(\"axios\");\n\nexport const fillSelect = (optionsType, optionsData) => {\n  if (optionsType && optionsData && optionsData.length) {\n    const options = [];\n    for (const index in optionsData) {\n      const selectOption = {\n        key: optionsData[index]._id,\n        value: optionsData[index]._id,\n        text: optionsData[index].name,\n      };\n      options.push(selectOption);\n    }\n    return options;\n  } else {\n    return [{ key: 0, value: \"No Options\", text: \"No Options\" }];\n  }\n};\n\nexport const calculateArea = (polygonLatLng) => {\n  // eg: polygon is of format : [[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]\n  const polygon = turf.polygon(polygonLatLng);\n  return turf.area(polygon);\n};\n\nexport const isNotValidNumber = (number) => {\n  if (number === null || number === \"\" || isNaN(parseFloat(number))) {\n    return true;\n  }\n  return false;\n};\n\nconst getUrlVars = () => {\n  const vars = {};\n  const parts = window.location.href.replace(\n    /[?&]+([^=&]+)=([^&]*)/gi,\n    function (m, key, value) {\n      vars[key] = value;\n    }\n  );\n  return vars;\n};\n\nexport const getUrlParam = (parameter, defaultvalue) => {\n  let urlparameter = defaultvalue || \"\";\n  if (window.location.href.indexOf(parameter) > -1) {\n    urlparameter = getUrlVars()[parameter];\n  }\n  return urlparameter;\n};\n\nexport const isInsideFarm = (farmLoc, deviceLoc) => {\n  const pt = turf.point(deviceLoc);\n  const poly = turf.polygon([farmLoc]);\n  return turf.booleanPointInPolygon(pt, poly);\n};\n\nexport const getPlantName = async (userFarms, markerLoc, cropTypes) => {  \n  const farm = userFarms.find((farm) => isInsideFarm(farm.location, markerLoc));\n  if (farm) {    \n    const farmId = farm._id;    \n    const cropCyles = await axios.get(\n      `${process.env.REACT_APP_API_URL}/cropcycle/${farmId}`      \n    );\n    const data = cropCyles.data;\n    if (data[0] && data[0].cropSeeds && data[0].cropSeeds[0]) {\n      const cropId = cropCyles.data[0].cropSeeds[0].cropId;    \n      const cropType = cropTypes.filter((cropType) => cropType._id === cropId);\n      const scientificPlantName = cropType[0].scientificName;    \n      return scientificPlantName;\n    } else {\n      return 'generic';\n    }    \n  }\n  return \"\";\n};"]},"metadata":{},"sourceType":"module"}