{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/GisAnalysis/GisAnalysis.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, Menu, Container, Segment, Button, Dropdown, Form } from 'semantic-ui-react'; // import { } from 'semantic-ui-react';\n\nimport './GisAnalysis.scss';\nimport MapPolygon from '../MapPolygon/MapPolygon';\nimport { useTranslation } from \"react-i18next\";\nimport HeatMap from '../HeatMap/HeatMap';\nimport GeneralAnalyzer from './GisGeneralAnalyzer'; // import { setRTLTextPlugin } from 'mapbox-gl';\n\nconst GisAnalysis = props => {\n  const [activeItem, setActiveItem] = useState('Recent Map');\n  const {\n    t\n  } = useTranslation();\n  const [indices, setIndices] = useState('');\n  const [field, setField] = useState('');\n  const [fieldId, setFieldId] = useState('');\n  const [date, setDate] = useState('');\n  const [heatmap, setHeatmap] = useState(false);\n  const [datt, setDatt] = useState([]);\n  const [latlon, setLatLon] = useState([]); // const [imageId, setImageId] = useState('');\n\n  const [imageLink, setImageLink] = useState('');\n  const [image, setImage] = useState('');\n  let polygon = [[48.8566, 2.3522]]; //=  props.userFarms.location\n\n  let center = [48.8566, 2.3522]; //=  props.userFarms.address.location\n\n  let fieldOptions = [];\n  let selectedField = '';\n  let currentFieldId = '';\n\n  const fillData = (newData = props.userFarms) => {\n    newData.forEach(element => {\n      fieldOptions.push({\n        text: element.farmName,\n        id: element._id,\n        value: element.farmName,\n        polygon: element.location,\n        center: element.address.location\n      });\n    });\n    selectedField = newData[0].farmName;\n    polygon = newData[0].location;\n    center = newData[0].address.location;\n    currentFieldId = newData[0]._id;\n  };\n\n  var indicesOptions = [{\n    key: 'NDVI',\n    text: 'NDVI',\n    value: 'NDVI'\n  }];\n\n  const handleItemClick = (e, {\n    name\n  }) => {\n    setActiveItem(name); // setHeatmap(!heatmap)\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault(); // setHeatmap(true);\n  };\n\n  let datee = [];\n  let aoi = [];\n\n  const getHeatData = async () => {\n    let fId = '';\n    fieldId ? fId = fieldId : fId = currentFieldId;\n    fieldOptions.forEach(element => {\n      if (element.id === fId) {\n        element.polygon.forEach(ele => {\n          aoi.push([ele[1], ele[0]]);\n        });\n      }\n    }); // const re = [];\n    // re =  getHeatData(aoi);\n    // //console.log(\"--%%--re--\",re);\n    // datee = aoi.map((element) => \n    //         ({\n    //             key: element.image,\n    //             value: element.image,\n    //             text: element.date.split('T')[0]\n    //         })\n    // );\n    // setDatt(datee);\n    // console.log(datee);\n    // console.log(\"---))))))----handleHeatMap----(((((((----\");\n  };\n  /* HeatMap Function */\n\n\n  const handleHeatMap = event => {\n    event.preventDefault();\n\n    if (indices === '') {\n      return;\n    } // if(date === ''){\n    //     return;\n    // }\n\n\n    let fId = '';\n    fieldId ? fId = fieldId : fId = currentFieldId;\n    let res = props.getLinkForImage(image, indices, fId); // console.log(\"response--> \", res);\n\n    setImageLink(res);\n    setHeatmap(!heatmap);\n  };\n\n  useEffect(() => {\n    document.title = t(props.title);\n  }, [props.title]);\n  useEffect(() => {\n    //---- For Rerendering the component with new value\n    //----- This get heat data only called when changing the fields\n    getHeatData(); //console.log(\"latlon----> \",latlon);\n\n    if (latlon.length > 0) {\n      //console.log(\"getget---->> \",latlon[0][0],latlon[0][1]);\n      props.getWeatherData(latlon[0][0], latlon[0][1]);\n    }\n  }, [field]);\n  useEffect(() => {\n    //----- Rendering only on heatmap\n    getHeatData();\n  }, [heatmap]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, activeItem == \"Recent Map\" ? /*#__PURE__*/React.createElement(Grid, {\n    columns: 1,\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  }, props.userFarms.length > 0 ? fillData(props.userFarms) : null, /*#__PURE__*/React.createElement(Segment, {\n    className: \"px-0 analysis-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Menu, {\n    pointing: true,\n    secondary: true,\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Menu.Item, {\n    name: \"Gis Analyzer\",\n    color: \"green\",\n    active: activeItem === \"Gis Analyzer\",\n    onClick: handleItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(Menu.Item, {\n    name: \"Recent Map\",\n    color: \"green\",\n    active: activeItem === \"Recent Map\",\n    onClick: handleItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(Menu.Item, {\n    name: \"Timeline\",\n    color: \"green\",\n    active: activeItem === \"Timeline\",\n    onClick: handleItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    columns: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"mx-0 py-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    className: \"segment-Gis\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 41\n    }\n  }, !heatmap ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleHeatMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 65\n    }\n  }, t(\"common:AreaSelected\")), /*#__PURE__*/React.createElement(Dropdown, {\n    placeholder: \"Select Field\",\n    defaultValue: field ? field : selectedField,\n    selection: true,\n    fluid: true,\n    options: fieldOptions // value={field}\n    ,\n    onChange: (e, center) => {\n      const dumm = center.options.filter(pers => pers.id === e.target.id).map(filtered => filtered.center);\n      setField(e.target.textContent);\n      setFieldId(e.target.id);\n      setLatLon(dumm); //console.log(\"setLAtLon---->\",dumm);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 65\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 65\n    }\n  }, t(\"common:SelectDate\")), /*#__PURE__*/React.createElement(Dropdown, {\n    placeholder: \"Select Date\",\n    fluid: true,\n    selection: true // options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n    ,\n    options: datt,\n    onChange: (e, {\n      value\n    }) => {\n      setDate(e.target.textContent); //  handleDateClick(value);\n\n      setImage(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 65\n    }\n  })), /*#__PURE__*/React.createElement(Form.Field, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 65\n    }\n  }, t(\"common:SelectIndices\")), /*#__PURE__*/React.createElement(Dropdown, {\n    placeholder: \"Select Indices\",\n    fluid: true,\n    selection: true,\n    options: indicesOptions,\n    onChange: (e, {\n      value\n    }) => setIndices(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 65\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    fluid: true,\n    type: \"submit\",\n    color: \"green\",\n    className: \"form-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 61\n    }\n  }, \"Generate Heat Map\")))) : null, heatmap ? /*#__PURE__*/React.createElement(HeatMap, Object.assign({}, props, {\n    fieldId: fieldId ? fieldId : currentFieldId,\n    date: date,\n    indices: indices,\n    selectedField: selectedField,\n    setHeatmap: setHeatmap,\n    imageLink: imageLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 56\n    }\n  })) : null, props.userFarms.length > 0 && fieldId && !heatmap ? props.userFarms.forEach(poly => {\n    if (poly._id === fieldId) {\n      polygon = poly.location;\n      center = poly.address.location;\n    }\n  }) : null, !heatmap ?\n  /*#__PURE__*/\n  // <div className=\"mapContainer\">\n  React.createElement(MapPolygon, {\n    editable: true,\n    polygon: polygon,\n    center: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 54\n    }\n  })\n  /* </div>  */\n  : null))))))) : activeItem == \"Gis Analyzer\" ? /*#__PURE__*/React.createElement(Grid, {\n    columns: 1,\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    className: \"px-0 analysis-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Menu, {\n    pointing: true,\n    secondary: true,\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Menu.Item, {\n    name: \"Gis Analyzer\",\n    color: \"green\",\n    active: activeItem === \"Gis Analyzer\",\n    onClick: handleItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Menu.Item, {\n    name: \"Recent Map\",\n    color: \"green\",\n    active: activeItem === \"Recent Map\",\n    onClick: handleItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Menu.Item, {\n    name: \"Timeline\",\n    color: \"green\",\n    active: activeItem === \"Timeline\",\n    onClick: handleItemClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"general-analyser\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(GeneralAnalyzer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 41\n    }\n  })))))) : setActiveItem(\"Recent Map\")) // <Container fluid>\n  //     {props.userFarms.length>0 ? fillData(props.userFarms) : null}\n  //     <Menu pointing secondary>\n  //         <Menu.Item \n  //             name = 'Recent Map'\n  //             color = \"green\"\n  //             active = {activeItem === 'Recent Map'}\n  //             onClick = {handleItemClick}\n  //         />\n  //         <Menu.Item \n  //             name = \"Timeline\"\n  //             color = \"green\"\n  //             active = {activeItem === 'Timeline'}\n  //             onClick = {handleItemClick}\n  //         />\n  //     </Menu>\n  //     <Container className=\"segment-Gis\">\n  //   { !heatmap ? \n  //   <div className='form-top'>\n  //     <Form onSubmit={handleSubmit}>\n  //         <Form.Field>\n  //             <label>{t(\"common:AreaSelected\")}</label>\n  //             <Dropdown \n  //                 placeholder='Select Field'\n  //                 defaultValue={field ? field : selectedField}\n  //                 selection\n  //                 fluid\n  //                 options={fieldOptions}\n  //                 // value={field}\n  //                 onChange={(e, center) =>  {\n  //                     const dumm = center.options.filter(pers => pers.id === e.target.id).map(filtered => (filtered.center));\n  //                     setField(e.target.textContent);\n  //                     setFieldId(e.target.id);\n  //                     setLatLon(dumm);\n  //                     //console.log(\"setLAtLon---->\",dumm);\n  //                 }}\n  //             />\n  //         </Form.Field>\n  //     </Form>\n  // </div>\n  // : null }\n  // { !heatmap ?\n  // <div className='form-wrapper'>\n  //     <Form onSubmit={handleHeatMap}>\n  //         <Form.Field>\n  //             <label>{t(\"common:SelectDate\")}</label>\n  //             <Dropdown \n  //                 placeholder='Select Date'\n  //                 fluid\n  //                 selection\n  //                 // options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n  //                 options = {datt}\n  //                 onChange={(e, {value}) => {\n  //                      setDate(e.target.textContent);\n  //                     //  handleDateClick(value);\n  //                      setImage(value);\n  //                     }}\n  //             />\n  //         </Form.Field>\n  //         <Form.Field>\n  //             <label>{t(\"common:SelectIndices\")}</label>\n  //             <Dropdown \n  //                 placeholder='Select Indices'\n  //                 fluid\n  //                 selection\n  //                 options={indicesOptions}\n  //                 onChange={(e, {value}) => setIndices(value)}\n  //             />\n  //         </Form.Field>\n  //         <Button type='submit' color='green'>Generate Heat Map</Button>\n  //     </Form>\n  // </div>\n  // : null }\n  // {heatmap ? <HeatMap {...props} fieldId={fieldId ? fieldId : currentFieldId} date={date} indices={indices} selectedField={selectedField} setHeatmap={setHeatmap} imageLink={imageLink} /> : null}\n  // { props.userFarms.length>0&&fieldId&&!heatmap ? props.userFarms.forEach(poly => { \n  //     if(poly._id === fieldId){\n  //         polygon = poly.location\n  //         center = poly.address.location\n  //         }\n  //     }) : \n  //     null\n  // } \n  // {!heatmap ? \n  // <MapPolygon editable={false} polygon={polygon} center={center} /> \n  // : null }\n  //     </Container>\n  // </Container>\n  ;\n};\n\nexport default GisAnalysis;\n{\n  /* --------Based on the below logic fillData function is working----- */\n}\n{\n  /* {props.userFarms.length>0 ? props.userFarms.forEach(ele => fieldOptions.push({text: ele.fieldName, key: ele._id, value: ele.fieldName})) : null} */\n}\n{\n  /* ---------Here the data is passed on to the dropdowns */\n}\n{\n  /* {props.userFarms.length>0 ? filledData(props.userFarms) : null} */\n}\n{\n  /* {console.log(props.userFarms.length>0 ? props.userFarms[0].farmName : \"nothing coming\")} */\n}\n{\n  /* { props.heatMap.length>0 ? getHeatData() : null } */\n}\n{\n  /* {heatmap ? <HeatMap {...props} date={date} indices={indices} selectedField={selectedField} setHeatmap={setHeatmap} /> : null} */\n}","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/GisAnalysis/GisAnalysis.js"],"names":["React","useState","useEffect","Grid","Menu","Container","Segment","Button","Dropdown","Form","MapPolygon","useTranslation","HeatMap","GeneralAnalyzer","GisAnalysis","props","activeItem","setActiveItem","t","indices","setIndices","field","setField","fieldId","setFieldId","date","setDate","heatmap","setHeatmap","datt","setDatt","latlon","setLatLon","imageLink","setImageLink","image","setImage","polygon","center","fieldOptions","selectedField","currentFieldId","fillData","newData","userFarms","forEach","element","push","text","farmName","id","_id","value","location","address","indicesOptions","key","handleItemClick","e","name","handleSubmit","event","preventDefault","datee","aoi","getHeatData","fId","ele","handleHeatMap","res","getLinkForImage","document","title","length","getWeatherData","dumm","options","filter","pers","target","map","filtered","textContent","poly"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Grid, Menu, Container, Segment, Button, Dropdown, Form } from 'semantic-ui-react';\n// import { } from 'semantic-ui-react';\nimport './GisAnalysis.scss';\nimport MapPolygon from '../MapPolygon/MapPolygon';\nimport { useTranslation } from \"react-i18next\";\nimport HeatMap from '../HeatMap/HeatMap';\nimport GeneralAnalyzer from './GisGeneralAnalyzer'\n// import { setRTLTextPlugin } from 'mapbox-gl';\n\nconst GisAnalysis = (props) => {\n    const [activeItem, setActiveItem] = useState('Recent Map');\n    const { t } = useTranslation();\n\n    const [indices, setIndices] = useState('');\n    const [field, setField] = useState('');\n    const [fieldId, setFieldId] = useState('');\n    const [date, setDate] = useState('');\n    const [heatmap, setHeatmap] = useState(false);\n    const [datt, setDatt] = useState([]);\n    const [latlon, setLatLon] = useState([]);\n    // const [imageId, setImageId] = useState('');\n    const [imageLink, setImageLink] = useState('');\n    const [image, setImage] = useState('');\n\n    let polygon = [[48.8566, 2.3522]] //=  props.userFarms.location\n    let center = [48.8566, 2.3522]//=  props.userFarms.address.location\n\n    let fieldOptions = [];\n    let selectedField = '';\n    let currentFieldId = '';\n    const fillData = (newData = props.userFarms) => {\n        newData.forEach(element => {\n            fieldOptions.push({\n                text: element.farmName,\n                id: element._id,\n                value: element.farmName,\n                polygon: element.location,\n                center: element.address.location\n            })\n        });\n        selectedField = newData[0].farmName;\n        polygon = newData[0].location;\n        center = newData[0].address.location;\n        currentFieldId = newData[0]._id;\n    }\n\n    var indicesOptions = [\n        {\n            key: 'NDVI',\n            text: 'NDVI',\n            value: 'NDVI'\n        }\n    ]\n\n\n\n    const handleItemClick = (e, { name }) => {\n        setActiveItem(name)\n        // setHeatmap(!heatmap)\n        \n    \n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        // setHeatmap(true);\n    }\n\n    let datee = []\n    let aoi = [];\n    const getHeatData = async () => {\n        let fId = ''\n        fieldId ? fId = fieldId : fId = currentFieldId;\n\n        fieldOptions.forEach(element => {\n            if (element.id === fId) {\n                element.polygon.forEach(ele => {\n                    aoi.push([\n                        ele[1],\n                        ele[0]\n                    ]);\n                });\n            }\n        });\n        // const re = [];\n        // re =  getHeatData(aoi);\n        // //console.log(\"--%%--re--\",re);\n        // datee = aoi.map((element) => \n        //         ({\n        //             key: element.image,\n        //             value: element.image,\n        //             text: element.date.split('T')[0]\n        //         })\n        // );\n        // setDatt(datee);\n        // console.log(datee);\n        // console.log(\"---))))))----handleHeatMap----(((((((----\");\n    }\n\n\n    /* HeatMap Function */\n    const handleHeatMap = (event) => {\n        event.preventDefault();\n        if (indices === '') {\n            return;\n        }\n        // if(date === ''){\n        //     return;\n        // }\n        let fId = ''\n        fieldId ? fId = fieldId : fId = currentFieldId;\n        let res = props.getLinkForImage(image, indices, fId);\n        // console.log(\"response--> \", res);\n        setImageLink(res);\n        setHeatmap(!heatmap)\n        \n    }\n\n\n\n    useEffect(() => {\n        document.title = t(props.title);\n\n    }, [props.title]);\n\n\n    useEffect(() => {\n        //---- For Rerendering the component with new value\n        //----- This get heat data only called when changing the fields\n        getHeatData();\n        //console.log(\"latlon----> \",latlon);\n        if (latlon.length > 0) {\n            //console.log(\"getget---->> \",latlon[0][0],latlon[0][1]);\n            props.getWeatherData(latlon[0][0], latlon[0][1]);\n        }\n    }, [field]);\n\n    useEffect(() => {\n        //----- Rendering only on heatmap\n        getHeatData()\n    }, [heatmap]);\n\n    return (\n\n        <div>\n            {activeItem == \"Recent Map\" ? \n            \n                <Grid columns={1} container>\n                    <Grid.Row className=\"ml-2\">\n                        <Grid.Column>\n                            {props.userFarms.length > 0 ? fillData(props.userFarms) : null}\n                            <Segment className=\"px-0 analysis-map\">\n                                <Menu pointing secondary fluid>\n                                    <Menu.Item\n                                        name=\"Gis Analyzer\"\n                                        color=\"green\"\n                                        active={activeItem === \"Gis Analyzer\"}\n                                        onClick={handleItemClick}\n                                    />\n                                    <Menu.Item\n                                        name=\"Recent Map\"\n                                        color=\"green\"\n                                        active={activeItem === \"Recent Map\"}\n                                        onClick={handleItemClick}\n                                    />\n                                    <Menu.Item\n                                        name=\"Timeline\"\n                                        color=\"green\"\n                                        active={activeItem === \"Timeline\"}\n                                        onClick={handleItemClick}\n                                    />\n                                    {/* {console.log(heatmap)} */}\n                                </Menu>\n                                <Grid columns={1}>\n                                    <Grid.Row className=\"mx-0 py-0\">\n                                        <Grid.Column className=\"segment-Gis\">\n                                            {!heatmap ?\n\n                                                <>\n                                                    {/* <div className=\"form-top\">\n                                                        <Form>\n                                                            \n                                                        </Form>\n\n                                                    </div> */}\n                                                    <div className='form-wrapper'>\n                                                        <Form onSubmit={handleHeatMap}>\n                                                            \n                                                            \n                                                            <Form.Field>\n                                                                <label>{t(\"common:AreaSelected\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Field'\n                                                                    defaultValue={field ? field : selectedField}\n                                                                    selection\n                                                                    fluid\n                                                                    options={fieldOptions}\n                                                                    // value={field}\n                                                                    onChange={(e, center) => {\n                                                                        const dumm = center.options.filter(pers => pers.id === e.target.id).map(filtered => (filtered.center));\n                                                                        setField(e.target.textContent);\n                                                                        setFieldId(e.target.id);\n                                                                        setLatLon(dumm);\n                                                                        //console.log(\"setLAtLon---->\",dumm);\n                                                                    }}\n                                                                />\n                                                            </Form.Field>\n                                                            \n                                                            <Form.Field>\n                                                                <label>{t(\"common:SelectDate\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Date'\n                                                                    fluid\n                                                                    selection\n                                                                    // options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n                                                                    options={datt}\n\n                                                                    onChange={(e, { value }) => {\n                                                                        setDate(e.target.textContent);\n                                                                        //  handleDateClick(value);\n                                                                        setImage(value);\n                                                                    }}\n                                                                />\n                                                            </Form.Field>\n\n                                                            <Form.Field>\n                                                                <label>{t(\"common:SelectIndices\")}</label>\n                                                                <Dropdown\n                                                                    placeholder='Select Indices'\n                                                                    fluid\n                                                                    selection\n                                                                    options={indicesOptions}\n                                                                    onChange={(e, { value }) => setIndices(value)}\n                                                                />\n                                                            </Form.Field>\n\n                                                            <Button fluid type='submit' color='green' className=\"form-button\">Generate Heat Map</Button>\n\n                                                        </Form>\n                                                    </div>\n                                                </>\n\n                                                : null\n                                            }\n\n                                            {heatmap ? <HeatMap {...props} fieldId={fieldId ? fieldId : currentFieldId} date={date} indices={indices} selectedField={selectedField}  setHeatmap = {setHeatmap} imageLink={imageLink} /> : null}\n                                            {props.userFarms.length > 0 && fieldId && !heatmap ? props.userFarms.forEach(poly => {\n                                                if (poly._id === fieldId) {\n                                                    polygon = poly.location\n                                                    center = poly.address.location\n                                                }\n                                            }) :\n                                                null\n                                            }\n\n                                            {!heatmap ? \n                                                // <div className=\"mapContainer\">\n                                                     <MapPolygon editable={true} polygon={polygon} center={center} />\n                                                /* </div>  */\n                                                : null \n                                            }\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                : activeItem == \"Gis Analyzer\" ?\n                    <Grid columns={1} container>\n                        <Grid.Row className=\"ml-2\">\n                            <Grid.Column>\n                                <Segment className=\"px-0 analysis-map\">\n                                    <Menu pointing secondary fluid>\n                                        <Menu.Item\n                                            name=\"Gis Analyzer\"\n                                            color=\"green\"\n                                            active={activeItem === \"Gis Analyzer\"}\n                                            onClick={handleItemClick}\n                                        />\n                                        <Menu.Item\n                                            name=\"Recent Map\"\n                                            color=\"green\"\n                                            active={activeItem === \"Recent Map\"}\n                                            onClick={handleItemClick}\n                                        />\n                                        <Menu.Item\n                                            name=\"Timeline\"\n                                            color=\"green\"\n                                            active={activeItem === \"Timeline\"}\n                                            onClick={handleItemClick}\n                                        />\n                                        {/* {console.log(heatmap)} */}\n                                    </Menu>\n                                    <div className=\"general-analyser\">\n                                        <GeneralAnalyzer />\n                                    </div>\n                                </Segment>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                : setActiveItem(\"Recent Map\")\n            \n            }\n            \n        </div>\n        // <Container fluid>\n\n        //     {props.userFarms.length>0 ? fillData(props.userFarms) : null}\n\n        //     <Menu pointing secondary>\n        //         <Menu.Item \n        //             name = 'Recent Map'\n        //             color = \"green\"\n        //             active = {activeItem === 'Recent Map'}\n        //             onClick = {handleItemClick}\n        //         />\n        //         <Menu.Item \n        //             name = \"Timeline\"\n        //             color = \"green\"\n        //             active = {activeItem === 'Timeline'}\n        //             onClick = {handleItemClick}\n        //         />\n        //     </Menu>\n        //     <Container className=\"segment-Gis\">\n\n\n\n        //   { !heatmap ? \n        //   <div className='form-top'>\n        //     <Form onSubmit={handleSubmit}>\n        //         <Form.Field>\n        //             <label>{t(\"common:AreaSelected\")}</label>\n        //             <Dropdown \n        //                 placeholder='Select Field'\n        //                 defaultValue={field ? field : selectedField}\n        //                 selection\n        //                 fluid\n        //                 options={fieldOptions}\n        //                 // value={field}\n        //                 onChange={(e, center) =>  {\n        //                     const dumm = center.options.filter(pers => pers.id === e.target.id).map(filtered => (filtered.center));\n        //                     setField(e.target.textContent);\n        //                     setFieldId(e.target.id);\n        //                     setLatLon(dumm);\n        //                     //console.log(\"setLAtLon---->\",dumm);\n        //                 }}\n        //             />\n        //         </Form.Field>\n        //     </Form>\n        // </div>\n        // : null }\n\n        // { !heatmap ?\n        // <div className='form-wrapper'>\n        //     <Form onSubmit={handleHeatMap}>\n\n        //         <Form.Field>\n        //             <label>{t(\"common:SelectDate\")}</label>\n        //             <Dropdown \n        //                 placeholder='Select Date'\n        //                 fluid\n        //                 selection\n        //                 // options={dateOptions.length>0 ? dateOptions : defaultDateOption}\n        //                 options = {datt}\n\n        //                 onChange={(e, {value}) => {\n        //                      setDate(e.target.textContent);\n        //                     //  handleDateClick(value);\n        //                      setImage(value);\n        //                     }}\n        //             />\n        //         </Form.Field>\n\n        //         <Form.Field>\n        //             <label>{t(\"common:SelectIndices\")}</label>\n        //             <Dropdown \n        //                 placeholder='Select Indices'\n        //                 fluid\n        //                 selection\n        //                 options={indicesOptions}\n        //                 onChange={(e, {value}) => setIndices(value)}\n        //             />\n        //         </Form.Field>\n\n        //         <Button type='submit' color='green'>Generate Heat Map</Button>\n\n        //     </Form>\n        // </div>\n        // : null }\n\n\n        // {heatmap ? <HeatMap {...props} fieldId={fieldId ? fieldId : currentFieldId} date={date} indices={indices} selectedField={selectedField} setHeatmap={setHeatmap} imageLink={imageLink} /> : null}\n\n        // { props.userFarms.length>0&&fieldId&&!heatmap ? props.userFarms.forEach(poly => { \n        //     if(poly._id === fieldId){\n        //         polygon = poly.location\n        //         center = poly.address.location\n        //         }\n        //     }) : \n        //     null\n        // } \n\n        // {!heatmap ? \n        // <MapPolygon editable={false} polygon={polygon} center={center} /> \n        // : null }\n\n        //     </Container>\n        // </Container>\n    );\n}\n\nexport default GisAnalysis;\n\n\n{/* --------Based on the below logic fillData function is working----- */ }\n{/* {props.userFarms.length>0 ? props.userFarms.forEach(ele => fieldOptions.push({text: ele.fieldName, key: ele._id, value: ele.fieldName})) : null} */ }\n{/* ---------Here the data is passed on to the dropdowns */ }\n\n{/* {props.userFarms.length>0 ? filledData(props.userFarms) : null} */ }\n{/* {console.log(props.userFarms.length>0 ? props.userFarms[0].farmName : \"nothing coming\")} */ }\n\n\n{/* { props.heatMap.length>0 ? getHeatData() : null } */ }\n{/* {heatmap ? <HeatMap {...props} date={date} indices={indices} selectedField={selectedField} setHeatmap={setHeatmap} /> : null} */ }"]},"metadata":{},"sourceType":"module"}