{"ast":null,"code":"import { GET_SENSORS_DATA, GET_SENSORS_DATA_ERROR } from \"../actions/types\";\nconst initialState = {\n  // sensormeasures: [],\n  sensormeasures: [// {\n    //   location: {\n    //     longitude: \"_\",\n    //     latitude: \"_\",\n    //   },\n    //   deviceId: \"_\",\n    //   level0: {\n    //     airTemp: \"_\",\n    //     humidity: \"_\",\n    //     solarRad: \"_\",\n    //   },\n    //   level1: {\n    //     salinity: \"_\",\n    //     soilTemp: \"_\",\n    //     \"evapotranspiration(ET)\": \"_\",\n    //     potassium: \"_\",\n    //     nitrogen: \"_\",\n    //     pH: \"_\",\n    //     respiration: \"_\",\n    //     moisture: \"_\",\n    //     pressure: \"_\",\n    //     phosphorus: \"_\",\n    //   },\n    //   device: {\n    //     hw_version: \"_\",\n    //     software_version: \"_\",\n    //     battery: \"_\",\n    //     signal: \"_\",\n    //     uptime: \"_\",\n    //   },\n    //   level2: {\n    //     salinity: \"_\",\n    //     soilTemp: \"_\",\n    //     potassium: \"_\",\n    //     nitrogen: \"_\",\n    //     pH: \"_\",\n    //     aeration: \"_\",\n    //     moisture: \"_\",\n    //     pressure: \"_\",\n    //     phosphorus: \"_\",\n    //   },\n    //   timestamp: \"_\",\n    //   level3: {\n    //     salinity: \"_\",\n    //     soilTemp: \"_\",\n    //     potassium: \"_\",\n    //     nitrogen: \"_\",\n    //     pH: \"_\",\n    //     moisture: \"_\",\n    //     pressure: \"_\",\n    //     phosphorus: \"_\",\n    //   },\n    // },\n  ],\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_SENSORS_DATA:\n      return { ...state,\n        sensormeasures: payload,\n        loading: false\n      };\n\n    case GET_SENSORS_DATA_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/deepakkumarsingh/Downloads/banao_lg/sensegrass/src/reducers/sensors.js"],"names":["GET_SENSORS_DATA","GET_SENSORS_DATA_ERROR","initialState","sensormeasures","error","state","action","type","payload","loading"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,sBAA3B,QAAyD,kBAAzD;AAEA,MAAMC,YAAY,GAAG;AACnB;AACAC,EAAAA,cAAc,EAAE,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDc,GAFG;AAyDnBC,EAAAA,KAAK,EAAE;AAzDY,CAArB;AA4DA,eAAe,UAAUC,KAAK,GAAGH,YAAlB,EAAgCI,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACE,SAAKP,gBAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELF,QAAAA,cAAc,EAAEK,OAFX;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,sBAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELD,QAAAA,KAAK,EAAEI,OAFF;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF;AACE,aAAOJ,KAAP;AAfJ;AAiBD","sourcesContent":["import { GET_SENSORS_DATA, GET_SENSORS_DATA_ERROR } from \"../actions/types\";\n\nconst initialState = {\n  // sensormeasures: [],\n  sensormeasures: [\n    // {\n    //   location: {\n    //     longitude: \"_\",\n    //     latitude: \"_\",\n    //   },\n    //   deviceId: \"_\",\n    //   level0: {\n    //     airTemp: \"_\",\n    //     humidity: \"_\",\n    //     solarRad: \"_\",\n    //   },\n    //   level1: {\n    //     salinity: \"_\",\n    //     soilTemp: \"_\",\n    //     \"evapotranspiration(ET)\": \"_\",\n    //     potassium: \"_\",\n    //     nitrogen: \"_\",\n    //     pH: \"_\",\n    //     respiration: \"_\",\n    //     moisture: \"_\",\n    //     pressure: \"_\",\n    //     phosphorus: \"_\",\n    //   },\n    //   device: {\n    //     hw_version: \"_\",\n    //     software_version: \"_\",\n    //     battery: \"_\",\n    //     signal: \"_\",\n    //     uptime: \"_\",\n    //   },\n    //   level2: {\n    //     salinity: \"_\",\n    //     soilTemp: \"_\",\n    //     potassium: \"_\",\n    //     nitrogen: \"_\",\n    //     pH: \"_\",\n    //     aeration: \"_\",\n    //     moisture: \"_\",\n    //     pressure: \"_\",\n    //     phosphorus: \"_\",\n    //   },\n    //   timestamp: \"_\",\n    //   level3: {\n    //     salinity: \"_\",\n    //     soilTemp: \"_\",\n    //     potassium: \"_\",\n    //     nitrogen: \"_\",\n    //     pH: \"_\",\n    //     moisture: \"_\",\n    //     pressure: \"_\",\n    //     phosphorus: \"_\",\n    //   },\n    // },\n  ],\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_SENSORS_DATA:\n      return {\n        ...state,\n        sensormeasures: payload,\n        loading: false,\n      };\n    case GET_SENSORS_DATA_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}