{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/PlacesAutocomplete/Autocomplete.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Input } from \"semantic-ui-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { isNotValidNumber } from \"../../utils/utilsFunctions\";\n\nconst extractDataFromPlace = place => {\n  if (!place.geometry || !place.geometry.location) {\n    return undefined;\n  }\n\n  const lat = place.geometry.location.lat();\n  const lng = place.geometry.location.lng();\n\n  if (isNotValidNumber(lat) || isNotValidNumber(lng)) {\n    return undefined;\n  }\n\n  return {\n    addressName: place.name || '',\n    location: [lat, lng]\n  };\n};\n/**\n * A react wrapper component to use Google places autocomplete api.\n * https://developers-dot-devsite-v2-prod.appspot.com/maps/documentation/javascript/examples/places-autocomplete\n * @param {Object} props Props for the route.\n * @returns {React.Component}\n */\n\n\nconst AutoComplete = props => {\n  const {\n    t\n  } = useTranslation('add-edit-farm');\n  const placesInput = useRef();\n  const {\n    placeChangeHandler,\n    fields\n  } = props;\n  const [values, setValues] = useState({\n    address: props.address || ''\n  });\n\n  const handleChange = (name, value) => {\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n  /**\n   * Method to configure and setup autocomplete input element after component load.\n   * @returns {void}\n   */\n\n\n  const configureAutoComplete = () => {\n    if (!window.google) {\n      throw new Error('Places API is not loaded.');\n    }\n\n    const autocomplete = new window.google.maps.places.Autocomplete(placesInput.current.inputRef.current); // Set the data fields to return when the user selects a place.\n\n    autocomplete.setFields(fields);\n    autocomplete.addListener('place_changed', function () {\n      const place = autocomplete.getPlace();\n      const data = extractDataFromPlace(place);\n\n      if (data) {\n        handleChange('address', data.addressName);\n      }\n\n      placeChangeHandler(data);\n    });\n  };\n\n  useEffect(() => {\n    configureAutoComplete(placeChangeHandler);\n\n    if (props.address !== values.address) {\n      handleChange('address', props.address);\n    }\n  }, [props.address]);\n  return /*#__PURE__*/React.createElement(Input, {\n    fluid: true,\n    ref: placesInput,\n    placeholder: t('address-placeholder'),\n    value: values.address || '',\n    onChange: e => handleChange(e.target.name, e.target.value),\n    name: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  });\n}; // Specifies the default values for props\n\n\nAutoComplete.defaultProps = {\n  fields: ['geometry', 'name']\n};\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/PlacesAutocomplete/Autocomplete.js"],"names":["React","useEffect","useRef","useState","Input","useTranslation","isNotValidNumber","extractDataFromPlace","place","geometry","location","undefined","lat","lng","addressName","name","AutoComplete","props","t","placesInput","placeChangeHandler","fields","values","setValues","address","handleChange","value","configureAutoComplete","window","google","Error","autocomplete","maps","places","Autocomplete","current","inputRef","setFields","addListener","getPlace","data","e","target","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Input } from \"semantic-ui-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { isNotValidNumber } from \"../../utils/utilsFunctions\";\n\nconst extractDataFromPlace = (place) => {\n    if (!place.geometry || !place.geometry.location) {\n        return undefined;\n    }\n    const lat = place.geometry.location.lat();\n    const lng = place.geometry.location.lng();\n    if (isNotValidNumber(lat) || isNotValidNumber(lng)) {\n        return undefined;\n    }\n    return {\n        addressName: place.name || '',\n        location: [lat, lng]\n    };\n}\n\n/**\n * A react wrapper component to use Google places autocomplete api.\n * https://developers-dot-devsite-v2-prod.appspot.com/maps/documentation/javascript/examples/places-autocomplete\n * @param {Object} props Props for the route.\n * @returns {React.Component}\n */\nconst AutoComplete = (props) => {\n    const { t } = useTranslation('add-edit-farm');\n    const placesInput = useRef();\n    const { placeChangeHandler, fields } = props;\n    const [values, setValues] = useState({\n        address: props.address || ''\n    });\n    const handleChange = (name, value) => {\n        setValues({ ...values, [name]: value });\n    };\n    /**\n     * Method to configure and setup autocomplete input element after component load.\n     * @returns {void}\n     */\n    const configureAutoComplete = () => {\n        if (!window.google) {\n            throw new Error('Places API is not loaded.');\n        }\n        const autocomplete = new window.google.maps.places.Autocomplete(placesInput.current.inputRef.current);\n        // Set the data fields to return when the user selects a place.\n        autocomplete.setFields(fields);\n        autocomplete.addListener('place_changed', function () {\n            const place = autocomplete.getPlace();\n            const data = extractDataFromPlace(place);\n            if (data) {\n                handleChange('address', data.addressName);\n            }\n            placeChangeHandler(data);\n        });\n    };\n    useEffect(() => {\n        configureAutoComplete(placeChangeHandler);\n        if (props.address !== values.address) {\n            handleChange('address', props.address);\n        }\n    }, [props.address]);\n    return (<Input fluid ref={placesInput}\n        placeholder={t('address-placeholder')}\n        value={values.address || ''}\n        onChange={(e) => handleChange(e.target.name, e.target.value)}\n        name=\"address\"></Input>);\n}\n// Specifies the default values for props\nAutoComplete.defaultProps = {\n    fields: ['geometry', 'name']\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}