{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/TimelineHeading/TimelineHeading.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Grid, Dropdown, Icon, Responsive } from 'semantic-ui-react'; // download\n\nfunction TimelineHeading(props) {\n  const {\n    t\n  } = useTranslation(\"crop-management\");\n  const [activityOptions, setActivityOptions] = useState([]);\n  const [chosenCC, setChosenCC] = useState([]);\n\n  function activitySelector(e, key) {\n    props.chosenCC(key.value);\n\n    if (e) {\n      setChosenCC(key.value); //cc _id\n    }\n  }\n\n  const getDropdownText = cropItem => {\n    if (props) {\n      let cropDate = new Date(cropItem.startDate);\n      return cropDate.toLocaleString('en-us', {\n        month: 'short'\n      }) + \" \" + cropDate.getFullYear() + \" \" + props.userFarms.find(farm => cropItem.farmId === farm._id).farmName + \" \" + cropItem.cropSeeds.map((cropSeed, index) => {\n        if (index === 0) {\n          return `${props.croptypes.find(type => type._id === cropSeed.cropId).name}`;\n        } else {\n          return ` & ${props.croptypes.find(type => type._id === cropSeed.cropId).name}`;\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (props) {\n      if (props.userActivities) {\n        if (props.userActivities.length) {\n          if (activityOptions.length < 1) {\n            const copyOptions = [];\n            props.currentcropcycles.map(cc => {\n              copyOptions.push({\n                key: cc._id,\n                value: cc._id,\n                text: getDropdownText(cc)\n              });\n            });\n            setActivityOptions(copyOptions);\n          }\n\n          if (activityOptions.length > 1 && activityOptions.length < props.userActivities.length) {\n            const copyOptions = [];\n            props.userActivities.map(activity => {\n              copyOptions.push({\n                key: activity._id,\n                value: activity._id,\n                text: activity._id\n              });\n            });\n            setActivityOptions(copyOptions);\n          }\n        }\n      }\n    }\n  }); //   useEffect(() => {\n  //     if(!chosenCC){\n  //         if(props.currentcropcycles){\n  //             setChosenCC(props.currentcropcycles[0]._id)\n  //         }\n  //     }\n  //   }, [chosenCC])\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Responsive, {\n    minWidth: 1450,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    columns: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"mx-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"#B2AFAF\",\n      fontWeight: \"bold\",\n      fontSize: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  }, t(\"Activity Logs Of\")))), /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"mx-0 p-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 15,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    fluid: true,\n    style: {\n      color: \"#58CB7C\",\n      fontSize: \"20px\",\n      position: \"relative\",\n      top: \"-1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, props ? props.userActivities ? /*#__PURE__*/React.createElement(Dropdown, {\n    text: t('dropdown-text'),\n    inline: true,\n    onChange: (e, key) => activitySelector(e, key),\n    options: activityOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 34\n    }\n  }) : /*#__PURE__*/React.createElement(Dropdown, {\n    text: t('empty-option'),\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 36\n    }\n  }) : null)), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"download\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  }))))), /*#__PURE__*/React.createElement(Responsive, {\n    minWidth: 768,\n    maxWidth: 1449,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    columns: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"mx-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"#B2AFAF\",\n      fontWeight: \"bold\",\n      fontSize: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, t(\"Activity Logs Of\")))), /*#__PURE__*/React.createElement(Grid.Row, {\n    className: \"mx-0 p-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    fluid: true,\n    style: {\n      color: \"#58CB7C\",\n      fontSize: \"20px\",\n      position: \"relative\",\n      top: \"-1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, props ? props.userActivities ? /*#__PURE__*/React.createElement(Dropdown, {\n    text: t('dropdown-text'),\n    inline: true,\n    onChange: (e, key) => activitySelector(e, key),\n    options: activityOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 34\n    }\n  }) : /*#__PURE__*/React.createElement(Dropdown, {\n    text: t('empty-option'),\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 36\n    }\n  }) : null)), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 2,\n    style: {\n      position: \"relative\",\n      top: \"-10px\",\n      right: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"download\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  })))))) // {/* <Grid.Column floated=\"left\" fluid>\n  //         <Grid.Row>\n  //             <p style={{color: \"gray\"}}>\n  //                 {t(\"activity-logs-title\")}\n  //             </p>\n  //         </Grid.Row>\n  //         <Grid.Row fluid>\n  //             <span fluid style={{color: \"green\"}}>\n  //                 { props ? (props.userActivities ? \n  //                 (<Dropdown text={t('dropdown-text')} inline onChange={(e, key) => activitySelector(e, key)} \n  //                 options={activityOptions}/>)\n  //                 : (<Dropdown text={t('empty-option')} disabled/>)) : (null)}\n  //             </span>\n  //         </Grid.Row>\n  //     </Grid.Column>\n  //     <Grid.Column floated=\"right\" width={2}>\n  //         <Icon className=\"download\"/>\n  //     </Grid.Column> */}\n  ;\n}\n\nexport default TimelineHeading;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/TimelineHeading/TimelineHeading.js"],"names":["React","useState","useEffect","useTranslation","Grid","Dropdown","Icon","Responsive","TimelineHeading","props","t","activityOptions","setActivityOptions","chosenCC","setChosenCC","activitySelector","e","key","value","getDropdownText","cropItem","cropDate","Date","startDate","toLocaleString","month","getFullYear","userFarms","find","farm","farmId","_id","farmName","cropSeeds","map","cropSeed","index","croptypes","type","cropId","name","userActivities","length","copyOptions","currentcropcycles","cc","push","text","activity","color","fontWeight","fontSize","position","top","right"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {Grid, Dropdown, Icon, Responsive} from 'semantic-ui-react'\n// download\nfunction TimelineHeading(props) {\n    const {t} = useTranslation(\"crop-management\");\n    const [activityOptions, setActivityOptions] = useState([])\n    const [chosenCC, setChosenCC] = useState([])\n    function activitySelector(e, key){\n        props.chosenCC(key.value)\n        if(e){\n            setChosenCC(key.value) //cc _id\n        }\n    }\n\n    const getDropdownText = (cropItem) => {\n        if(props){\n        let cropDate = new Date(cropItem.startDate)        \n        return(\n            cropDate.toLocaleString('en-us', { month: 'short' })+ \" \" +\n            cropDate.getFullYear()+ \" \" +\n            props.userFarms.find(farm =>\n                cropItem.farmId === farm._id\n            ).farmName + \" \" +\n            cropItem.cropSeeds.map((cropSeed, index) => {\n                if(index===0){\n                    return `${props.croptypes.find(type => type._id === cropSeed.cropId).name}`\n                }\n                else{\n                    return ` & ${props.croptypes.find(type => type._id === cropSeed.cropId).name}`\n                }\n            })\n        ); \n        }\n    } \n    useEffect(() => {\n        if(props){\n            if(props.userActivities){\n                if(props.userActivities.length){\n                    if(activityOptions.length < 1){\n                        const copyOptions = [];\n                    props.currentcropcycles.map(cc => {\n                        copyOptions.push({\n                            key: cc._id,\n                            value: cc._id,\n                            text: getDropdownText(cc)\n                        });\n                    });\n                    setActivityOptions(copyOptions);\n                }\n                if(activityOptions.length > 1 && activityOptions.length< props.userActivities.length){\n                    const copyOptions = [];\n                    props.userActivities.map(activity => {\n                        copyOptions.push({\n                            key: activity._id,\n                            value: activity._id,\n                            text: activity._id\n                        });\n                    });\n                    setActivityOptions(copyOptions);                    \n                }\n            }\n            }\n        }\n      });\n    //   useEffect(() => {\n    //     if(!chosenCC){\n    //         if(props.currentcropcycles){\n    //             setChosenCC(props.currentcropcycles[0]._id)\n    //         }\n    //     }\n    //   }, [chosenCC])\n    return(\n       \n\n        <div>\n            <Responsive minWidth={1450}>\n                <Grid columns={2}>\n                    <Grid.Row  className=\"mx-0\">\n                        <Grid.Column width={16}>\n                            <p style={{color: \"#B2AFAF\", fontWeight:\"bold\", fontSize: \"20px\"}}>\n                                {t(\"Activity Logs Of\")}\n                            </p>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row className=\"mx-0 p-0\">\n                        <Grid.Column width={15}>\n                            <span fluid style={{color: \"#58CB7C\", fontSize: \"20px\", position:\"relative\", top:\"-1rem\"}}>\n                                { props ? (props.userActivities ? \n                                (<Dropdown text={t('dropdown-text')} inline onChange={(e, key) => activitySelector(e, key)} \n                                options={activityOptions}/>)\n                                : (<Dropdown text={t('empty-option')} disabled/>)) : (null)}\n                            </span>\n                        </Grid.Column>\n                        <Grid.Column width={1}>\n                            <Icon name=\"download\"/>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid> \n            </Responsive>\n            <Responsive minWidth={768} maxWidth={1449}>\n                <Grid columns={2}>\n                    <Grid.Row  className=\"mx-0\">\n                        <Grid.Column width={16}>\n                            <p style={{color: \"#B2AFAF\", fontWeight:\"bold\", fontSize: \"20px\"}}>\n                                {t(\"Activity Logs Of\")}\n                            </p>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row className=\"mx-0 p-0\">\n                        <Grid.Column width={14}>\n                            <span fluid style={{color: \"#58CB7C\", fontSize: \"20px\", position:\"relative\", top:\"-1rem\"}}>\n                                { props ? (props.userActivities ? \n                                (<Dropdown text={t('dropdown-text')} inline onChange={(e, key) => activitySelector(e, key)} \n                                options={activityOptions}/>)\n                                : (<Dropdown text={t('empty-option')} disabled/>)) : (null)}\n                            </span>\n                        </Grid.Column>\n                        <Grid.Column width={2} style={{position: \"relative\", top: \"-10px\", right: \"20px\"}}>\n                            <Icon name=\"download\"/>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid> \n            </Responsive>\n        </div>\n\n\n        // {/* <Grid.Column floated=\"left\" fluid>\n        //         <Grid.Row>\n        //             <p style={{color: \"gray\"}}>\n        //                 {t(\"activity-logs-title\")}\n        //             </p>\n        //         </Grid.Row>\n        //         <Grid.Row fluid>\n        //             <span fluid style={{color: \"green\"}}>\n        //                 { props ? (props.userActivities ? \n        //                 (<Dropdown text={t('dropdown-text')} inline onChange={(e, key) => activitySelector(e, key)} \n        //                 options={activityOptions}/>)\n        //                 : (<Dropdown text={t('empty-option')} disabled/>)) : (null)}\n        //             </span>\n        //         </Grid.Row>\n        //     </Grid.Column>\n        //     <Grid.Column floated=\"right\" width={2}>\n        //         <Icon className=\"download\"/>\n        //     </Grid.Column> */}\n\n\n\n\n\n    )\n} \n\nexport default TimelineHeading;"]},"metadata":{},"sourceType":"module"}