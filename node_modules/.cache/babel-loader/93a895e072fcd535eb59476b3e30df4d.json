{"ast":null,"code":"import _classCallCheck from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{Responsive,Button,Grid,Segment}from'semantic-ui-react';import CropList from'./croplist';import CropMenu from'./cropmenu';import TimelineLabel from\"../TimelineLabel/TimelineLabel\";import'./cropcontainer.scss';import{Component}from'react';import AddCropForm from'./addcropform';import{withTranslation}from'react-i18next';import{MenuItem}from'@material-ui/core';var CropContainer=/*#__PURE__*/function(_Component){_inherits(CropContainer,_Component);var _super=_createSuper(CropContainer);function CropContainer(){var _this;_classCallCheck(this,CropContainer);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={dialogDisp:false,cropType:_this.props.croptypes.length?_this.props.croptypes[0]._id:\"\",seedType:_this.props.seedtypes.length?_this.props.seedtypes[0]._id:\"\",cultivationType:_this.props.cultivationtypes.length?_this.props.cultivationtypes[0]._id:\"\",fields:_this.props.userFarms.filter(function(farm){return!!!_this.props.currentcropcycles.find(function(cropCycle){return cropCycle.farmId===farm._id;});}),snackbarOpen:false,menuActive:\"current\",userCropsList:[],cropCurrentList:[],cropPastList:[]};_this.clickedIcon=function(){return/*#__PURE__*/React.createElement(MenuItem,null,_this.props.t(\"movecrop\"));};_this.moveCrop=function(source,cropCycleId){if(source===\"current\"){_this.moveCropToPast(cropCycleId);}};_this.moveCropToPast=function(currentCropId){var presentCropCycle=_this.props.currentcropcycles.find(function(cropCurrentItem){return cropCurrentItem._id===currentCropId;});presentCropCycle.isPast=true;_this.props.editCropCycle(presentCropCycle,_this.props.userId,_this.props.token);};_this.changeDialogDisp=function(){var cropType=_this.props.croptypes.length?_this.props.croptypes[0]._id:\"\";var seedType=_this.props.seedtypes.length?_this.props.seedtypes[0]._id:\"\";var cultivationType=_this.props.cultivationtypes.length?_this.props.cultivationtypes[0]._id:\"\";var bool=_this.state.dialogDisp;_this.setState({dialogDisp:!bool,cropType:cropType,seedType:seedType,cultivationType:cultivationType});};_this.changeSnackbarOpen=function(){var bool=_this.state.snackbarOpen;_this.setState({snackbarOpen:!bool});};_this.changeActiveMenu=function(newActiveMenu){_this.setState({menuActive:newActiveMenu});};_this.onClick=function(e){e.preventDefault();_this.setState({dialogDisp:true});// return(\n//     <AddCropForm/>\n// )\n};_this.onSubmit=function(msg){//e.preventDefault();\n_this.props.addCropCycle(msg,_this.props.userId,_this.props.token);// this.setState({snackbarOpen: true})\n// return (<Snackbar open={this.state.snackbarOpen} autoHideDuration={6000} onClose={this.changeSnackbarOpen}>\n//     <Message\n//         compact\n//         content={msg}\n//     />      \n//     </Snackbar>);\n};return _this;}_createClass(CropContainer,[{key:\"render\",value:function render(){var _this2=this;var t=this.props.t;var sendList=this.state.menuActive===\"current\"?this.props.currentcropcycles?this.props.currentcropcycles:[]:this.props.pastcropcycles?this.props.pastcropcycles:[];var fields=this.props.userFarms.filter(function(farm){return!!!_this2.props.currentcropcycles.find(function(cropCycle){return cropCycle.farmId===farm._id;});});var buttonEnabled=fields.length>0?true:false;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Responsive,{minWidth:1024},/*#__PURE__*/React.createElement(Grid,{container:true,columns:2},/*#__PURE__*/React.createElement(Grid.Row,{className:\"mt-4\"},/*#__PURE__*/React.createElement(Grid.Column,{width:8,className:\"leftCropMenu\"},/*#__PURE__*/React.createElement(Segment,{raised:true,style:{borderRadius:\"12px\"}},/*#__PURE__*/React.createElement(CropMenu,{menuActive:this.state.menuActive,changeActiveMenu:this.changeActiveMenu}),/*#__PURE__*/React.createElement(CropList,{cropList:sendList,source:this.state.menuActive,moveCrop:this.moveCrop,userFarms:this.props.userFarms,cropTypes:this.props.croptypes,seedTypes:this.props.seedtypes}),/*#__PURE__*/React.createElement(Grid,{columns:2},/*#__PURE__*/React.createElement(Grid.Column,null),/*#__PURE__*/React.createElement(Grid.Column,{textAlign:\"center\"},buttonEnabled?/*#__PURE__*/React.createElement(Button,{color:\"green\",className:\"cropButton\",fluid:true,onClick:function onClick(e){return _this2.onClick(e);}},\" \",t('add-button'),\" \"):/*#__PURE__*/React.createElement(Button,{color:\"gray\",className:\"cropButton\",fluid:true,disabled:true},\" \",t('add-button'),\" \")),/*#__PURE__*/React.createElement(Grid.Column,null))),fields&&fields.length>0?/*#__PURE__*/React.createElement(AddCropForm,Object.assign({open:this.state.dialogDisp,changeDialogDisp:this.changeDialogDisp,onSubmit:this.onSubmit,fields:fields,fieldId:fields[0]._id,polygon:fields[0].location,center:fields[0].address.location},this.props)):null),/*#__PURE__*/React.createElement(Grid.Column,{width:7,className:\"rightCropMenu\"},/*#__PURE__*/React.createElement(TimelineLabel,this.props))))),/*#__PURE__*/React.createElement(Responsive,{minWidth:768,maxWidth:1023.98},/*#__PURE__*/React.createElement(Grid,{container:true,columns:2},/*#__PURE__*/React.createElement(Grid.Row,{className:\"mt-4\"},/*#__PURE__*/React.createElement(Grid.Column,{tablet:8,className:\"leftCropMenu\"},/*#__PURE__*/React.createElement(Segment,{raised:true,style:{borderRadius:\"12px\"}},/*#__PURE__*/React.createElement(CropMenu,{menuActive:this.state.menuActive,changeActiveMenu:this.changeActiveMenu}),/*#__PURE__*/React.createElement(CropList,{cropList:sendList,source:this.state.menuActive,moveCrop:this.moveCrop,userFarms:this.props.userFarms,cropTypes:this.props.croptypes,seedTypes:this.props.seedtypes}),/*#__PURE__*/React.createElement(Grid,{columns:2},/*#__PURE__*/React.createElement(Grid.Column,null),/*#__PURE__*/React.createElement(Grid.Column,{textAlign:\"center\"},buttonEnabled?/*#__PURE__*/React.createElement(Button,{color:\"green\",className:\"cropButton\",fluid:true,onClick:function onClick(e){return _this2.onClick(e);}},\" \",t('add-button'),\" \"):/*#__PURE__*/React.createElement(Button,{color:\"gray\",className:\"cropButton\",fluid:true,disabled:true},\" \",t('add-button'),\" \")),/*#__PURE__*/React.createElement(Grid.Column,null))),fields&&fields.length>0?/*#__PURE__*/React.createElement(AddCropForm,Object.assign({open:this.state.dialogDisp,changeDialogDisp:this.changeDialogDisp,onSubmit:this.onSubmit,fields:fields,fieldId:fields[0]._id,polygon:fields[0].location,center:fields[0].address.location},this.props)):null),/*#__PURE__*/React.createElement(Grid.Column,{tablet:7,className:\"rightCropMenu\"},/*#__PURE__*/React.createElement(TimelineLabel,this.props))))));}}]);return CropContainer;}(Component);export default withTranslation('crop-management')(CropContainer);//     <Container>\n//     <Segment>\n//       <CropMenu menuActive={this.state.menuActive} changeActiveMenu={this.changeActiveMenu}/>\n//       <CropList cropList={sendList} source={this.state.menuActive} moveCrop={this.moveCrop} \n//       userFarms={this.props.userFarms} cropTypes={this.props.croptypes} seedTypes={this.props.seedtypes}/>\n//       <Grid columns={3}>\n//           <Grid.Column>\n//           </Grid.Column>\n//           <Grid.Column>\n//             {buttonEnabled ? (<Button color=\"green\" fluid onClick={(e) => this.onClick(e)}> {t('add-button')} </Button>) \n//             : (<Button color=\"gray\" fluid disabled> {t('add-button')} </Button>)}\n//           </Grid.Column>\n//           <Grid.Column>\n//           </Grid.Column>\n//       </Grid>\n//     </Segment>\n//     {\n//         fields ? (<AddCropForm open={this.state.dialogDisp} changeDialogDisp={this.changeDialogDisp} onSubmit={this.onSubmit}\n//             fields={fields} fieldId={fields[0]._id} polygon={fields[0].location} center={fields[0].address.location} {...this.props}/>)\n//             : null \n//     }\n// </Container>","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/CropManagement/cropcontainer.js"],"names":["React","Responsive","Button","Grid","Segment","CropList","CropMenu","TimelineLabel","Component","AddCropForm","withTranslation","MenuItem","CropContainer","state","dialogDisp","cropType","props","croptypes","length","_id","seedType","seedtypes","cultivationType","cultivationtypes","fields","userFarms","filter","farm","currentcropcycles","find","cropCycle","farmId","snackbarOpen","menuActive","userCropsList","cropCurrentList","cropPastList","clickedIcon","t","moveCrop","source","cropCycleId","moveCropToPast","currentCropId","presentCropCycle","cropCurrentItem","isPast","editCropCycle","userId","token","changeDialogDisp","bool","setState","changeSnackbarOpen","changeActiveMenu","newActiveMenu","onClick","e","preventDefault","onSubmit","msg","addCropCycle","sendList","pastcropcycles","buttonEnabled","borderRadius","location","address"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Responsive, Button, Grid, Segment } from 'semantic-ui-react'\nimport CropList from './croplist'\nimport CropMenu from './cropmenu'\nimport TimelineLabel from \"../TimelineLabel/TimelineLabel\";\nimport './cropcontainer.scss'\nimport { Component } from 'react'\nimport AddCropForm from './addcropform'\nimport { withTranslation } from 'react-i18next'\nimport { MenuItem } from '@material-ui/core'\n\n\nclass CropContainer extends Component {\n    state = {\n        dialogDisp: false,\n        cropType: this.props.croptypes.length ? (this.props.croptypes[0]._id) : (\"\"),\n        seedType: this.props.seedtypes.length ? (this.props.seedtypes[0]._id) : (\"\"),\n        cultivationType: this.props.cultivationtypes.length ? (this.props.cultivationtypes[0]._id) : (\"\"),\n        fields: this.props.userFarms.filter(farm => {\n            return !!!this.props.currentcropcycles.find(cropCycle => cropCycle.farmId === farm._id)\n        }),\n        snackbarOpen: false,\n        menuActive: \"current\",\n        userCropsList: [],\n        cropCurrentList: [],\n        cropPastList: []\n    }\n\n    clickedIcon = () => {\n        return (\n            <MenuItem>\n                {this.props.t(\"movecrop\")}\n            </MenuItem>\n        )\n    }\n    moveCrop = (source, cropCycleId) => {\n        if (source === \"current\") {\n            this.moveCropToPast(cropCycleId)\n        }\n    }\n\n    moveCropToPast = (currentCropId) => {\n        const presentCropCycle = this.props.currentcropcycles.find(cropCurrentItem =>\n            cropCurrentItem._id === currentCropId)\n        presentCropCycle.isPast = true;\n        this.props.editCropCycle(presentCropCycle, this.props.userId, this.props.token)\n    }\n\n    changeDialogDisp = () => {\n        const cropType = this.props.croptypes.length ? (this.props.croptypes[0]._id) : (\"\")\n        const seedType = this.props.seedtypes.length ? (this.props.seedtypes[0]._id) : (\"\")\n        const cultivationType = this.props.cultivationtypes.length ? (this.props.cultivationtypes[0]._id) : (\"\")\n        const bool = this.state.dialogDisp\n        this.setState({ dialogDisp: !bool, cropType, seedType, cultivationType });\n    }\n    changeSnackbarOpen = () => {\n        const bool = this.state.snackbarOpen\n        this.setState({ snackbarOpen: !bool })\n    }\n    changeActiveMenu = (newActiveMenu) => {\n        this.setState({ menuActive: newActiveMenu })\n    }\n    onClick = (e) => {\n        e.preventDefault();\n        this.setState({ dialogDisp: true })\n        // return(\n        //     <AddCropForm/>\n        // )\n    }\n    onSubmit = (msg) => {\n        //e.preventDefault();\n        this.props.addCropCycle(msg, this.props.userId, this.props.token)\n        // this.setState({snackbarOpen: true})\n        // return (<Snackbar open={this.state.snackbarOpen} autoHideDuration={6000} onClose={this.changeSnackbarOpen}>\n        //     <Message\n        //         compact\n        //         content={msg}\n        //     />      \n        //     </Snackbar>);\n    }\n    render() {\n        const { t } = this.props;\n        const sendList = (this.state.menuActive === \"current\")\n            ? (this.props.currentcropcycles ? (this.props.currentcropcycles) : ([]))\n            : (this.props.pastcropcycles ? (this.props.pastcropcycles) : ([]));\n        const fields = this.props.userFarms.filter(farm => {\n            return !!!this.props.currentcropcycles.find(cropCycle => cropCycle.farmId === farm._id)\n        })\n        const buttonEnabled = fields.length > 0 ? (true) : (false);\n        return (\n            \n            <div>\n                <Responsive minWidth={1024}>\n                    <Grid container columns={2}>\n                        <Grid.Row className=\"mt-4\">\n                            <Grid.Column width={8} className=\"leftCropMenu\">\n                                <Segment raised style={{ borderRadius: \"12px\" }}>\n                                    <CropMenu menuActive={this.state.menuActive} changeActiveMenu={this.changeActiveMenu} />\n                                    \n                                        <CropList cropList={sendList} source={this.state.menuActive} moveCrop={this.moveCrop}\n                                            userFarms={this.props.userFarms} cropTypes={this.props.croptypes} seedTypes={this.props.seedtypes} />\n                                    \n                                    <Grid columns={2}>\n                                        <Grid.Column>\n                                        </Grid.Column>\n                                        <Grid.Column textAlign = \"center\">\n                                            {buttonEnabled ? (<Button color=\"green\" className=\"cropButton\" fluid onClick={(e) => this.onClick(e)}> {t('add-button')} </Button>)\n                                                : (<Button color=\"gray\" className=\"cropButton\" fluid disabled> {t('add-button')} </Button>)}\n                                        </Grid.Column>\n                                        <Grid.Column>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Segment>\n                                {\n                                    fields && fields.length > 0 ? (<AddCropForm open={this.state.dialogDisp} changeDialogDisp={this.changeDialogDisp} onSubmit={this.onSubmit}\n                                        fields={fields} fieldId={fields[0]._id} polygon={fields[0].location} center={fields[0].address.location} {...this.props} />)\n                                        : null\n                                }\n                            </Grid.Column>\n                            <Grid.Column width={7} className=\"rightCropMenu\">\n                                <TimelineLabel {...this.props} />\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Responsive>\n\n\n                <Responsive minWidth = {768} maxWidth = {1023.98}>\n                    <Grid container columns={2}>\n                        <Grid.Row className=\"mt-4\">\n                            <Grid.Column tablet = {8} className=\"leftCropMenu\">\n                                <Segment raised style={{ borderRadius: \"12px\" }}>\n                                    <CropMenu menuActive={this.state.menuActive} changeActiveMenu={this.changeActiveMenu} />\n                                    <CropList cropList={sendList} source={this.state.menuActive} moveCrop={this.moveCrop}\n                                        userFarms={this.props.userFarms} cropTypes={this.props.croptypes} seedTypes={this.props.seedtypes} />\n                                    <Grid columns={2}>\n                                        <Grid.Column>\n                                        </Grid.Column>\n                                        <Grid.Column textAlign = \"center\">\n                                            {buttonEnabled ? (<Button color=\"green\" className=\"cropButton\" fluid onClick={(e) => this.onClick(e)}> {t('add-button')} </Button>)\n                                                : (<Button color=\"gray\" className=\"cropButton\" fluid disabled> {t('add-button')} </Button>)}\n                                        </Grid.Column>\n                                        <Grid.Column>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Segment>\n                                {\n                                    fields && fields.length > 0 ? (<AddCropForm open={this.state.dialogDisp} changeDialogDisp={this.changeDialogDisp} onSubmit={this.onSubmit}\n                                        fields={fields} fieldId={fields[0]._id} polygon={fields[0].location} center={fields[0].address.location} {...this.props} />)\n                                        : null\n                                }\n                            </Grid.Column>\n                            <Grid.Column tablet={7} className=\"rightCropMenu\">\n                                <TimelineLabel {...this.props} />\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Responsive>\n                \n            </div>\n        );\n    }\n}\n\nexport default withTranslation('crop-management')(CropContainer);\n\n\n\n\n\n\n//     <Container>\n            //     <Segment>\n            //       <CropMenu menuActive={this.state.menuActive} changeActiveMenu={this.changeActiveMenu}/>\n            //       <CropList cropList={sendList} source={this.state.menuActive} moveCrop={this.moveCrop} \n            //       userFarms={this.props.userFarms} cropTypes={this.props.croptypes} seedTypes={this.props.seedtypes}/>\n            //       <Grid columns={3}>\n            //           <Grid.Column>\n            //           </Grid.Column>\n            //           <Grid.Column>\n            //             {buttonEnabled ? (<Button color=\"green\" fluid onClick={(e) => this.onClick(e)}> {t('add-button')} </Button>) \n            //             : (<Button color=\"gray\" fluid disabled> {t('add-button')} </Button>)}\n            //           </Grid.Column>\n            //           <Grid.Column>\n            //           </Grid.Column>\n            //       </Grid>\n            //     </Segment>\n            //     {\n            //         fields ? (<AddCropForm open={this.state.dialogDisp} changeDialogDisp={this.changeDialogDisp} onSubmit={this.onSubmit}\n            //             fields={fields} fieldId={fields[0]._id} polygon={fields[0].location} center={fields[0].address.location} {...this.props}/>)\n            //             : null \n            //     }\n            // </Container>"]},"metadata":{},"sourceType":"module"}