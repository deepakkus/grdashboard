{"ast":null,"code":"import _regeneratorRuntime from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Suspense,useEffect,useState}from\"react\";import{Segment,Container,Grid,Loader}from\"semantic-ui-react\";import Navbar from\"../Navbar/navbar\";import SearchBar from\"../SearchBar/SearchBar\";import PublicData from\"../PublicData/PublicData\";import Profile from\"../Profile/Profile\";import MainButton from\"../MainButton/MainButton\";import MapCard from\"../MapCard/MapCard\";import AddSensorLink from\"../AddSensorLink/AddSensorLink\";import SensorTable from\"../../components/SensorTable/sensortable\";import{useTranslation}from\"react-i18next\";import{getIdealRanges}from\"../../services/plantCard\";import{getPlantName}from\"../../utils/utilsFunctions\";var Sensors=function Sensors(props){var title=props.title,userDevices=props.devices.userDevices,getSensorsData=props.getSensorsData,ranges=props.ranges;var _useState=useState({ranges:{}}),_useState2=_slicedToArray(_useState,2),values=_useState2[0],setValues=_useState2[1];var _useTranslation=useTranslation(\"common\"),t=_useTranslation.t;var ids=\",14fbedaf-1b14-49f3-93ab-f3e405ab3e0d,20ac411f-4c09-409c-88a8-fe69594e2652\";useEffect(function(){document.title=t(props.title);setRanges();props.getIdealRange(\"generic\");if(userDevices&&userDevices.length){getSensorsData(userDevices.map(function(d){return d.deviceId;}).join());}console.log(\"getSensorsData\");},[title]);var selected=function selected(id){var sensors=props.sensors;var sensor=sensors.filter(function(sensor){return sensor.deviceId===id;});if(sensor[0]){return sensor[0];}else{return;}};var setRanges=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var sensor,markerLoc,plant,_ranges;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// TODO logic of finding the crop/plant\n// const plant = \"allium%20cepa\";\nsensor=selected(props.match.params.id);markerLoc=sensor&&[sensor.location.latitude,sensor.location.longitude];if(!sensor){_context.next=17;break;}plant=getPlantName(props.farms.userFarms,markerLoc,props.lookup.croptypes);if(!plant){_context.next=10;break;}_context.next=7;return getIdealRanges(plant);case 7:_context.t0=_context.sent;_context.next=13;break;case 10:_context.next=12;return getIdealRanges(\"generic\");case 12:_context.t0=_context.sent;case 13:_ranges=_context.t0;// props.getIdealRange(\"generic\");\nsetValues({ranges:_ranges});console.log({plant:plant});console.log({ranges:_ranges});case 17:case\"end\":return _context.stop();}}},_callee);}));return function setRanges(){return _ref.apply(this,arguments);};}();var getLatLong=function getLatLong(){// console.log(sensors);\nvar sensor=props.sensors.filter(function(sensor){return sensor.deviceId===props.match.params.id;})[0];var lat=sensor?sensor.location.latitude:0;var lon=sensor?sensor.location.longitude:0;return{lat:lat,lon:lon};};// console.log(\"values\", values.ranges);\n// const ranges = values.ranges;\nreturn/*#__PURE__*/React.createElement(Grid,{columns:3},/*#__PURE__*/React.createElement(Grid.Row,null,/*#__PURE__*/React.createElement(Grid.Column,{width:1},/*#__PURE__*/React.createElement(Navbar,{active:\"sensors\",defaultsensor:props.sensors&&props.sensors[0]?props.sensors[0].deviceId:undefined})),/*#__PURE__*/React.createElement(Suspense,{fallback:\"loading\"},/*#__PURE__*/React.createElement(Grid.Column,{width:11},/*#__PURE__*/React.createElement(\"div\",{className:\"midcontainer\"},/*#__PURE__*/React.createElement(SearchBar,props),/*#__PURE__*/React.createElement(Segment,{raised:true,className:\"SenseMidSection\"},/*#__PURE__*/React.createElement(Grid,{columns:1},/*#__PURE__*/React.createElement(Grid.Column,{className:\"p-0 m-0\"},/*#__PURE__*/React.createElement(SensorTable,Object.assign({ranges:ranges,sensor:selected(props.match.params.id),firstSensor:props.sensors[0]&&props.sensors[0],match:props.match},props))))))),/*#__PURE__*/React.createElement(Grid.Column,{width:4,className:\"rightcontainer\"},/*#__PURE__*/React.createElement(Profile,{className:\"Profile\"}),/*#__PURE__*/React.createElement(MapCard,props),/*#__PURE__*/React.createElement(AddSensorLink,props),/*#__PURE__*/React.createElement(PublicData,Object.assign({},props,{latlng:getLatLong()}))))));};export default Sensors;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/Page/Sensors.js"],"names":["React","Suspense","useEffect","useState","Segment","Container","Grid","Loader","Navbar","SearchBar","PublicData","Profile","MainButton","MapCard","AddSensorLink","SensorTable","useTranslation","getIdealRanges","getPlantName","Sensors","props","title","userDevices","devices","getSensorsData","ranges","values","setValues","t","ids","document","setRanges","getIdealRange","length","map","d","deviceId","join","console","log","selected","id","sensors","sensor","filter","match","params","markerLoc","location","latitude","longitude","plant","farms","userFarms","lookup","croptypes","getLatLong","lat","lon","undefined"],"mappings":"8fAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,QAArC,KAAqD,OAArD,CACA,OAASC,OAAT,CAAkBC,SAAlB,CAA6BC,IAA7B,CAAmCC,MAAnC,KAAiD,mBAAjD,CACA,MAAOC,CAAAA,MAAP,KAAmB,kBAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CACA,MAAOC,CAAAA,aAAP,KAA0B,gCAA1B,CACA,MAAOC,CAAAA,WAAP,KAAwB,0CAAxB,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,OAASC,cAAT,KAA+B,0BAA/B,CACA,OAASC,YAAT,KAA6B,4BAA7B,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,IAEvBC,CAAAA,KAFuB,CAMrBD,KANqB,CAEvBC,KAFuB,CAGZC,WAHY,CAMrBF,KANqB,CAGvBG,OAHuB,CAGZD,WAHY,CAIvBE,cAJuB,CAMrBJ,KANqB,CAIvBI,cAJuB,CAKvBC,MALuB,CAMrBL,KANqB,CAKvBK,MALuB,eAOGtB,QAAQ,CAAC,CACnCsB,MAAM,CAAE,EAD2B,CAAD,CAPX,wCAOlBC,MAPkB,eAOVC,SAPU,mCAUXX,cAAc,CAAC,QAAD,CAVH,CAUjBY,CAViB,iBAUjBA,CAViB,CAWzB,GAAMC,CAAAA,GAAG,CACP,4EADF,CAEA3B,SAAS,CAAC,UAAM,CACd4B,QAAQ,CAACT,KAAT,CAAiBO,CAAC,CAACR,KAAK,CAACC,KAAP,CAAlB,CACAU,SAAS,GACTX,KAAK,CAACY,aAAN,CAAoB,SAApB,EACA,GAAIV,WAAW,EAAIA,WAAW,CAACW,MAA/B,CAAuC,CACrCT,cAAc,CAACF,WAAW,CAACY,GAAZ,CAAgB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,QAAT,EAAhB,EAAmCC,IAAnC,EAAD,CAAd,CACD,CACDC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EACD,CARQ,CAQN,CAAClB,KAAD,CARM,CAAT,CAUA,GAAMmB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,EAAD,CAAQ,CACvB,GAAIC,CAAAA,OAAO,CAAGtB,KAAK,CAACsB,OAApB,CACA,GAAMC,CAAAA,MAAM,CAAGD,OAAO,CAACE,MAAR,CAAe,SAACD,MAAD,CAAY,CACxC,MAAOA,CAAAA,MAAM,CAACP,QAAP,GAAoBK,EAA3B,CACD,CAFc,CAAf,CAGA,GAAIE,MAAM,CAAC,CAAD,CAAV,CAAe,CACb,MAAOA,CAAAA,MAAM,CAAC,CAAD,CAAb,CACD,CAFD,IAEO,CACL,OACD,CACF,CAVD,CAYA,GAAMZ,CAAAA,SAAS,0FAAG,sKAChB;AACA;AACMY,MAHU,CAGDH,QAAQ,CAACpB,KAAK,CAACyB,KAAN,CAAYC,MAAZ,CAAmBL,EAApB,CAHP,CAIVM,SAJU,CAIEJ,MAAM,EAAI,CAC1BA,MAAM,CAACK,QAAP,CAAgBC,QADU,CAE1BN,MAAM,CAACK,QAAP,CAAgBE,SAFU,CAJZ,KASZP,MATY,0BAURQ,KAVQ,CAUAjC,YAAY,CACxBE,KAAK,CAACgC,KAAN,CAAYC,SADY,CAExBN,SAFwB,CAGxB3B,KAAK,CAACkC,MAAN,CAAaC,SAHW,CAVZ,KAeCJ,KAfD,gDAgBJlC,CAAAA,cAAc,CAACkC,KAAD,CAhBV,wFAiBJlC,CAAAA,cAAc,CAAC,SAAD,CAjBV,2CAeRQ,OAfQ,aAmBd;AAEAE,SAAS,CAAC,CAAEF,MAAM,CAANA,OAAF,CAAD,CAAT,CACAa,OAAO,CAACC,GAAR,CAAY,CAAEY,KAAK,CAALA,KAAF,CAAZ,EACAb,OAAO,CAACC,GAAR,CAAY,CAAEd,MAAM,CAANA,OAAF,CAAZ,EAvBc,uDAAH,kBAATM,CAAAA,SAAS,0CAAf,CA2BA,GAAMyB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB;AACA,GAAMb,CAAAA,MAAM,CAAGvB,KAAK,CAACsB,OAAN,CAAcE,MAAd,CACb,SAACD,MAAD,QAAYA,CAAAA,MAAM,CAACP,QAAP,GAAoBhB,KAAK,CAACyB,KAAN,CAAYC,MAAZ,CAAmBL,EAAnD,EADa,EAEb,CAFa,CAAf,CAGA,GAAMgB,CAAAA,GAAG,CAAGd,MAAM,CAAGA,MAAM,CAACK,QAAP,CAAgBC,QAAnB,CAA8B,CAAhD,CACA,GAAMS,CAAAA,GAAG,CAAGf,MAAM,CAAGA,MAAM,CAACK,QAAP,CAAgBE,SAAnB,CAA+B,CAAjD,CACA,MAAO,CAAEO,GAAG,CAAHA,GAAF,CAAOC,GAAG,CAAHA,GAAP,CAAP,CACD,CARD,CAUA;AACA;AACA,mBACE,oBAAC,IAAD,EAAM,OAAO,CAAE,CAAf,eACE,oBAAC,IAAD,CAAM,GAAN,mBACE,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,CAApB,eAEI,oBAAC,MAAD,EACE,MAAM,CAAC,SADT,CAEE,aAAa,CACXtC,KAAK,CAACsB,OAAN,EAAiBtB,KAAK,CAACsB,OAAN,CAAc,CAAd,CAAjB,CACItB,KAAK,CAACsB,OAAN,CAAc,CAAd,EAAiBN,QADrB,CAEIuB,SALR,EAFJ,CADF,cAaE,oBAAC,QAAD,EAAU,QAAQ,CAAC,SAAnB,eACE,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,EAApB,eACE,2BAAK,SAAS,CAAC,cAAf,eACE,oBAAC,SAAD,CAAevC,KAAf,CADF,cAGI,oBAAC,OAAD,EAAS,MAAM,KAAf,CAAgB,SAAS,CAAC,iBAA1B,eACE,oBAAC,IAAD,EAAM,OAAO,CAAI,CAAjB,eACE,oBAAC,IAAD,CAAM,MAAN,EAAa,SAAS,CAAC,SAAvB,eACE,oBAAC,WAAD,gBACE,MAAM,CAAEK,MADV,CAEE,MAAM,CAAEe,QAAQ,CAACpB,KAAK,CAACyB,KAAN,CAAYC,MAAZ,CAAmBL,EAApB,CAFlB,CAGE,WAAW,CAAErB,KAAK,CAACsB,OAAN,CAAc,CAAd,GAAoBtB,KAAK,CAACsB,OAAN,CAAc,CAAd,CAHnC,CAIE,KAAK,CAAEtB,KAAK,CAACyB,KAJf,EAKMzB,KALN,EADF,CADF,CADF,CAHJ,CADF,CADF,cAqBE,oBAAC,IAAD,CAAM,MAAN,EAAa,KAAK,CAAE,CAApB,CAAuB,SAAS,CAAC,gBAAjC,eAEI,oBAAC,OAAD,EAAS,SAAS,CAAC,SAAnB,EAFJ,cAGI,oBAAC,OAAD,CAAaA,KAAb,CAHJ,cAII,oBAAC,aAAD,CAAmBA,KAAnB,CAJJ,cAKI,oBAAC,UAAD,kBAAgBA,KAAhB,EAAuB,MAAM,CAAEoC,UAAU,EAAzC,GALJ,CArBF,CAbF,CADF,CADF,CAmDD,CA7HD,CA+HA,cAAerC,CAAAA,OAAf","sourcesContent":["import React, { Suspense, useEffect, useState } from \"react\";\nimport { Segment, Container, Grid, Loader } from \"semantic-ui-react\";\nimport Navbar from \"../Navbar/navbar\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport PublicData from \"../PublicData/PublicData\";\nimport Profile from \"../Profile/Profile\";\nimport MainButton from \"../MainButton/MainButton\";\nimport MapCard from \"../MapCard/MapCard\";\nimport AddSensorLink from \"../AddSensorLink/AddSensorLink\";\nimport SensorTable from \"../../components/SensorTable/sensortable\";\nimport { useTranslation } from \"react-i18next\";\nimport { getIdealRanges } from \"../../services/plantCard\";\nimport { getPlantName } from \"../../utils/utilsFunctions\";\n\nconst Sensors = (props) => {\n  const {\n    title,\n    devices: { userDevices },\n    getSensorsData,\n    ranges,\n  } = props;\n  const [values, setValues] = useState({\n    ranges: {},\n  });\n  const { t } = useTranslation(\"common\");\n  const ids =\n    \",14fbedaf-1b14-49f3-93ab-f3e405ab3e0d,20ac411f-4c09-409c-88a8-fe69594e2652\";\n  useEffect(() => {\n    document.title = t(props.title);\n    setRanges();\n    props.getIdealRange(\"generic\");\n    if (userDevices && userDevices.length) {\n      getSensorsData(userDevices.map((d) => d.deviceId).join());\n    }\n    console.log(\"getSensorsData\");\n  }, [title]);\n\n  const selected = (id) => {\n    let sensors = props.sensors;\n    const sensor = sensors.filter((sensor) => {\n      return sensor.deviceId === id;\n    });\n    if (sensor[0]) {\n      return sensor[0];\n    } else {\n      return;\n    }\n  };\n\n  const setRanges = async () => {\n    // TODO logic of finding the crop/plant\n    // const plant = \"allium%20cepa\";\n    const sensor = selected(props.match.params.id);\n    const markerLoc = sensor && [\n      sensor.location.latitude,\n      sensor.location.longitude,\n    ];\n\n    if (sensor) {\n      const plant = getPlantName(\n        props.farms.userFarms,\n        markerLoc,\n        props.lookup.croptypes\n      );\n      const ranges = plant\n        ? await getIdealRanges(plant)\n        : await getIdealRanges(\"generic\");\n\n      // props.getIdealRange(\"generic\");\n\n      setValues({ ranges });\n      console.log({ plant });\n      console.log({ ranges });\n    }\n  };\n\n  const getLatLong = () => {\n    // console.log(sensors);\n    const sensor = props.sensors.filter(\n      (sensor) => sensor.deviceId === props.match.params.id\n    )[0];\n    const lat = sensor ? sensor.location.latitude : 0;\n    const lon = sensor ? sensor.location.longitude : 0;\n    return { lat, lon };\n  };\n\n  // console.log(\"values\", values.ranges);\n  // const ranges = values.ranges;\n  return (\n    <Grid columns={3}>\n      <Grid.Row>\n        <Grid.Column width={1}>\n          {/* <Container className=\"leftcontainer\"> */}\n            <Navbar\n              active=\"sensors\"\n              defaultsensor={\n                props.sensors && props.sensors[0]\n                  ? props.sensors[0].deviceId\n                  : undefined\n              }\n            />\n          {/* </Container> */}\n        </Grid.Column>\n        <Suspense fallback=\"loading\">\n          <Grid.Column width={11}>\n            <div className=\"midcontainer\">\n              <SearchBar {...props} />\n              {/* <Container fluid> */}\n                <Segment raised className=\"SenseMidSection\">\n                  <Grid columns = {1}>\n                    <Grid.Column className=\"p-0 m-0\">\n                      <SensorTable\n                        ranges={ranges}\n                        sensor={selected(props.match.params.id)}\n                        firstSensor={props.sensors[0] && props.sensors[0]}\n                        match={props.match}\n                        {...props}\n                      />\n                    </Grid.Column>\n                  </Grid>\n                </Segment>\n              {/* </Container> */}\n            </div>\n          </Grid.Column>\n          <Grid.Column width={4} className=\"rightcontainer\">\n            {/* <Container> */}\n              <Profile className=\"Profile\" />\n              <MapCard {...props} />\n              <AddSensorLink {...props} />\n              <PublicData {...props} latlng={getLatLong()} />\n              {/* <MainButton className=\"MainButton\" {...props}>\n                {t(\"ADD_ACTIVITY\")}\n              </MainButton> */}\n            {/* </Container> */}\n          </Grid.Column>\n        </Suspense>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default Sensors;\n"]},"metadata":{},"sourceType":"module"}