{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/CropManagement/cropcontainer.js\";\nimport React from 'react';\nimport { Responsive, Button, Grid, Segment } from 'semantic-ui-react';\nimport CropList from './croplist';\nimport CropMenu from './cropmenu';\nimport TimelineLabel from \"../TimelineLabel/TimelineLabel\";\nimport './cropcontainer.scss';\nimport { Component } from 'react';\nimport AddCropForm from './addcropform';\nimport { withTranslation } from 'react-i18next';\nimport { MenuItem } from '@material-ui/core';\n\nclass CropContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dialogDisp: false,\n      cropType: this.props.croptypes.length ? this.props.croptypes[0]._id : \"\",\n      seedType: this.props.seedtypes.length ? this.props.seedtypes[0]._id : \"\",\n      cultivationType: this.props.cultivationtypes.length ? this.props.cultivationtypes[0]._id : \"\",\n      fields: this.props.userFarms.filter(farm => {\n        return !!!this.props.currentcropcycles.find(cropCycle => cropCycle.farmId === farm._id);\n      }),\n      snackbarOpen: false,\n      menuActive: \"current\",\n      userCropsList: [],\n      cropCurrentList: [],\n      cropPastList: []\n    };\n\n    this.clickedIcon = () => {\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }\n      }, this.props.t(\"movecrop\"));\n    };\n\n    this.moveCrop = (source, cropCycleId) => {\n      if (source === \"current\") {\n        this.moveCropToPast(cropCycleId);\n      }\n    };\n\n    this.moveCropToPast = currentCropId => {\n      const presentCropCycle = this.props.currentcropcycles.find(cropCurrentItem => cropCurrentItem._id === currentCropId);\n      presentCropCycle.isPast = true;\n      this.props.editCropCycle(presentCropCycle, this.props.userId, this.props.token);\n    };\n\n    this.changeDialogDisp = () => {\n      const cropType = this.props.croptypes.length ? this.props.croptypes[0]._id : \"\";\n      const seedType = this.props.seedtypes.length ? this.props.seedtypes[0]._id : \"\";\n      const cultivationType = this.props.cultivationtypes.length ? this.props.cultivationtypes[0]._id : \"\";\n      const bool = this.state.dialogDisp;\n      this.setState({\n        dialogDisp: !bool,\n        cropType,\n        seedType,\n        cultivationType\n      });\n    };\n\n    this.changeSnackbarOpen = () => {\n      const bool = this.state.snackbarOpen;\n      this.setState({\n        snackbarOpen: !bool\n      });\n    };\n\n    this.changeActiveMenu = newActiveMenu => {\n      this.setState({\n        menuActive: newActiveMenu\n      });\n    };\n\n    this.onClick = e => {\n      e.preventDefault();\n      this.setState({\n        dialogDisp: true\n      }); // return(\n      //     <AddCropForm/>\n      // )\n    };\n\n    this.onSubmit = msg => {\n      //e.preventDefault();\n      this.props.addCropCycle(msg, this.props.userId, this.props.token); // this.setState({snackbarOpen: true})\n      // return (<Snackbar open={this.state.snackbarOpen} autoHideDuration={6000} onClose={this.changeSnackbarOpen}>\n      //     <Message\n      //         compact\n      //         content={msg}\n      //     />      \n      //     </Snackbar>);\n    };\n  }\n\n  render() {\n    const {\n      t\n    } = this.props;\n    const sendList = this.state.menuActive === \"current\" ? this.props.currentcropcycles ? this.props.currentcropcycles : [] : this.props.pastcropcycles ? this.props.pastcropcycles : [];\n    const fields = this.props.userFarms.filter(farm => {\n      return !!!this.props.currentcropcycles.find(cropCycle => cropCycle.farmId === farm._id);\n    });\n    const buttonEnabled = fields.length > 0 ? true : false;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Responsive, {\n      minWidth: 768,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 8,\n      className: \"leftCropMenu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      raised: true,\n      style: {\n        borderRadius: \"12px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CropMenu, {\n      menuActive: this.state.menuActive,\n      changeActiveMenu: this.changeActiveMenu,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(CropList, {\n      cropList: sendList,\n      source: this.state.menuActive,\n      moveCrop: this.moveCrop,\n      userFarms: this.props.userFarms,\n      cropTypes: this.props.croptypes,\n      seedTypes: this.props.seedtypes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 41\n      }\n    }, buttonEnabled ? /*#__PURE__*/React.createElement(Button, {\n      color: \"green\",\n      className: \"cropButton\",\n      fluid: true,\n      onClick: e => this.onClick(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 63\n      }\n    }, \" \", t('add-button'), \" \") : /*#__PURE__*/React.createElement(Button, {\n      color: \"gray\",\n      className: \"cropButton\",\n      fluid: true,\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 52\n      }\n    }, \" \", t('add-button'), \" \")), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 41\n      }\n    }))), fields ? /*#__PURE__*/React.createElement(AddCropForm, Object.assign({\n      open: this.state.dialogDisp,\n      changeDialogDisp: this.changeDialogDisp,\n      onSubmit: this.onSubmit,\n      fields: fields,\n      fieldId: fields[0]._id,\n      polygon: fields[0].location,\n      center: fields[0].address.location\n    }, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 47\n      }\n    })) : null), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 7,\n      className: \"rightCropMenu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TimelineLabel, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 33\n      }\n    })))))));\n  }\n\n}\n\nexport default withTranslation('crop-management')(CropContainer); //     <Container>\n//     <Segment>\n//       <CropMenu menuActive={this.state.menuActive} changeActiveMenu={this.changeActiveMenu}/>\n//       <CropList cropList={sendList} source={this.state.menuActive} moveCrop={this.moveCrop} \n//       userFarms={this.props.userFarms} cropTypes={this.props.croptypes} seedTypes={this.props.seedtypes}/>\n//       <Grid columns={3}>\n//           <Grid.Column>\n//           </Grid.Column>\n//           <Grid.Column>\n//             {buttonEnabled ? (<Button color=\"green\" fluid onClick={(e) => this.onClick(e)}> {t('add-button')} </Button>) \n//             : (<Button color=\"gray\" fluid disabled> {t('add-button')} </Button>)}\n//           </Grid.Column>\n//           <Grid.Column>\n//           </Grid.Column>\n//       </Grid>\n//     </Segment>\n//     {\n//         fields ? (<AddCropForm open={this.state.dialogDisp} changeDialogDisp={this.changeDialogDisp} onSubmit={this.onSubmit}\n//             fields={fields} fieldId={fields[0]._id} polygon={fields[0].location} center={fields[0].address.location} {...this.props}/>)\n//             : null \n//     }\n// </Container>","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/CropManagement/cropcontainer.js"],"names":["React","Responsive","Button","Grid","Segment","CropList","CropMenu","TimelineLabel","Component","AddCropForm","withTranslation","MenuItem","CropContainer","state","dialogDisp","cropType","props","croptypes","length","_id","seedType","seedtypes","cultivationType","cultivationtypes","fields","userFarms","filter","farm","currentcropcycles","find","cropCycle","farmId","snackbarOpen","menuActive","userCropsList","cropCurrentList","cropPastList","clickedIcon","t","moveCrop","source","cropCycleId","moveCropToPast","currentCropId","presentCropCycle","cropCurrentItem","isPast","editCropCycle","userId","token","changeDialogDisp","bool","setState","changeSnackbarOpen","changeActiveMenu","newActiveMenu","onClick","e","preventDefault","onSubmit","msg","addCropCycle","render","sendList","pastcropcycles","buttonEnabled","borderRadius","location","address"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Responsive, Button, Grid, Segment } from 'semantic-ui-react'\nimport CropList from './croplist'\nimport CropMenu from './cropmenu'\nimport TimelineLabel from \"../TimelineLabel/TimelineLabel\";\nimport './cropcontainer.scss'\nimport { Component } from 'react'\nimport AddCropForm from './addcropform'\nimport { withTranslation } from 'react-i18next'\nimport { MenuItem } from '@material-ui/core'\n\n\nclass CropContainer extends Component {\n    state = {\n        dialogDisp: false,\n        cropType: this.props.croptypes.length ? (this.props.croptypes[0]._id) : (\"\"),\n        seedType: this.props.seedtypes.length ? (this.props.seedtypes[0]._id) : (\"\"),\n        cultivationType: this.props.cultivationtypes.length ? (this.props.cultivationtypes[0]._id) : (\"\"),\n        fields: this.props.userFarms.filter(farm => {\n            return !!!this.props.currentcropcycles.find(cropCycle => cropCycle.farmId === farm._id)\n        }),\n        snackbarOpen: false,\n        menuActive: \"current\",\n        userCropsList: [],\n        cropCurrentList: [],\n        cropPastList: []\n    }\n\n    clickedIcon = () => {\n        return (\n            <MenuItem>\n                {this.props.t(\"movecrop\")}\n            </MenuItem>\n        )\n    }\n    moveCrop = (source, cropCycleId) => {\n        if (source === \"current\") {\n            this.moveCropToPast(cropCycleId)\n        }\n    }\n\n    moveCropToPast = (currentCropId) => {\n        const presentCropCycle = this.props.currentcropcycles.find(cropCurrentItem =>\n            cropCurrentItem._id === currentCropId)\n        presentCropCycle.isPast = true;\n        this.props.editCropCycle(presentCropCycle, this.props.userId, this.props.token)\n    }\n\n    changeDialogDisp = () => {\n        const cropType = this.props.croptypes.length ? (this.props.croptypes[0]._id) : (\"\")\n        const seedType = this.props.seedtypes.length ? (this.props.seedtypes[0]._id) : (\"\")\n        const cultivationType = this.props.cultivationtypes.length ? (this.props.cultivationtypes[0]._id) : (\"\")\n        const bool = this.state.dialogDisp\n        this.setState({ dialogDisp: !bool, cropType, seedType, cultivationType });\n    }\n    changeSnackbarOpen = () => {\n        const bool = this.state.snackbarOpen\n        this.setState({ snackbarOpen: !bool })\n    }\n    changeActiveMenu = (newActiveMenu) => {\n        this.setState({ menuActive: newActiveMenu })\n    }\n    onClick = (e) => {\n        e.preventDefault();\n        this.setState({ dialogDisp: true })\n        // return(\n        //     <AddCropForm/>\n        // )\n    }\n    onSubmit = (msg) => {\n        //e.preventDefault();\n        this.props.addCropCycle(msg, this.props.userId, this.props.token)\n        // this.setState({snackbarOpen: true})\n        // return (<Snackbar open={this.state.snackbarOpen} autoHideDuration={6000} onClose={this.changeSnackbarOpen}>\n        //     <Message\n        //         compact\n        //         content={msg}\n        //     />      \n        //     </Snackbar>);\n    }\n    render() {\n        const { t } = this.props;\n        const sendList = (this.state.menuActive === \"current\")\n            ? (this.props.currentcropcycles ? (this.props.currentcropcycles) : ([]))\n            : (this.props.pastcropcycles ? (this.props.pastcropcycles) : ([]));\n        const fields = this.props.userFarms.filter(farm => {\n            return !!!this.props.currentcropcycles.find(cropCycle => cropCycle.farmId === farm._id)\n        })\n        const buttonEnabled = fields.length > 0 ? (true) : (false);\n        return (\n            \n            <div>\n                <Responsive minWidth={768}>\n                    <Grid columns={2}>\n                        <Grid.Row className=\"mt-4\">\n                            <Grid.Column width={8} className=\"leftCropMenu\">\n                                <Segment raised style={{ borderRadius: \"12px\" }}>\n                                    <CropMenu menuActive={this.state.menuActive} changeActiveMenu={this.changeActiveMenu} />\n                                    <CropList cropList={sendList} source={this.state.menuActive} moveCrop={this.moveCrop}\n                                        userFarms={this.props.userFarms} cropTypes={this.props.croptypes} seedTypes={this.props.seedtypes} />\n                                    <Grid columns={2}>\n                                        <Grid.Column>\n                                        </Grid.Column>\n                                        <Grid.Column>\n                                            {buttonEnabled ? (<Button color=\"green\" className=\"cropButton\" fluid onClick={(e) => this.onClick(e)}> {t('add-button')} </Button>)\n                                                : (<Button color=\"gray\" className=\"cropButton\" fluid disabled> {t('add-button')} </Button>)}\n                                        </Grid.Column>\n                                        <Grid.Column>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Segment>\n                                {\n                                    fields ? (<AddCropForm open={this.state.dialogDisp} changeDialogDisp={this.changeDialogDisp} onSubmit={this.onSubmit}\n                                        fields={fields} fieldId={fields[0]._id} polygon={fields[0].location} center={fields[0].address.location} {...this.props} />)\n                                        : null\n                                }\n                            </Grid.Column>\n                            <Grid.Column width={7} className=\"rightCropMenu\">\n                                <TimelineLabel {...this.props} />\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Responsive>\n                \n            </div>\n        );\n    }\n}\n\nexport default withTranslation('crop-management')(CropContainer);\n\n\n\n\n\n\n//     <Container>\n            //     <Segment>\n            //       <CropMenu menuActive={this.state.menuActive} changeActiveMenu={this.changeActiveMenu}/>\n            //       <CropList cropList={sendList} source={this.state.menuActive} moveCrop={this.moveCrop} \n            //       userFarms={this.props.userFarms} cropTypes={this.props.croptypes} seedTypes={this.props.seedtypes}/>\n            //       <Grid columns={3}>\n            //           <Grid.Column>\n            //           </Grid.Column>\n            //           <Grid.Column>\n            //             {buttonEnabled ? (<Button color=\"green\" fluid onClick={(e) => this.onClick(e)}> {t('add-button')} </Button>) \n            //             : (<Button color=\"gray\" fluid disabled> {t('add-button')} </Button>)}\n            //           </Grid.Column>\n            //           <Grid.Column>\n            //           </Grid.Column>\n            //       </Grid>\n            //     </Segment>\n            //     {\n            //         fields ? (<AddCropForm open={this.state.dialogDisp} changeDialogDisp={this.changeDialogDisp} onSubmit={this.onSubmit}\n            //             fields={fields} fieldId={fields[0]._id} polygon={fields[0].location} center={fields[0].address.location} {...this.props}/>)\n            //             : null \n            //     }\n            // </Container>"]},"metadata":{},"sourceType":"module"}