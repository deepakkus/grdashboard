{"ast":null,"code":"import _slicedToArray from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{Map,TileLayer,Marker,FeatureGroup,Polygon}from\"react-leaflet\";import\"leaflet/dist/leaflet.css\";import React,{useEffect,useRef,useState}from\"react\";import\"leaflet-draw\";import{EditControl}from\"react-leaflet-draw\";var createPolygon=function createPolygon(latlngArray){var polygon=[];if(latlngArray&&latlngArray[0]){var _iterator=_createForOfIteratorHelper(latlngArray[0]),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var latlng=_step.value;polygon.push([latlng.lat,latlng.lng]);}}catch(err){_iterator.e(err);}finally{_iterator.f();}polygon.push(polygon[0]);}// polygon is of format : [[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]\nreturn polygon;};/**\n * Map componenet that uses react-leaflet. This can be used as editable and readonly. For editable map, pass\n * onChange, editable(=true) center(eg: [51.508530, -0.076132]) and polygon if there is any value eg: edit a farm.\n * For readonly , pass polygon(eg: [[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]), center(matching one latlng or any nearby point of polygon) and editable=false in props.\n */var MapPolygon=function MapPolygon(props){var mapRef=useRef();var fgRef=null;var leafLetEl=null;var _useState=useState(props.center||[51.50853,-0.076132]),_useState2=_slicedToArray(_useState,2),center=_useState2[0],setCenter=_useState2[1];var onChange=function onChange(polygon){if(props.onChange){props.onChange(polygon);}};var onEdited=function onEdited(e){var polygons=[];e.layers.eachLayer(function(layer){polygons.push(createPolygon(layer.getLatLngs()));});onChange(polygons[0]);};var onDeleted=function onDeleted(e){onChange([]);};var onAdded=function onAdded(e){var added=e.layer;var polygon=createPolygon(added.getLatLngs());if(leafLetEl){leafLetEl.eachLayer(function(layer){if(layer._leaflet_id!==added._leaflet_id){leafLetEl.removeLayer(layer);// just so there is only one polygon at a time\n}});}onChange(polygon);};var setMapCenter=function setMapCenter(){setCenter(props.center);};useEffect(function(){if(center&&props.center&&JSON.stringify(center)!==JSON.stringify(props.center)){setMapCenter();}});var setFGRef=function setFGRef(ref){if(ref){fgRef=ref;leafLetEl=fgRef.leafletElement;}};var mapCenter=props.center||[51.50853,-0.076132];var polygon=props.polygon;if(polygon&&polygon.length){mapCenter=polygon[0];}var bounds;if(mapCenter&&mapCenter.length){bounds=[[mapCenter[0],mapCenter[1]],[mapCenter[0],mapCenter[1]]];}var editable=props.editable;var zoom=props.zoom||16;return/*#__PURE__*/React.createElement(\"div\",null,mapCenter&&/*#__PURE__*/React.createElement(Map,{className:props.className||\"map\",center:mapCenter,zoom:zoom,ref:mapRef,fitBounds:bounds},/*#__PURE__*/React.createElement(TileLayer,{attribution:\"google\",url:\"http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}\"}),/*#__PURE__*/React.createElement(FeatureGroup,{ref:function ref(_ref){return setFGRef(_ref);}},polygon&&polygon.length>0&&/*#__PURE__*/React.createElement(Polygon,{positions:polygon}),editable===true&&/*#__PURE__*/React.createElement(EditControl,{position:\"topright\",onEdited:onEdited,onCreated:onAdded,onDeleted:onDeleted,draw:{polygon:{allowIntersection:false,// Restricts shapes to simple polygons\ndrawError:{color:\"#e1e100\",// Color the shape will turn when intersects\nmessage:\"<strong>Oh snap!<strong> you can't draw that!\"// Message that will show when intersect\n},shapeOptions:{color:\"#97009c\"}},polyline:false,circle:false,// Turns off this drawing tool\nrectangle:false,marker:false}}))));};export default MapPolygon;","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/MapPolygon/MapPolygon.js"],"names":["Map","TileLayer","Marker","FeatureGroup","Polygon","React","useEffect","useRef","useState","EditControl","createPolygon","latlngArray","polygon","latlng","push","lat","lng","MapPolygon","props","mapRef","fgRef","leafLetEl","center","setCenter","onChange","onEdited","e","polygons","layers","eachLayer","layer","getLatLngs","onDeleted","onAdded","added","_leaflet_id","removeLayer","setMapCenter","JSON","stringify","setFGRef","ref","leafletElement","mapCenter","length","bounds","editable","zoom","className","allowIntersection","drawError","color","message","shapeOptions","polyline","circle","rectangle","marker"],"mappings":"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","sourcesContent":["import { Map, TileLayer, Marker, FeatureGroup, Polygon } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"leaflet-draw\";\nimport { EditControl } from \"react-leaflet-draw\";\n\nconst createPolygon = (latlngArray) => {\n  const polygon = [];\n  if (latlngArray && latlngArray[0]) {\n    for (const latlng of latlngArray[0]) {\n      polygon.push([latlng.lat, latlng.lng]);\n    }\n    polygon.push(polygon[0]);\n  }\n  // polygon is of format : [[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]\n  return polygon;\n};\n\n/**\n * Map componenet that uses react-leaflet. This can be used as editable and readonly. For editable map, pass\n * onChange, editable(=true) center(eg: [51.508530, -0.076132]) and polygon if there is any value eg: edit a farm.\n * For readonly , pass polygon(eg: [[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]), center(matching one latlng or any nearby point of polygon) and editable=false in props.\n */\nconst MapPolygon = (props) => {\n  const mapRef = useRef();\n  let fgRef = null;\n  let leafLetEl = null;\n\n  const [center, setCenter] = useState(props.center || [51.50853, -0.076132]);\n\n  const onChange = (polygon) => {\n    if (props.onChange) {\n      props.onChange(polygon);\n    }\n  };\n\n  const onEdited = (e) => {\n    const polygons = [];\n    e.layers.eachLayer((layer) => {\n      polygons.push(createPolygon(layer.getLatLngs()));\n    });\n    onChange(polygons[0]);\n  };\n  const onDeleted = (e) => {\n    onChange([]);\n  };\n  const onAdded = (e) => {\n    const added = e.layer;\n    const polygon = createPolygon(added.getLatLngs());\n    if (leafLetEl) {\n      leafLetEl.eachLayer((layer) => {\n        if (layer._leaflet_id !== added._leaflet_id) {\n          leafLetEl.removeLayer(layer); // just so there is only one polygon at a time\n        }\n      });\n    }\n    onChange(polygon);\n  };\n  const setMapCenter = () => {\n    setCenter(props.center);\n  };\n\n  useEffect(() => {\n    if (\n      center &&\n      props.center &&\n      JSON.stringify(center) !== JSON.stringify(props.center)\n    ) {\n      setMapCenter();\n    }\n  });\n\n  const setFGRef = (ref) => {\n    if (ref) {\n      fgRef = ref;\n      leafLetEl = fgRef.leafletElement;\n    }\n  };\n  let mapCenter = props.center || [51.50853, -0.076132];\n\n  const polygon = props.polygon;\n  if (polygon && polygon.length) {\n    mapCenter = polygon[0];\n  }\n  let bounds;\n  if (mapCenter && mapCenter.length) {\n    bounds = [\n      [mapCenter[0], mapCenter[1]],\n      [mapCenter[0], mapCenter[1]],\n    ];\n  }\n\n  const editable = props.editable;\n  const zoom = props.zoom || 16;\n  return (\n    <div>\n      {mapCenter && (\n        <Map\n          className={props.className || \"map\"}\n          center={mapCenter}\n          zoom={zoom}\n          ref={mapRef}\n          fitBounds={bounds}\n        >\n          <TileLayer\n            attribution=\"google\"\n            url=\"http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}\"\n          />\n          {/* <Marker position={mapCenter || [51.50853, -0.076132]}></Marker> */}\n          <FeatureGroup ref={(ref) => setFGRef(ref)}>\n            {polygon && polygon.length > 0 && <Polygon positions={polygon} />}\n            {editable === true && (\n              <EditControl\n                position=\"topright\"\n                onEdited={onEdited}\n                onCreated={onAdded}\n                onDeleted={onDeleted}\n                draw={{\n                  polygon: {\n                    allowIntersection: false, // Restricts shapes to simple polygons\n                    drawError: {\n                      color: \"#e1e100\", // Color the shape will turn when intersects\n                      message: \"<strong>Oh snap!<strong> you can't draw that!\", // Message that will show when intersect\n                    },\n                    shapeOptions: {\n                      color: \"#97009c\",\n                    },\n                  },\n                  polyline: false,\n                  circle: false, // Turns off this drawing tool\n                  rectangle: false,\n                  marker: false,\n                }}\n              />\n            )}\n          </FeatureGroup>\n        </Map>\n      )}\n    </div>\n  );\n};\n\nexport default MapPolygon;\n"]},"metadata":{},"sourceType":"module"}