{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Settings from \"../components/Page/Settings\";\nimport { getSensorsData } from \"../actions/sensors\";\nimport { getWeatherData } from \"../actions/weather\";\nimport { getUserFarmCropCycles } from \"../actions/cropcycles\";\nimport { addFarm, editFarm } from \"../actions/farms\";\nimport { getIdealRange } from \"../actions/ranges\";\nimport { addActivity } from \"../actions/activities\";\n\nconst mapStateToProps = state => {\n  return {\n    title: \"Settings\",\n    // key of translation, not the translated text\n    userId: state.user.userId,\n    token: state.user.token,\n    userDevices: state.devices.userDevices,\n    sensors: state.sensors.sensormeasures,\n    userFarms: state.farms.userFarms,\n    lookup: state.lookup,\n    ranges: state.ranges,\n    history_data: state.history_data,\n    soiltypes: state.lookup.soiltypes,\n    terraintypes: state.lookup.terraintypes,\n    watersources: state.lookup.watersources,\n    croptypes: state.lookup.croptypes,\n    cultivationtypes: state.lookup.cultivationtypes,\n    activitytypes: state.lookup.activities,\n    currentcropcycles: state.cropCycles.userCurrentCropCycles,\n    userFarmCropCycles: state.cropCycles.userFarmCropCycle\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getSensorsData,\n  getWeatherData,\n  getUserFarmCropCycles,\n  addFarm,\n  editFarm,\n  getIdealRange,\n  addActivity\n})(Settings);","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/containers/Settings.js"],"names":["connect","Settings","getSensorsData","getWeatherData","getUserFarmCropCycles","addFarm","editFarm","getIdealRange","addActivity","mapStateToProps","state","title","userId","user","token","userDevices","devices","sensors","sensormeasures","userFarms","farms","lookup","ranges","history_data","soiltypes","terraintypes","watersources","croptypes","cultivationtypes","activitytypes","activities","currentcropcycles","cropCycles","userCurrentCropCycles","userFarmCropCycles","userFarmCropCycle"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,kBAAlC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,KAAK,EAAE,UADF;AACc;AACnBC,IAAAA,MAAM,EAAEF,KAAK,CAACG,IAAN,CAAWD,MAFd;AAGLE,IAAAA,KAAK,EAAEJ,KAAK,CAACG,IAAN,CAAWC,KAHb;AAILC,IAAAA,WAAW,EAAEL,KAAK,CAACM,OAAN,CAAcD,WAJtB;AAKLE,IAAAA,OAAO,EAAEP,KAAK,CAACO,OAAN,CAAcC,cALlB;AAMLC,IAAAA,SAAS,EAAET,KAAK,CAACU,KAAN,CAAYD,SANlB;AAOLE,IAAAA,MAAM,EAAEX,KAAK,CAACW,MAPT;AAQLC,IAAAA,MAAM,EAAEZ,KAAK,CAACY,MART;AASLC,IAAAA,YAAY,EAAEb,KAAK,CAACa,YATf;AAULC,IAAAA,SAAS,EAAEd,KAAK,CAACW,MAAN,CAAaG,SAVnB;AAWLC,IAAAA,YAAY,EAAEf,KAAK,CAACW,MAAN,CAAaI,YAXtB;AAYLC,IAAAA,YAAY,EAAEhB,KAAK,CAACW,MAAN,CAAaK,YAZtB;AAaLC,IAAAA,SAAS,EAAEjB,KAAK,CAACW,MAAN,CAAaM,SAbnB;AAcLC,IAAAA,gBAAgB,EAAElB,KAAK,CAACW,MAAN,CAAaO,gBAd1B;AAeLC,IAAAA,aAAa,EAAEnB,KAAK,CAACW,MAAN,CAAaS,UAfvB;AAgBLC,IAAAA,iBAAiB,EAAErB,KAAK,CAACsB,UAAN,CAAiBC,qBAhB/B;AAiBLC,IAAAA,kBAAkB,EAAExB,KAAK,CAACsB,UAAN,CAAiBG;AAjBhC,GAAP;AAmBD,CApBD;;AAsBA,eAAenC,OAAO,CAACS,eAAD,EAAkB;AACtCP,EAAAA,cADsC;AAEtCC,EAAAA,cAFsC;AAGtCC,EAAAA,qBAHsC;AAItCC,EAAAA,OAJsC;AAKtCC,EAAAA,QALsC;AAMtCC,EAAAA,aANsC;AAOtCC,EAAAA;AAPsC,CAAlB,CAAP,CAQZP,QARY,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport Settings from \"../components/Page/Settings\";\nimport { getSensorsData } from \"../actions/sensors\";\nimport { getWeatherData } from \"../actions/weather\";\nimport { getUserFarmCropCycles } from \"../actions/cropcycles\";\nimport { addFarm, editFarm } from \"../actions/farms\";\nimport { getIdealRange } from \"../actions/ranges\";\nimport { addActivity } from \"../actions/activities\";\n\nconst mapStateToProps = (state) => {\n  return {\n    title: \"Settings\", // key of translation, not the translated text\n    userId: state.user.userId,\n    token: state.user.token,\n    userDevices: state.devices.userDevices,\n    sensors: state.sensors.sensormeasures,\n    userFarms: state.farms.userFarms,\n    lookup: state.lookup,\n    ranges: state.ranges,\n    history_data: state.history_data,\n    soiltypes: state.lookup.soiltypes,\n    terraintypes: state.lookup.terraintypes,\n    watersources: state.lookup.watersources,\n    croptypes: state.lookup.croptypes,\n    cultivationtypes: state.lookup.cultivationtypes,\n    activitytypes: state.lookup.activities,\n    currentcropcycles: state.cropCycles.userCurrentCropCycles,\n    userFarmCropCycles: state.cropCycles.userFarmCropCycle,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getSensorsData,\n  getWeatherData,\n  getUserFarmCropCycles,\n  addFarm,\n  editFarm,\n  getIdealRange,\n  addActivity,\n})(Settings);\n"]},"metadata":{},"sourceType":"module"}