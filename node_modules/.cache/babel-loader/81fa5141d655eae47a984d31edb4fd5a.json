{"ast":null,"code":"var _jsxFileName = \"/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/SensorUpper/sensorupper.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Moment from \"react-moment\";\nimport { withTranslation } from \"react-i18next\";\nimport { Container, Grid, Dropdown } from \"semantic-ui-react\";\nimport iconLocation from \"../../images/icons/iconlocation.svg\";\nimport iconDate from \"../../images/icons/icontoday.svg\";\nimport iconedit from \"../../images/icons/iconedit.svg\";\nimport \"./sensorupper.scss\";\n\nclass SensorUpper extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [{\n        name: \"Sensor1\",\n        hw: \"ver v1.2019\",\n        sw: \"ver v2.4\",\n        upTime: \"188 hrs\",\n        lastModified: \"Today At 13h00\"\n      }, {\n        humidity: \"81\",\n        airTemp: \"35\",\n        solarRad: \"75\"\n      }]\n    };\n  }\n\n  render() {\n    const {\n      userDevices,\n      sensor\n    } = this.props;\n    console.log({\n      sensor\n    });\n    const deviceId = this.props.match && this.props.match.params ? this.props.match.params.id : \"\"; // translation react-i18next\n\n    const {\n      t\n    } = this.props; // TODO use the real data, use deviceName from userDevices\n\n    const versionStyle = {\n      color: \"gray\",\n      fontSize: 10,\n      margin: 0\n    };\n    const upTimeStyle = {\n      color: \"gray\",\n      fontSize: 14\n    };\n    const paramStyle = {\n      fontSize: 20,\n      color: \"#535353\",\n      fontWeight: \"bold\"\n    };\n    const paramsValStyle = {\n      fontSize: 35,\n      color: \"#0E7B3C\",\n      fontWeight: \"600\",\n      opacity: 0.7,\n      margin: 0\n    };\n    const paramTitleStyle = {\n      fontSize: 14,\n      color: \"#535353\",\n      fontWeight: \"bold\",\n      marginBottom: \"12px\"\n    };\n    const children = [];\n    userDevices.map(userDevice => {\n      children.push({\n        key: userDevice.deviceId,\n        text: userDevice.deviceName,\n        value: userDevice.deviceId,\n        content: /*#__PURE__*/React.createElement(Link, {\n          className: \"link\",\n          to: \"/sensors/\" + userDevice.deviceId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }\n        }, userDevice.deviceName)\n      });\n    });\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      className: \"sensorUpper m-0 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      columns: 2,\n      divided: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"leftpart\",\n      width: 8,\n      className: \"pl-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      columns: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 9,\n      style: {\n        margin: 0,\n        padding: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      textAlign: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"bold\", {\n      style: {\n        fontSize: 24\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 23\n      }\n    }, !userDevices.length ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 27\n      }\n    }, \"no sensors found in dropdown please select device from upove dropdown\") : /*#__PURE__*/React.createElement(Dropdown, {\n      inline: true,\n      header: \"sensors\",\n      options: children,\n      defaultValue: deviceId,\n      className: \"sensorDropdown\" // defaultValue={defaultOption}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 27\n      }\n    }))))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 7,\n      style: {\n        margin: 0,\n        padding: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      textAlign: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: upTimeStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, t(\"common:uptime\"), \":\", \" \", sensor ? sensor.device.uptime : \"_\")))), /*#__PURE__*/React.createElement(\"p\", {\n      style: versionStyle,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, \"HW: \", sensor ? sensor.device.hw_version : \"_\", \" \"), \"\\xA0\", /*#__PURE__*/React.createElement(\"p\", {\n      style: versionStyle,\n      className: \"pl-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, \"SW: \", sensor ? sensor.device.software_version : \"_\", \" \"), /*#__PURE__*/React.createElement(Grid.Row, {\n      columns: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: iconDate,\n      alt: \"date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: versionStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"bold\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, t(\"common:todayLastUpdate\"), /*#__PURE__*/React.createElement(Moment, {\n      format: \" HH:mm\",\n      unix: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 23\n      }\n    }, sensor ? sensor.timestamp : \"_\")))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: iconLocation,\n      alt: \"location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: versionStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"bold\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }, \" \", t(\"common:location\")), \" \")), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: iconedit,\n      alt: \"edit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: versionStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 19\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"bold\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, t(\"common:edit\")), \" \"))))), /*#__PURE__*/React.createElement(Grid.Column, {\n      className: \"rightpart\",\n      width: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      className: \" p-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      textAlign: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: paramStyle,\n      className: \"paramStyle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"bold\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 23\n      }\n    }, t(\"common:SurfaceParameters\")))))), /*#__PURE__*/React.createElement(Grid.Row, {\n      columns: 3,\n      centered: true,\n      className: \"m-2 p-0\",\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: paramsValStyle,\n      className: \"paramsVal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 19\n      }\n    }, sensor ? Math.round(sensor.level0.humidity) : \"0\", \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: paramTitleStyle,\n      className: \"paramsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"bold\", {\n      className: \"f-xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, \" \", t(\"common:Humidity\"), \" \"))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: paramsValStyle,\n      className: \"paramsVal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 19\n      }\n    }, sensor ? Math.round(sensor.level0.airTemp) : \"0\", \"\\u2103\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: paramTitleStyle,\n      className: \"paramsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"bold\", {\n      className: \"f-xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, \" \", t(\"common:AirTemp\"), \" \"))), /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: paramsValStyle,\n      className: \"paramsVal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }\n    }, sensor ? Math.round(sensor.level0.solarRad / 100) : \"0\", \"lux\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: paramTitleStyle,\n      className: \"paramsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"bold\", {\n      className: \"f-xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }, t(\"common:SolarRadiation\"))))))), !sensor && /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }, \"No data found for this sensor , please change selected sensor from sensor dropdown\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    sensors: state.devices.userDevices\n  };\n};\n\nconst SensorUpperComponent = withTranslation()(SensorUpper);\nexport default connect(mapStateToProps)(SensorUpperComponent);","map":{"version":3,"sources":["/Users/manish/Desktop/sensegrass/banao_lg/sensegrass/src/components/SensorUpper/sensorupper.js"],"names":["React","Component","Link","connect","Moment","withTranslation","Container","Grid","Dropdown","SensorUpper","state","data","name","hw","sw","upTime","lastModified","humidity","airTemp","solarRad","render","userDevices","sensor","props","console","log","deviceId","match","params","id","t","versionStyle","color","fontSize","margin","upTimeStyle","paramStyle","fontWeight","paramsValStyle","opacity","paramTitleStyle","marginBottom","children","map","userDevice","push","key","text","deviceName","value","content","padding","length","device","uptime","hw_version","software_version","iconDate","timestamp","iconLocation","iconedit","display","justifyContent","Math","round","level0","mapStateToProps","sensors","devices","SensorUpperComponent"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Moment from \"react-moment\";\n\nimport { withTranslation } from \"react-i18next\";\n\nimport { Container, Grid, Dropdown } from \"semantic-ui-react\";\nimport iconLocation from \"../../images/icons/iconlocation.svg\";\nimport iconDate from \"../../images/icons/icontoday.svg\";\nimport iconedit from \"../../images/icons/iconedit.svg\";\nimport \"./sensorupper.scss\";\n\nclass SensorUpper extends Component {\n  state = {\n    data: [\n      {\n        name: \"Sensor1\",\n        hw: \"ver v1.2019\",\n        sw: \"ver v2.4\",\n        upTime: \"188 hrs\",\n        lastModified: \"Today At 13h00\",\n      },\n      { humidity: \"81\", airTemp: \"35\", solarRad: \"75\" },\n    ],\n  };\n\n  render() {\n    const { userDevices, sensor } = this.props;\n    console.log({ sensor });\n    const deviceId =\n      this.props.match && this.props.match.params\n        ? this.props.match.params.id\n        : \"\";\n    // translation react-i18next\n    const { t } = this.props;\n    // TODO use the real data, use deviceName from userDevices\n\n    const versionStyle = {\n      color: \"gray\",\n      fontSize: 10,\n      margin: 0,\n    };\n    const upTimeStyle = {\n      color: \"gray\",\n      fontSize: 14,\n    };\n    const paramStyle = {\n      fontSize: 20,\n      color: \"#535353\",\n      fontWeight: \"bold\"\n    };\n    const paramsValStyle = {\n      fontSize: 35,\n      color: \"#0E7B3C\",\n      fontWeight: \"600\",\n      opacity: 0.7,\n      margin: 0\n    };\n    const paramTitleStyle = {\n      fontSize: 14,\n      color: \"#535353\",\n      fontWeight: \"bold\",\n      marginBottom: \"12px\"\n    };\n\n    const children = [];\n    userDevices.map((userDevice) => {\n      children.push({\n        key: userDevice.deviceId,\n        text: userDevice.deviceName,\n        value: userDevice.deviceId,\n        content: (\n          <Link className=\"link\" to={\"/sensors/\" + userDevice.deviceId}>\n            {userDevice.deviceName}\n          </Link>\n        ),\n      });\n    });\n    return (\n      <Container fluid className=\"sensorUpper m-0 p-0\">\n        <Grid columns={2} divided>\n          <Grid.Column className=\"leftpart\" width={8} className=\"pl-5\">\n            <Grid>\n              <Grid.Row columns={2}>\n                <Grid.Column width={9} style={{ margin: 0, padding: 0 }}>\n                  <Container textAlign=\"left\">\n                    <p>\n                      <bold style={{ fontSize: 24 }}>\n                        {!userDevices.length ? (\n                          <p style={{ fontSize: 15 }}>\n                            no sensors found in dropdown please select device\n                            from upove dropdown\n                            {/* sensor */}\n                          </p>\n                        ) : (\n                          <Dropdown\n                            inline\n                            header=\"sensors\"\n                            options={children}\n                            defaultValue={deviceId}\n                            className = \"sensorDropdown\"\n                            // defaultValue={defaultOption}\n                          />\n                        )}\n                      </bold>\n                    </p>\n                  </Container>\n                </Grid.Column>\n\n                <Grid.Column width={7} style={{ margin: 0, padding: 0 }}>\n                  <Container textAlign=\"right\">\n                    <p style={upTimeStyle}>\n                      {t(\"common:uptime\")}:{\" \"}\n                      {sensor ? sensor.device.uptime : \"_\"}\n                    </p>\n                  </Container>\n                </Grid.Column>\n              </Grid.Row>\n              <p style={versionStyle} className=\"p-0\">\n                HW: {sensor ? sensor.device.hw_version : \"_\"}{\" \"}\n              </p>\n              &nbsp;\n              <p style={versionStyle} className=\"pl-2\">\n                SW: {sensor ? sensor.device.software_version : \"_\"}{\" \"}\n              </p>\n              <Grid.Row columns={3}>\n                <Grid.Column width={9}>\n                  <img src={iconDate} alt=\"date\" />\n                  <p style={versionStyle}>\n                    <bold>\n                      {t(\"common:todayLastUpdate\")}\n                      {/* parse=\"YYYY-MM-DD HH:mm\" */}\n                      <Moment format=\" HH:mm\" unix>\n                        {sensor ? sensor.timestamp : \"_\"}\n                      </Moment>\n                    </bold>\n                  </p>\n                </Grid.Column>\n                <Grid.Column width={4} className=\"p-0\">\n                  <img src={iconLocation} alt=\"location\" />\n                  <p style={versionStyle}>\n                    {\" \"}\n                    <bold> {t(\"common:location\")}</bold>{\" \"}\n                  </p>\n                </Grid.Column>\n                <Grid.Column width={3}>\n                  <img src={iconedit} alt=\"edit\" />\n                  <p style={versionStyle}>\n                    {\" \"}\n                    <bold>{t(\"common:edit\")}</bold>{\" \"}\n                  </p>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Grid.Column>\n          <Grid.Column className=\"rightpart\" width={8}>\n            <Grid>\n              <Grid.Row className=\" p-2\">\n                <Grid.Column>\n                  <Container textAlign=\"left\">\n                    <p style={paramStyle} className = \"paramStyle\">\n                      <bold>{t(\"common:SurfaceParameters\")}</bold>\n                    </p>\n                  </Container>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row\n                columns={3}\n                centered\n                className=\"m-2 p-0\"\n                style={{ display: \"flex\", justifyContent: \"space-between\" }}\n              >\n                <Grid.Column width={4}>\n                  <p style={paramsValStyle} className = \"paramsVal\">\n                    {sensor ? Math.round(sensor.level0.humidity) : \"0\"}\n                    &#37;\n                  </p>\n                  <p style={paramTitleStyle} className = \"paramsTitle\">\n                    <bold className=\"f-xs\"> {t(\"common:Humidity\")} </bold>\n                  </p>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                  <p style={paramsValStyle} className = \"paramsVal\">\n                    {sensor ? Math.round(sensor.level0.airTemp) : \"0\"}\n                    &#8451;\n                  </p>\n                  <p style={paramTitleStyle} className = \"paramsTitle\">\n                    <bold className=\"f-xs\"> {t(\"common:AirTemp\")} </bold>\n                  </p>\n                </Grid.Column>\n                <Grid.Column>\n                  {/* To fix Units */}\n                  <p style={paramsValStyle} className = \"paramsVal\">\n                    {sensor ? Math.round(sensor.level0.solarRad / 100) : \"0\"}\n                    lux\n                  </p>\n                  <p style={paramTitleStyle} className = \"paramsTitle\">\n                    <bold className=\"f-xs\">{t(\"common:SolarRadiation\")}</bold>\n                  </p>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Grid.Column>\n          {!sensor && (\n            <Grid.Column width={8}>\n              <p style={{ color: \"red\" }}>\n                No data found for this sensor , please change selected sensor\n                from sensor dropdown\n              </p>\n            </Grid.Column>\n          )}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    sensors: state.devices.userDevices,\n  };\n};\nconst SensorUpperComponent = withTranslation()(SensorUpper);\n\nexport default connect(mapStateToProps)(SensorUpperComponent);\n"]},"metadata":{},"sourceType":"module"}