{"ast":null,"code":"'use strict';\n\nconst React = require('react');\n\nclass WeatherDisplay extends React.Component {\n  getStyles() {\n    return {\n      test: {\n        WebkitUserSelect: 'none',\n        MozUserSelect: 'none',\n        msUserSelect: 'none',\n        userSelect: 'none'\n      }\n    };\n  }\n\n  getForecastImage() {\n    switch (this.props.currentCondition) {\n      case 'sunny':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/sunny.png';\n\n      case 'cloudy':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/cloudy.png';\n\n      case 'rainy':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/rain.png';\n\n      case 'stormy':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/tstorms.png';\n\n      case 'snowy':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/snow.png';\n\n      default:\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/mostlysunny.png';\n    }\n  }\n\n  render() {\n    const width = this.props.width * 0.6;\n    const fontsize = width * 0.25; // Piece it all together to form the weather display.\n\n    return React.createElement('div', {\n      style: {\n        width: this.props.width,\n        height: this.props.height,\n        position: 'relative'\n      }\n    }, React.createElement('img', {\n      id: 'weatherImage',\n      src: this.getForecastImage(),\n      style: {\n        width,\n        height: width,\n        position: 'absolute',\n        left: (this.props.width - width) / 2,\n        top: (this.props.height - width) / 2\n      }\n    }), React.createElement('h1', {\n      id: 'weatherValue',\n      style: {\n        width,\n        fontSize: fontsize,\n        position: 'absolute',\n        top: (this.props.height - fontsize) / 2,\n        left: (this.props.width - width) / 2,\n        margin: '0 0 0 0',\n        textAlign: 'center',\n        textShadow: `${fontsize * 0.05}px ${fontsize * 0.05}px #111111`,\n        color: 'white'\n      }\n    }, this.props.currentTemperature, '\\u00B0'));\n  }\n\n}\n\nWeatherDisplay.propTypes = {\n  /* Width of component in pixels */\n  width: React.PropTypes.number,\n\n  /* Height of component in pixels */\n  height: React.PropTypes.number,\n\n  /* Actual temperature detected for the location */\n  currentTemperature: React.PropTypes.number,\n\n  /* The forcast to display */\n  currentCondition: React.PropTypes.oneOf(['sunny', 'cloudy', 'rainy', 'stormy', 'snowy'])\n};\nWeatherDisplay.defaultProps = {\n  width: 1280,\n  height: 720,\n  currentTemperature: 70,\n  currentCondition: 'sunny'\n};\nmodule.exports = WeatherDisplay;","map":{"version":3,"sources":["/Users/deepakkumarsingh/Downloads/banao_lg/sensegrass/node_modules/react-weather-display/dist/react-weather-display.js"],"names":["React","require","WeatherDisplay","Component","getStyles","test","WebkitUserSelect","MozUserSelect","msUserSelect","userSelect","getForecastImage","props","currentCondition","render","width","fontsize","createElement","style","height","position","id","src","left","top","fontSize","margin","textAlign","textShadow","color","currentTemperature","propTypes","PropTypes","number","oneOf","defaultProps","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAC3CC,EAAAA,SAAS,GAAG;AACV,WAAO;AACLC,MAAAA,IAAI,EAAE;AACJC,QAAAA,gBAAgB,EAAE,MADd;AAEJC,QAAAA,aAAa,EAAE,MAFX;AAGJC,QAAAA,YAAY,EAAE,MAHV;AAIJC,QAAAA,UAAU,EAAE;AAJR;AADD,KAAP;AAQD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAKC,KAAL,CAAWC,gBAAnB;AACE,WAAK,OAAL;AACE,eAAO,gGAAP;;AACF,WAAK,QAAL;AACE,eAAO,iGAAP;;AACF,WAAK,OAAL;AACE,eAAO,+FAAP;;AACF,WAAK,QAAL;AACE,eAAO,kGAAP;;AACF,WAAK,OAAL;AACE,eAAO,+FAAP;;AACF;AACE,eAAO,sGAAP;AAZJ;AAcD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,KAAKH,KAAL,CAAWG,KAAX,GAAmB,GAAjC;AACA,UAAMC,QAAQ,GAAGD,KAAK,GAAG,IAAzB,CAFO,CAGP;;AACA,WAAOd,KAAK,CAACgB,aAAN,CACL,KADK,EAEL;AAAEC,MAAAA,KAAK,EAAE;AACLH,QAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG,KADb;AAELI,QAAAA,MAAM,EAAE,KAAKP,KAAL,CAAWO,MAFd;AAGLC,QAAAA,QAAQ,EAAE;AAHL;AAAT,KAFK,EAQLnB,KAAK,CAACgB,aAAN,CAAoB,KAApB,EAA2B;AAAEI,MAAAA,EAAE,EAAE,cAAN;AAAsBC,MAAAA,GAAG,EAAE,KAAKX,gBAAL,EAA3B;AAAoDO,MAAAA,KAAK,EAAE;AAClFH,QAAAA,KADkF;AAElFI,QAAAA,MAAM,EAAEJ,KAF0E;AAGlFK,QAAAA,QAAQ,EAAE,UAHwE;AAIlFG,QAAAA,IAAI,EAAE,CAAC,KAAKX,KAAL,CAAWG,KAAX,GAAmBA,KAApB,IAA6B,CAJ+C;AAKlFS,QAAAA,GAAG,EAAE,CAAC,KAAKZ,KAAL,CAAWO,MAAX,GAAoBJ,KAArB,IAA8B;AAL+C;AAA3D,KAA3B,CARK,EAgBLd,KAAK,CAACgB,aAAN,CACE,IADF,EAEE;AAAEI,MAAAA,EAAE,EAAE,cAAN;AAAsBH,MAAAA,KAAK,EAAE;AACzBH,QAAAA,KADyB;AAEzBU,QAAAA,QAAQ,EAAET,QAFe;AAGzBI,QAAAA,QAAQ,EAAE,UAHe;AAIzBI,QAAAA,GAAG,EAAE,CAAC,KAAKZ,KAAL,CAAWO,MAAX,GAAoBH,QAArB,IAAiC,CAJb;AAKzBO,QAAAA,IAAI,EAAE,CAAC,KAAKX,KAAL,CAAWG,KAAX,GAAmBA,KAApB,IAA6B,CALV;AAMzBW,QAAAA,MAAM,EAAE,SANiB;AAOzBC,QAAAA,SAAS,EAAE,QAPc;AAQzBC,QAAAA,UAAU,EAAG,GAAGZ,QAAQ,GAAG,IAAM,MAAMA,QAAQ,GAAG,IAAM,YAR/B;AASzBa,QAAAA,KAAK,EAAE;AATkB;AAA7B,KAFF,EAcE,KAAKjB,KAAL,CAAWkB,kBAdb,EAeE,QAfF,CAhBK,CAAP;AAkCD;;AAnE0C;;AAsE7C3B,cAAc,CAAC4B,SAAf,GAA2B;AACzB;AACAhB,EAAAA,KAAK,EAAEd,KAAK,CAAC+B,SAAN,CAAgBC,MAFE;;AAGzB;AACAd,EAAAA,MAAM,EAAElB,KAAK,CAAC+B,SAAN,CAAgBC,MAJC;;AAKzB;AACAH,EAAAA,kBAAkB,EAAE7B,KAAK,CAAC+B,SAAN,CAAgBC,MANX;;AAOzB;AACApB,EAAAA,gBAAgB,EAAEZ,KAAK,CAAC+B,SAAN,CAAgBE,KAAhB,CAAsB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,QAA7B,EAAuC,OAAvC,CAAtB;AARO,CAA3B;AAWA/B,cAAc,CAACgC,YAAf,GAA8B;AAC5BpB,EAAAA,KAAK,EAAE,IADqB;AAE5BI,EAAAA,MAAM,EAAE,GAFoB;AAG5BW,EAAAA,kBAAkB,EAAE,EAHQ;AAI5BjB,EAAAA,gBAAgB,EAAE;AAJU,CAA9B;AAOAuB,MAAM,CAACC,OAAP,GAAiBlC,cAAjB","sourcesContent":["'use strict';\n\nconst React = require('react');\n\nclass WeatherDisplay extends React.Component {\n  getStyles() {\n    return {\n      test: {\n        WebkitUserSelect: 'none',\n        MozUserSelect: 'none',\n        msUserSelect: 'none',\n        userSelect: 'none'\n      }\n    };\n  }\n\n  getForecastImage() {\n    switch (this.props.currentCondition) {\n      case 'sunny':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/sunny.png';\n      case 'cloudy':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/cloudy.png';\n      case 'rainy':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/rain.png';\n      case 'stormy':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/tstorms.png';\n      case 'snowy':\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/snow.png';\n      default:\n        return 'https://raw.githubusercontent.com/KevinMellott91/react-weather-display/master/images/mostlysunny.png';\n    }\n  }\n\n  render() {\n    const width = this.props.width * 0.6;\n    const fontsize = width * 0.25;\n    // Piece it all together to form the weather display.\n    return React.createElement(\n      'div',\n      { style: {\n          width: this.props.width,\n          height: this.props.height,\n          position: 'relative'\n        }\n      },\n      React.createElement('img', { id: 'weatherImage', src: this.getForecastImage(), style: {\n          width,\n          height: width,\n          position: 'absolute',\n          left: (this.props.width - width) / 2,\n          top: (this.props.height - width) / 2\n        }\n      }),\n      React.createElement(\n        'h1',\n        { id: 'weatherValue', style: {\n            width,\n            fontSize: fontsize,\n            position: 'absolute',\n            top: (this.props.height - fontsize) / 2,\n            left: (this.props.width - width) / 2,\n            margin: '0 0 0 0',\n            textAlign: 'center',\n            textShadow: `${ fontsize * 0.05 }px ${ fontsize * 0.05 }px #111111`,\n            color: 'white'\n          }\n        },\n        this.props.currentTemperature,\n        '\\u00B0'\n      )\n    );\n  }\n}\n\nWeatherDisplay.propTypes = {\n  /* Width of component in pixels */\n  width: React.PropTypes.number,\n  /* Height of component in pixels */\n  height: React.PropTypes.number,\n  /* Actual temperature detected for the location */\n  currentTemperature: React.PropTypes.number,\n  /* The forcast to display */\n  currentCondition: React.PropTypes.oneOf(['sunny', 'cloudy', 'rainy', 'stormy', 'snowy'])\n};\n\nWeatherDisplay.defaultProps = {\n  width: 1280,\n  height: 720,\n  currentTemperature: 70,\n  currentCondition: 'sunny'\n};\n\nmodule.exports = WeatherDisplay;\n"]},"metadata":{},"sourceType":"script"}